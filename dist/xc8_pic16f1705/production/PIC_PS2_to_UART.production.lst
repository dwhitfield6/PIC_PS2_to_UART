

Microchip Technology PIC PRO Macro Assembler V1.34 build -361300703 
                                                                                               Wed Oct 21 16:31:39 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
     8                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
     9                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	text36,local,class=CODE,merge=1,delta=2
    19                           	psect	text37,local,class=CODE,merge=1,delta=2
    20                           	psect	text38,local,class=CODE,merge=1,delta=2
    21                           	psect	text39,local,class=CODE,merge=1,delta=2
    22                           	psect	text40,local,class=CODE,merge=1,delta=2
    23                           	psect	text42,local,class=CODE,merge=1,delta=2
    24                           	psect	text52,local,class=CODE,merge=1,delta=2
    25                           	psect	text65,local,class=CODE,merge=1,delta=2
    26                           	psect	text77,local,class=CODE,merge=1,delta=2
    27                           	psect	pa_nodes,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     	;# 
    30  0001                     	;# 
    31  0002                     	;# 
    32  0003                     	;# 
    33  0004                     	;# 
    34  0005                     	;# 
    35  0006                     	;# 
    36  0007                     	;# 
    37  0008                     	;# 
    38  0009                     	;# 
    39  000A                     	;# 
    40  000B                     	;# 
    41  000C                     	;# 
    42  000E                     	;# 
    43  0011                     	;# 
    44  0012                     	;# 
    45  0013                     	;# 
    46  0015                     	;# 
    47  0016                     	;# 
    48  0016                     	;# 
    49  0017                     	;# 
    50  0018                     	;# 
    51  0019                     	;# 
    52  001A                     	;# 
    53  001B                     	;# 
    54  001C                     	;# 
    55  008C                     	;# 
    56  008E                     	;# 
    57  0091                     	;# 
    58  0092                     	;# 
    59  0093                     	;# 
    60  0095                     	;# 
    61  0096                     	;# 
    62  0097                     	;# 
    63  0098                     	;# 
    64  0099                     	;# 
    65  009A                     	;# 
    66  009B                     	;# 
    67  009B                     	;# 
    68  009C                     	;# 
    69  009D                     	;# 
    70  009E                     	;# 
    71  009F                     	;# 
    72  010C                     	;# 
    73  010E                     	;# 
    74  0111                     	;# 
    75  0112                     	;# 
    76  0113                     	;# 
    77  0114                     	;# 
    78  0115                     	;# 
    79  0116                     	;# 
    80  0117                     	;# 
    81  0118                     	;# 
    82  0119                     	;# 
    83  011C                     	;# 
    84  018C                     	;# 
    85  018E                     	;# 
    86  0191                     	;# 
    87  0191                     	;# 
    88  0192                     	;# 
    89  0193                     	;# 
    90  0193                     	;# 
    91  0194                     	;# 
    92  0195                     	;# 
    93  0196                     	;# 
    94  0197                     	;# 
    95  0199                     	;# 
    96  0199                     	;# 
    97  0199                     	;# 
    98  019A                     	;# 
    99  019A                     	;# 
   100  019A                     	;# 
   101  019B                     	;# 
   102  019B                     	;# 
   103  019B                     	;# 
   104  019B                     	;# 
   105  019B                     	;# 
   106  019C                     	;# 
   107  019C                     	;# 
   108  019C                     	;# 
   109  019D                     	;# 
   110  019D                     	;# 
   111  019D                     	;# 
   112  019E                     	;# 
   113  019E                     	;# 
   114  019E                     	;# 
   115  019F                     	;# 
   116  019F                     	;# 
   117  019F                     	;# 
   118  019F                     	;# 
   119  019F                     	;# 
   120  020C                     	;# 
   121  020E                     	;# 
   122  0211                     	;# 
   123  0211                     	;# 
   124  0212                     	;# 
   125  0212                     	;# 
   126  0213                     	;# 
   127  0213                     	;# 
   128  0214                     	;# 
   129  0214                     	;# 
   130  0215                     	;# 
   131  0215                     	;# 
   132  0215                     	;# 
   133  0215                     	;# 
   134  0216                     	;# 
   135  0216                     	;# 
   136  0217                     	;# 
   137  0217                     	;# 
   138  028C                     	;# 
   139  028E                     	;# 
   140  0291                     	;# 
   141  0291                     	;# 
   142  0292                     	;# 
   143  0293                     	;# 
   144  0293                     	;# 
   145  0298                     	;# 
   146  0298                     	;# 
   147  0299                     	;# 
   148  029A                     	;# 
   149  029A                     	;# 
   150  029E                     	;# 
   151  030C                     	;# 
   152  030E                     	;# 
   153  038C                     	;# 
   154  038E                     	;# 
   155  0391                     	;# 
   156  0392                     	;# 
   157  0393                     	;# 
   158  0397                     	;# 
   159  0398                     	;# 
   160  0399                     	;# 
   161  0415                     	;# 
   162  0416                     	;# 
   163  0417                     	;# 
   164  041C                     	;# 
   165  041D                     	;# 
   166  041E                     	;# 
   167  0511                     	;# 
   168  0515                     	;# 
   169  0617                     	;# 
   170  0618                     	;# 
   171  0619                     	;# 
   172  0619                     	;# 
   173  061A                     	;# 
   174  061B                     	;# 
   175  061C                     	;# 
   176  061C                     	;# 
   177  0691                     	;# 
   178  0692                     	;# 
   179  0693                     	;# 
   180  0694                     	;# 
   181  0695                     	;# 
   182  0696                     	;# 
   183  0697                     	;# 
   184  0698                     	;# 
   185  0699                     	;# 
   186  069A                     	;# 
   187  069B                     	;# 
   188  069C                     	;# 
   189  069D                     	;# 
   190  069E                     	;# 
   191  069F                     	;# 
   192  0E0F                     	;# 
   193  0E10                     	;# 
   194  0E11                     	;# 
   195  0E12                     	;# 
   196  0E13                     	;# 
   197  0E14                     	;# 
   198  0E15                     	;# 
   199  0E17                     	;# 
   200  0E20                     	;# 
   201  0E21                     	;# 
   202  0E22                     	;# 
   203  0E24                     	;# 
   204  0E25                     	;# 
   205  0E28                     	;# 
   206  0E29                     	;# 
   207  0E2A                     	;# 
   208  0E2B                     	;# 
   209  0E90                     	;# 
   210  0E91                     	;# 
   211  0E92                     	;# 
   212  0E94                     	;# 
   213  0E95                     	;# 
   214  0EA0                     	;# 
   215  0EA1                     	;# 
   216  0EA2                     	;# 
   217  0EA3                     	;# 
   218  0EA4                     	;# 
   219  0EA5                     	;# 
   220  0F0F                     	;# 
   221  0F10                     	;# 
   222  0F11                     	;# 
   223  0F12                     	;# 
   224  0F13                     	;# 
   225  0F14                     	;# 
   226  0F15                     	;# 
   227  0F16                     	;# 
   228  0F17                     	;# 
   229  0F18                     	;# 
   230  0F19                     	;# 
   231  0F1A                     	;# 
   232  0F1B                     	;# 
   233  0F1C                     	;# 
   234  0F1D                     	;# 
   235  0F1E                     	;# 
   236  0F1F                     	;# 
   237  0F20                     	;# 
   238  0F21                     	;# 
   239  0F22                     	;# 
   240  0F23                     	;# 
   241  0F24                     	;# 
   242  0F25                     	;# 
   243  0F26                     	;# 
   244  0F27                     	;# 
   245  0F28                     	;# 
   246  0F29                     	;# 
   247  0F2A                     	;# 
   248  0F2B                     	;# 
   249  0F2C                     	;# 
   250  0F2D                     	;# 
   251  0F9E                     	;# 
   252  0FE4                     	;# 
   253  0FE5                     	;# 
   254  0FE6                     	;# 
   255  0FE7                     	;# 
   256  0FE8                     	;# 
   257  0FE9                     	;# 
   258  0FEA                     	;# 
   259  0FEB                     	;# 
   260  0FED                     	;# 
   261  0FEE                     	;# 
   262  0FEF                     	;# 
   263  0000                     	;# 
   264  0001                     	;# 
   265  0002                     	;# 
   266  0003                     	;# 
   267  0004                     	;# 
   268  0005                     	;# 
   269  0006                     	;# 
   270  0007                     	;# 
   271  0008                     	;# 
   272  0009                     	;# 
   273  000A                     	;# 
   274  000B                     	;# 
   275  000C                     	;# 
   276  000E                     	;# 
   277  0011                     	;# 
   278  0012                     	;# 
   279  0013                     	;# 
   280  0015                     	;# 
   281  0016                     	;# 
   282  0016                     	;# 
   283  0017                     	;# 
   284  0018                     	;# 
   285  0019                     	;# 
   286  001A                     	;# 
   287  001B                     	;# 
   288  001C                     	;# 
   289  008C                     	;# 
   290  008E                     	;# 
   291  0091                     	;# 
   292  0092                     	;# 
   293  0093                     	;# 
   294  0095                     	;# 
   295  0096                     	;# 
   296  0097                     	;# 
   297  0098                     	;# 
   298  0099                     	;# 
   299  009A                     	;# 
   300  009B                     	;# 
   301  009B                     	;# 
   302  009C                     	;# 
   303  009D                     	;# 
   304  009E                     	;# 
   305  009F                     	;# 
   306  010C                     	;# 
   307  010E                     	;# 
   308  0111                     	;# 
   309  0112                     	;# 
   310  0113                     	;# 
   311  0114                     	;# 
   312  0115                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  0118                     	;# 
   316  0119                     	;# 
   317  011C                     	;# 
   318  018C                     	;# 
   319  018E                     	;# 
   320  0191                     	;# 
   321  0191                     	;# 
   322  0192                     	;# 
   323  0193                     	;# 
   324  0193                     	;# 
   325  0194                     	;# 
   326  0195                     	;# 
   327  0196                     	;# 
   328  0197                     	;# 
   329  0199                     	;# 
   330  0199                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019A                     	;# 
   334  019A                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019C                     	;# 
   341  019C                     	;# 
   342  019C                     	;# 
   343  019D                     	;# 
   344  019D                     	;# 
   345  019D                     	;# 
   346  019E                     	;# 
   347  019E                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  019F                     	;# 
   351  019F                     	;# 
   352  019F                     	;# 
   353  019F                     	;# 
   354  020C                     	;# 
   355  020E                     	;# 
   356  0211                     	;# 
   357  0211                     	;# 
   358  0212                     	;# 
   359  0212                     	;# 
   360  0213                     	;# 
   361  0213                     	;# 
   362  0214                     	;# 
   363  0214                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0215                     	;# 
   367  0215                     	;# 
   368  0216                     	;# 
   369  0216                     	;# 
   370  0217                     	;# 
   371  0217                     	;# 
   372  028C                     	;# 
   373  028E                     	;# 
   374  0291                     	;# 
   375  0291                     	;# 
   376  0292                     	;# 
   377  0293                     	;# 
   378  0293                     	;# 
   379  0298                     	;# 
   380  0298                     	;# 
   381  0299                     	;# 
   382  029A                     	;# 
   383  029A                     	;# 
   384  029E                     	;# 
   385  030C                     	;# 
   386  030E                     	;# 
   387  038C                     	;# 
   388  038E                     	;# 
   389  0391                     	;# 
   390  0392                     	;# 
   391  0393                     	;# 
   392  0397                     	;# 
   393  0398                     	;# 
   394  0399                     	;# 
   395  0415                     	;# 
   396  0416                     	;# 
   397  0417                     	;# 
   398  041C                     	;# 
   399  041D                     	;# 
   400  041E                     	;# 
   401  0511                     	;# 
   402  0515                     	;# 
   403  0617                     	;# 
   404  0618                     	;# 
   405  0619                     	;# 
   406  0619                     	;# 
   407  061A                     	;# 
   408  061B                     	;# 
   409  061C                     	;# 
   410  061C                     	;# 
   411  0691                     	;# 
   412  0692                     	;# 
   413  0693                     	;# 
   414  0694                     	;# 
   415  0695                     	;# 
   416  0696                     	;# 
   417  0697                     	;# 
   418  0698                     	;# 
   419  0699                     	;# 
   420  069A                     	;# 
   421  069B                     	;# 
   422  069C                     	;# 
   423  069D                     	;# 
   424  069E                     	;# 
   425  069F                     	;# 
   426  0E0F                     	;# 
   427  0E10                     	;# 
   428  0E11                     	;# 
   429  0E12                     	;# 
   430  0E13                     	;# 
   431  0E14                     	;# 
   432  0E15                     	;# 
   433  0E17                     	;# 
   434  0E20                     	;# 
   435  0E21                     	;# 
   436  0E22                     	;# 
   437  0E24                     	;# 
   438  0E25                     	;# 
   439  0E28                     	;# 
   440  0E29                     	;# 
   441  0E2A                     	;# 
   442  0E2B                     	;# 
   443  0E90                     	;# 
   444  0E91                     	;# 
   445  0E92                     	;# 
   446  0E94                     	;# 
   447  0E95                     	;# 
   448  0EA0                     	;# 
   449  0EA1                     	;# 
   450  0EA2                     	;# 
   451  0EA3                     	;# 
   452  0EA4                     	;# 
   453  0EA5                     	;# 
   454  0F0F                     	;# 
   455  0F10                     	;# 
   456  0F11                     	;# 
   457  0F12                     	;# 
   458  0F13                     	;# 
   459  0F14                     	;# 
   460  0F15                     	;# 
   461  0F16                     	;# 
   462  0F17                     	;# 
   463  0F18                     	;# 
   464  0F19                     	;# 
   465  0F1A                     	;# 
   466  0F1B                     	;# 
   467  0F1C                     	;# 
   468  0F1D                     	;# 
   469  0F1E                     	;# 
   470  0F1F                     	;# 
   471  0F20                     	;# 
   472  0F21                     	;# 
   473  0F22                     	;# 
   474  0F23                     	;# 
   475  0F24                     	;# 
   476  0F25                     	;# 
   477  0F26                     	;# 
   478  0F27                     	;# 
   479  0F28                     	;# 
   480  0F29                     	;# 
   481  0F2A                     	;# 
   482  0F2B                     	;# 
   483  0F2C                     	;# 
   484  0F2D                     	;# 
   485  0F9E                     	;# 
   486  0FE4                     	;# 
   487  0FE5                     	;# 
   488  0FE6                     	;# 
   489  0FE7                     	;# 
   490  0FE8                     	;# 
   491  0FE9                     	;# 
   492  0FEA                     	;# 
   493  0FEB                     	;# 
   494  0FED                     	;# 
   495  0FEE                     	;# 
   496  0FEF                     	;# 
   497  0000                     	;# 
   498  0001                     	;# 
   499  0002                     	;# 
   500  0003                     	;# 
   501  0004                     	;# 
   502  0005                     	;# 
   503  0006                     	;# 
   504  0007                     	;# 
   505  0008                     	;# 
   506  0009                     	;# 
   507  000A                     	;# 
   508  000B                     	;# 
   509  000C                     	;# 
   510  000E                     	;# 
   511  0011                     	;# 
   512  0012                     	;# 
   513  0013                     	;# 
   514  0015                     	;# 
   515  0016                     	;# 
   516  0016                     	;# 
   517  0017                     	;# 
   518  0018                     	;# 
   519  0019                     	;# 
   520  001A                     	;# 
   521  001B                     	;# 
   522  001C                     	;# 
   523  008C                     	;# 
   524  008E                     	;# 
   525  0091                     	;# 
   526  0092                     	;# 
   527  0093                     	;# 
   528  0095                     	;# 
   529  0096                     	;# 
   530  0097                     	;# 
   531  0098                     	;# 
   532  0099                     	;# 
   533  009A                     	;# 
   534  009B                     	;# 
   535  009B                     	;# 
   536  009C                     	;# 
   537  009D                     	;# 
   538  009E                     	;# 
   539  009F                     	;# 
   540  010C                     	;# 
   541  010E                     	;# 
   542  0111                     	;# 
   543  0112                     	;# 
   544  0113                     	;# 
   545  0114                     	;# 
   546  0115                     	;# 
   547  0116                     	;# 
   548  0117                     	;# 
   549  0118                     	;# 
   550  0119                     	;# 
   551  011C                     	;# 
   552  018C                     	;# 
   553  018E                     	;# 
   554  0191                     	;# 
   555  0191                     	;# 
   556  0192                     	;# 
   557  0193                     	;# 
   558  0193                     	;# 
   559  0194                     	;# 
   560  0195                     	;# 
   561  0196                     	;# 
   562  0197                     	;# 
   563  0199                     	;# 
   564  0199                     	;# 
   565  0199                     	;# 
   566  019A                     	;# 
   567  019A                     	;# 
   568  019A                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019B                     	;# 
   574  019C                     	;# 
   575  019C                     	;# 
   576  019C                     	;# 
   577  019D                     	;# 
   578  019D                     	;# 
   579  019D                     	;# 
   580  019E                     	;# 
   581  019E                     	;# 
   582  019E                     	;# 
   583  019F                     	;# 
   584  019F                     	;# 
   585  019F                     	;# 
   586  019F                     	;# 
   587  019F                     	;# 
   588  020C                     	;# 
   589  020E                     	;# 
   590  0211                     	;# 
   591  0211                     	;# 
   592  0212                     	;# 
   593  0212                     	;# 
   594  0213                     	;# 
   595  0213                     	;# 
   596  0214                     	;# 
   597  0214                     	;# 
   598  0215                     	;# 
   599  0215                     	;# 
   600  0215                     	;# 
   601  0215                     	;# 
   602  0216                     	;# 
   603  0216                     	;# 
   604  0217                     	;# 
   605  0217                     	;# 
   606  028C                     	;# 
   607  028E                     	;# 
   608  0291                     	;# 
   609  0291                     	;# 
   610  0292                     	;# 
   611  0293                     	;# 
   612  0293                     	;# 
   613  0298                     	;# 
   614  0298                     	;# 
   615  0299                     	;# 
   616  029A                     	;# 
   617  029A                     	;# 
   618  029E                     	;# 
   619  030C                     	;# 
   620  030E                     	;# 
   621  038C                     	;# 
   622  038E                     	;# 
   623  0391                     	;# 
   624  0392                     	;# 
   625  0393                     	;# 
   626  0397                     	;# 
   627  0398                     	;# 
   628  0399                     	;# 
   629  0415                     	;# 
   630  0416                     	;# 
   631  0417                     	;# 
   632  041C                     	;# 
   633  041D                     	;# 
   634  041E                     	;# 
   635  0511                     	;# 
   636  0515                     	;# 
   637  0617                     	;# 
   638  0618                     	;# 
   639  0619                     	;# 
   640  0619                     	;# 
   641  061A                     	;# 
   642  061B                     	;# 
   643  061C                     	;# 
   644  061C                     	;# 
   645  0691                     	;# 
   646  0692                     	;# 
   647  0693                     	;# 
   648  0694                     	;# 
   649  0695                     	;# 
   650  0696                     	;# 
   651  0697                     	;# 
   652  0698                     	;# 
   653  0699                     	;# 
   654  069A                     	;# 
   655  069B                     	;# 
   656  069C                     	;# 
   657  069D                     	;# 
   658  069E                     	;# 
   659  069F                     	;# 
   660  0E0F                     	;# 
   661  0E10                     	;# 
   662  0E11                     	;# 
   663  0E12                     	;# 
   664  0E13                     	;# 
   665  0E14                     	;# 
   666  0E15                     	;# 
   667  0E17                     	;# 
   668  0E20                     	;# 
   669  0E21                     	;# 
   670  0E22                     	;# 
   671  0E24                     	;# 
   672  0E25                     	;# 
   673  0E28                     	;# 
   674  0E29                     	;# 
   675  0E2A                     	;# 
   676  0E2B                     	;# 
   677  0E90                     	;# 
   678  0E91                     	;# 
   679  0E92                     	;# 
   680  0E94                     	;# 
   681  0E95                     	;# 
   682  0EA0                     	;# 
   683  0EA1                     	;# 
   684  0EA2                     	;# 
   685  0EA3                     	;# 
   686  0EA4                     	;# 
   687  0EA5                     	;# 
   688  0F0F                     	;# 
   689  0F10                     	;# 
   690  0F11                     	;# 
   691  0F12                     	;# 
   692  0F13                     	;# 
   693  0F14                     	;# 
   694  0F15                     	;# 
   695  0F16                     	;# 
   696  0F17                     	;# 
   697  0F18                     	;# 
   698  0F19                     	;# 
   699  0F1A                     	;# 
   700  0F1B                     	;# 
   701  0F1C                     	;# 
   702  0F1D                     	;# 
   703  0F1E                     	;# 
   704  0F1F                     	;# 
   705  0F20                     	;# 
   706  0F21                     	;# 
   707  0F22                     	;# 
   708  0F23                     	;# 
   709  0F24                     	;# 
   710  0F25                     	;# 
   711  0F26                     	;# 
   712  0F27                     	;# 
   713  0F28                     	;# 
   714  0F29                     	;# 
   715  0F2A                     	;# 
   716  0F2B                     	;# 
   717  0F2C                     	;# 
   718  0F2D                     	;# 
   719  0F9E                     	;# 
   720  0FE4                     	;# 
   721  0FE5                     	;# 
   722  0FE6                     	;# 
   723  0FE7                     	;# 
   724  0FE8                     	;# 
   725  0FE9                     	;# 
   726  0FEA                     	;# 
   727  0FEB                     	;# 
   728  0FED                     	;# 
   729  0FEE                     	;# 
   730  0FEF                     	;# 
   731  0000                     	;# 
   732  0001                     	;# 
   733  0002                     	;# 
   734  0003                     	;# 
   735  0004                     	;# 
   736  0005                     	;# 
   737  0006                     	;# 
   738  0007                     	;# 
   739  0008                     	;# 
   740  0009                     	;# 
   741  000A                     	;# 
   742  000B                     	;# 
   743  000C                     	;# 
   744  000E                     	;# 
   745  0011                     	;# 
   746  0012                     	;# 
   747  0013                     	;# 
   748  0015                     	;# 
   749  0016                     	;# 
   750  0016                     	;# 
   751  0017                     	;# 
   752  0018                     	;# 
   753  0019                     	;# 
   754  001A                     	;# 
   755  001B                     	;# 
   756  001C                     	;# 
   757  008C                     	;# 
   758  008E                     	;# 
   759  0091                     	;# 
   760  0092                     	;# 
   761  0093                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0097                     	;# 
   765  0098                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  009F                     	;# 
   774  010C                     	;# 
   775  010E                     	;# 
   776  0111                     	;# 
   777  0112                     	;# 
   778  0113                     	;# 
   779  0114                     	;# 
   780  0115                     	;# 
   781  0116                     	;# 
   782  0117                     	;# 
   783  0118                     	;# 
   784  0119                     	;# 
   785  011C                     	;# 
   786  018C                     	;# 
   787  018E                     	;# 
   788  0191                     	;# 
   789  0191                     	;# 
   790  0192                     	;# 
   791  0193                     	;# 
   792  0193                     	;# 
   793  0194                     	;# 
   794  0195                     	;# 
   795  0196                     	;# 
   796  0197                     	;# 
   797  0199                     	;# 
   798  0199                     	;# 
   799  0199                     	;# 
   800  019A                     	;# 
   801  019A                     	;# 
   802  019A                     	;# 
   803  019B                     	;# 
   804  019B                     	;# 
   805  019B                     	;# 
   806  019B                     	;# 
   807  019B                     	;# 
   808  019C                     	;# 
   809  019C                     	;# 
   810  019C                     	;# 
   811  019D                     	;# 
   812  019D                     	;# 
   813  019D                     	;# 
   814  019E                     	;# 
   815  019E                     	;# 
   816  019E                     	;# 
   817  019F                     	;# 
   818  019F                     	;# 
   819  019F                     	;# 
   820  019F                     	;# 
   821  019F                     	;# 
   822  020C                     	;# 
   823  020E                     	;# 
   824  0211                     	;# 
   825  0211                     	;# 
   826  0212                     	;# 
   827  0212                     	;# 
   828  0213                     	;# 
   829  0213                     	;# 
   830  0214                     	;# 
   831  0214                     	;# 
   832  0215                     	;# 
   833  0215                     	;# 
   834  0215                     	;# 
   835  0215                     	;# 
   836  0216                     	;# 
   837  0216                     	;# 
   838  0217                     	;# 
   839  0217                     	;# 
   840  028C                     	;# 
   841  028E                     	;# 
   842  0291                     	;# 
   843  0291                     	;# 
   844  0292                     	;# 
   845  0293                     	;# 
   846  0293                     	;# 
   847  0298                     	;# 
   848  0298                     	;# 
   849  0299                     	;# 
   850  029A                     	;# 
   851  029A                     	;# 
   852  029E                     	;# 
   853  030C                     	;# 
   854  030E                     	;# 
   855  038C                     	;# 
   856  038E                     	;# 
   857  0391                     	;# 
   858  0392                     	;# 
   859  0393                     	;# 
   860  0397                     	;# 
   861  0398                     	;# 
   862  0399                     	;# 
   863  0415                     	;# 
   864  0416                     	;# 
   865  0417                     	;# 
   866  041C                     	;# 
   867  041D                     	;# 
   868  041E                     	;# 
   869  0511                     	;# 
   870  0515                     	;# 
   871  0617                     	;# 
   872  0618                     	;# 
   873  0619                     	;# 
   874  0619                     	;# 
   875  061A                     	;# 
   876  061B                     	;# 
   877  061C                     	;# 
   878  061C                     	;# 
   879  0691                     	;# 
   880  0692                     	;# 
   881  0693                     	;# 
   882  0694                     	;# 
   883  0695                     	;# 
   884  0696                     	;# 
   885  0697                     	;# 
   886  0698                     	;# 
   887  0699                     	;# 
   888  069A                     	;# 
   889  069B                     	;# 
   890  069C                     	;# 
   891  069D                     	;# 
   892  069E                     	;# 
   893  069F                     	;# 
   894  0E0F                     	;# 
   895  0E10                     	;# 
   896  0E11                     	;# 
   897  0E12                     	;# 
   898  0E13                     	;# 
   899  0E14                     	;# 
   900  0E15                     	;# 
   901  0E17                     	;# 
   902  0E20                     	;# 
   903  0E21                     	;# 
   904  0E22                     	;# 
   905  0E24                     	;# 
   906  0E25                     	;# 
   907  0E28                     	;# 
   908  0E29                     	;# 
   909  0E2A                     	;# 
   910  0E2B                     	;# 
   911  0E90                     	;# 
   912  0E91                     	;# 
   913  0E92                     	;# 
   914  0E94                     	;# 
   915  0E95                     	;# 
   916  0EA0                     	;# 
   917  0EA1                     	;# 
   918  0EA2                     	;# 
   919  0EA3                     	;# 
   920  0EA4                     	;# 
   921  0EA5                     	;# 
   922  0F0F                     	;# 
   923  0F10                     	;# 
   924  0F11                     	;# 
   925  0F12                     	;# 
   926  0F13                     	;# 
   927  0F14                     	;# 
   928  0F15                     	;# 
   929  0F16                     	;# 
   930  0F17                     	;# 
   931  0F18                     	;# 
   932  0F19                     	;# 
   933  0F1A                     	;# 
   934  0F1B                     	;# 
   935  0F1C                     	;# 
   936  0F1D                     	;# 
   937  0F1E                     	;# 
   938  0F1F                     	;# 
   939  0F20                     	;# 
   940  0F21                     	;# 
   941  0F22                     	;# 
   942  0F23                     	;# 
   943  0F24                     	;# 
   944  0F25                     	;# 
   945  0F26                     	;# 
   946  0F27                     	;# 
   947  0F28                     	;# 
   948  0F29                     	;# 
   949  0F2A                     	;# 
   950  0F2B                     	;# 
   951  0F2C                     	;# 
   952  0F2D                     	;# 
   953  0F9E                     	;# 
   954  0FE4                     	;# 
   955  0FE5                     	;# 
   956  0FE6                     	;# 
   957  0FE7                     	;# 
   958  0FE8                     	;# 
   959  0FE9                     	;# 
   960  0FEA                     	;# 
   961  0FEB                     	;# 
   962  0FED                     	;# 
   963  0FEE                     	;# 
   964  0FEF                     	;# 
   965  0000                     	;# 
   966  0001                     	;# 
   967  0002                     	;# 
   968  0003                     	;# 
   969  0004                     	;# 
   970  0005                     	;# 
   971  0006                     	;# 
   972  0007                     	;# 
   973  0008                     	;# 
   974  0009                     	;# 
   975  000A                     	;# 
   976  000B                     	;# 
   977  000C                     	;# 
   978  000E                     	;# 
   979  0011                     	;# 
   980  0012                     	;# 
   981  0013                     	;# 
   982  0015                     	;# 
   983  0016                     	;# 
   984  0016                     	;# 
   985  0017                     	;# 
   986  0018                     	;# 
   987  0019                     	;# 
   988  001A                     	;# 
   989  001B                     	;# 
   990  001C                     	;# 
   991  008C                     	;# 
   992  008E                     	;# 
   993  0091                     	;# 
   994  0092                     	;# 
   995  0093                     	;# 
   996  0095                     	;# 
   997  0096                     	;# 
   998  0097                     	;# 
   999  0098                     	;# 
  1000  0099                     	;# 
  1001  009A                     	;# 
  1002  009B                     	;# 
  1003  009B                     	;# 
  1004  009C                     	;# 
  1005  009D                     	;# 
  1006  009E                     	;# 
  1007  009F                     	;# 
  1008  010C                     	;# 
  1009  010E                     	;# 
  1010  0111                     	;# 
  1011  0112                     	;# 
  1012  0113                     	;# 
  1013  0114                     	;# 
  1014  0115                     	;# 
  1015  0116                     	;# 
  1016  0117                     	;# 
  1017  0118                     	;# 
  1018  0119                     	;# 
  1019  011C                     	;# 
  1020  018C                     	;# 
  1021  018E                     	;# 
  1022  0191                     	;# 
  1023  0191                     	;# 
  1024  0192                     	;# 
  1025  0193                     	;# 
  1026  0193                     	;# 
  1027  0194                     	;# 
  1028  0195                     	;# 
  1029  0196                     	;# 
  1030  0197                     	;# 
  1031  0199                     	;# 
  1032  0199                     	;# 
  1033  0199                     	;# 
  1034  019A                     	;# 
  1035  019A                     	;# 
  1036  019A                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019B                     	;# 
  1041  019B                     	;# 
  1042  019C                     	;# 
  1043  019C                     	;# 
  1044  019C                     	;# 
  1045  019D                     	;# 
  1046  019D                     	;# 
  1047  019D                     	;# 
  1048  019E                     	;# 
  1049  019E                     	;# 
  1050  019E                     	;# 
  1051  019F                     	;# 
  1052  019F                     	;# 
  1053  019F                     	;# 
  1054  019F                     	;# 
  1055  019F                     	;# 
  1056  020C                     	;# 
  1057  020E                     	;# 
  1058  0211                     	;# 
  1059  0211                     	;# 
  1060  0212                     	;# 
  1061  0212                     	;# 
  1062  0213                     	;# 
  1063  0213                     	;# 
  1064  0214                     	;# 
  1065  0214                     	;# 
  1066  0215                     	;# 
  1067  0215                     	;# 
  1068  0215                     	;# 
  1069  0215                     	;# 
  1070  0216                     	;# 
  1071  0216                     	;# 
  1072  0217                     	;# 
  1073  0217                     	;# 
  1074  028C                     	;# 
  1075  028E                     	;# 
  1076  0291                     	;# 
  1077  0291                     	;# 
  1078  0292                     	;# 
  1079  0293                     	;# 
  1080  0293                     	;# 
  1081  0298                     	;# 
  1082  0298                     	;# 
  1083  0299                     	;# 
  1084  029A                     	;# 
  1085  029A                     	;# 
  1086  029E                     	;# 
  1087  030C                     	;# 
  1088  030E                     	;# 
  1089  038C                     	;# 
  1090  038E                     	;# 
  1091  0391                     	;# 
  1092  0392                     	;# 
  1093  0393                     	;# 
  1094  0397                     	;# 
  1095  0398                     	;# 
  1096  0399                     	;# 
  1097  0415                     	;# 
  1098  0416                     	;# 
  1099  0417                     	;# 
  1100  041C                     	;# 
  1101  041D                     	;# 
  1102  041E                     	;# 
  1103  0511                     	;# 
  1104  0515                     	;# 
  1105  0617                     	;# 
  1106  0618                     	;# 
  1107  0619                     	;# 
  1108  0619                     	;# 
  1109  061A                     	;# 
  1110  061B                     	;# 
  1111  061C                     	;# 
  1112  061C                     	;# 
  1113  0691                     	;# 
  1114  0692                     	;# 
  1115  0693                     	;# 
  1116  0694                     	;# 
  1117  0695                     	;# 
  1118  0696                     	;# 
  1119  0697                     	;# 
  1120  0698                     	;# 
  1121  0699                     	;# 
  1122  069A                     	;# 
  1123  069B                     	;# 
  1124  069C                     	;# 
  1125  069D                     	;# 
  1126  069E                     	;# 
  1127  069F                     	;# 
  1128  0E0F                     	;# 
  1129  0E10                     	;# 
  1130  0E11                     	;# 
  1131  0E12                     	;# 
  1132  0E13                     	;# 
  1133  0E14                     	;# 
  1134  0E15                     	;# 
  1135  0E17                     	;# 
  1136  0E20                     	;# 
  1137  0E21                     	;# 
  1138  0E22                     	;# 
  1139  0E24                     	;# 
  1140  0E25                     	;# 
  1141  0E28                     	;# 
  1142  0E29                     	;# 
  1143  0E2A                     	;# 
  1144  0E2B                     	;# 
  1145  0E90                     	;# 
  1146  0E91                     	;# 
  1147  0E92                     	;# 
  1148  0E94                     	;# 
  1149  0E95                     	;# 
  1150  0EA0                     	;# 
  1151  0EA1                     	;# 
  1152  0EA2                     	;# 
  1153  0EA3                     	;# 
  1154  0EA4                     	;# 
  1155  0EA5                     	;# 
  1156  0F0F                     	;# 
  1157  0F10                     	;# 
  1158  0F11                     	;# 
  1159  0F12                     	;# 
  1160  0F13                     	;# 
  1161  0F14                     	;# 
  1162  0F15                     	;# 
  1163  0F16                     	;# 
  1164  0F17                     	;# 
  1165  0F18                     	;# 
  1166  0F19                     	;# 
  1167  0F1A                     	;# 
  1168  0F1B                     	;# 
  1169  0F1C                     	;# 
  1170  0F1D                     	;# 
  1171  0F1E                     	;# 
  1172  0F1F                     	;# 
  1173  0F20                     	;# 
  1174  0F21                     	;# 
  1175  0F22                     	;# 
  1176  0F23                     	;# 
  1177  0F24                     	;# 
  1178  0F25                     	;# 
  1179  0F26                     	;# 
  1180  0F27                     	;# 
  1181  0F28                     	;# 
  1182  0F29                     	;# 
  1183  0F2A                     	;# 
  1184  0F2B                     	;# 
  1185  0F2C                     	;# 
  1186  0F2D                     	;# 
  1187  0F9E                     	;# 
  1188  0FE4                     	;# 
  1189  0FE5                     	;# 
  1190  0FE6                     	;# 
  1191  0FE7                     	;# 
  1192  0FE8                     	;# 
  1193  0FE9                     	;# 
  1194  0FEA                     	;# 
  1195  0FEB                     	;# 
  1196  0FED                     	;# 
  1197  0FEE                     	;# 
  1198  0FEF                     	;# 
  1199  0000                     	;# 
  1200  0001                     	;# 
  1201  0002                     	;# 
  1202  0003                     	;# 
  1203  0004                     	;# 
  1204  0005                     	;# 
  1205  0006                     	;# 
  1206  0007                     	;# 
  1207  0008                     	;# 
  1208  0009                     	;# 
  1209  000A                     	;# 
  1210  000B                     	;# 
  1211  000C                     	;# 
  1212  000E                     	;# 
  1213  0011                     	;# 
  1214  0012                     	;# 
  1215  0013                     	;# 
  1216  0015                     	;# 
  1217  0016                     	;# 
  1218  0016                     	;# 
  1219  0017                     	;# 
  1220  0018                     	;# 
  1221  0019                     	;# 
  1222  001A                     	;# 
  1223  001B                     	;# 
  1224  001C                     	;# 
  1225  008C                     	;# 
  1226  008E                     	;# 
  1227  0091                     	;# 
  1228  0092                     	;# 
  1229  0093                     	;# 
  1230  0095                     	;# 
  1231  0096                     	;# 
  1232  0097                     	;# 
  1233  0098                     	;# 
  1234  0099                     	;# 
  1235  009A                     	;# 
  1236  009B                     	;# 
  1237  009B                     	;# 
  1238  009C                     	;# 
  1239  009D                     	;# 
  1240  009E                     	;# 
  1241  009F                     	;# 
  1242  010C                     	;# 
  1243  010E                     	;# 
  1244  0111                     	;# 
  1245  0112                     	;# 
  1246  0113                     	;# 
  1247  0114                     	;# 
  1248  0115                     	;# 
  1249  0116                     	;# 
  1250  0117                     	;# 
  1251  0118                     	;# 
  1252  0119                     	;# 
  1253  011C                     	;# 
  1254  018C                     	;# 
  1255  018E                     	;# 
  1256  0191                     	;# 
  1257  0191                     	;# 
  1258  0192                     	;# 
  1259  0193                     	;# 
  1260  0193                     	;# 
  1261  0194                     	;# 
  1262  0195                     	;# 
  1263  0196                     	;# 
  1264  0197                     	;# 
  1265  0199                     	;# 
  1266  0199                     	;# 
  1267  0199                     	;# 
  1268  019A                     	;# 
  1269  019A                     	;# 
  1270  019A                     	;# 
  1271  019B                     	;# 
  1272  019B                     	;# 
  1273  019B                     	;# 
  1274  019B                     	;# 
  1275  019B                     	;# 
  1276  019C                     	;# 
  1277  019C                     	;# 
  1278  019C                     	;# 
  1279  019D                     	;# 
  1280  019D                     	;# 
  1281  019D                     	;# 
  1282  019E                     	;# 
  1283  019E                     	;# 
  1284  019E                     	;# 
  1285  019F                     	;# 
  1286  019F                     	;# 
  1287  019F                     	;# 
  1288  019F                     	;# 
  1289  019F                     	;# 
  1290  020C                     	;# 
  1291  020E                     	;# 
  1292  0211                     	;# 
  1293  0211                     	;# 
  1294  0212                     	;# 
  1295  0212                     	;# 
  1296  0213                     	;# 
  1297  0213                     	;# 
  1298  0214                     	;# 
  1299  0214                     	;# 
  1300  0215                     	;# 
  1301  0215                     	;# 
  1302  0215                     	;# 
  1303  0215                     	;# 
  1304  0216                     	;# 
  1305  0216                     	;# 
  1306  0217                     	;# 
  1307  0217                     	;# 
  1308  028C                     	;# 
  1309  028E                     	;# 
  1310  0291                     	;# 
  1311  0291                     	;# 
  1312  0292                     	;# 
  1313  0293                     	;# 
  1314  0293                     	;# 
  1315  0298                     	;# 
  1316  0298                     	;# 
  1317  0299                     	;# 
  1318  029A                     	;# 
  1319  029A                     	;# 
  1320  029E                     	;# 
  1321  030C                     	;# 
  1322  030E                     	;# 
  1323  038C                     	;# 
  1324  038E                     	;# 
  1325  0391                     	;# 
  1326  0392                     	;# 
  1327  0393                     	;# 
  1328  0397                     	;# 
  1329  0398                     	;# 
  1330  0399                     	;# 
  1331  0415                     	;# 
  1332  0416                     	;# 
  1333  0417                     	;# 
  1334  041C                     	;# 
  1335  041D                     	;# 
  1336  041E                     	;# 
  1337  0511                     	;# 
  1338  0515                     	;# 
  1339  0617                     	;# 
  1340  0618                     	;# 
  1341  0619                     	;# 
  1342  0619                     	;# 
  1343  061A                     	;# 
  1344  061B                     	;# 
  1345  061C                     	;# 
  1346  061C                     	;# 
  1347  0691                     	;# 
  1348  0692                     	;# 
  1349  0693                     	;# 
  1350  0694                     	;# 
  1351  0695                     	;# 
  1352  0696                     	;# 
  1353  0697                     	;# 
  1354  0698                     	;# 
  1355  0699                     	;# 
  1356  069A                     	;# 
  1357  069B                     	;# 
  1358  069C                     	;# 
  1359  069D                     	;# 
  1360  069E                     	;# 
  1361  069F                     	;# 
  1362  0E0F                     	;# 
  1363  0E10                     	;# 
  1364  0E11                     	;# 
  1365  0E12                     	;# 
  1366  0E13                     	;# 
  1367  0E14                     	;# 
  1368  0E15                     	;# 
  1369  0E17                     	;# 
  1370  0E20                     	;# 
  1371  0E21                     	;# 
  1372  0E22                     	;# 
  1373  0E24                     	;# 
  1374  0E25                     	;# 
  1375  0E28                     	;# 
  1376  0E29                     	;# 
  1377  0E2A                     	;# 
  1378  0E2B                     	;# 
  1379  0E90                     	;# 
  1380  0E91                     	;# 
  1381  0E92                     	;# 
  1382  0E94                     	;# 
  1383  0E95                     	;# 
  1384  0EA0                     	;# 
  1385  0EA1                     	;# 
  1386  0EA2                     	;# 
  1387  0EA3                     	;# 
  1388  0EA4                     	;# 
  1389  0EA5                     	;# 
  1390  0F0F                     	;# 
  1391  0F10                     	;# 
  1392  0F11                     	;# 
  1393  0F12                     	;# 
  1394  0F13                     	;# 
  1395  0F14                     	;# 
  1396  0F15                     	;# 
  1397  0F16                     	;# 
  1398  0F17                     	;# 
  1399  0F18                     	;# 
  1400  0F19                     	;# 
  1401  0F1A                     	;# 
  1402  0F1B                     	;# 
  1403  0F1C                     	;# 
  1404  0F1D                     	;# 
  1405  0F1E                     	;# 
  1406  0F1F                     	;# 
  1407  0F20                     	;# 
  1408  0F21                     	;# 
  1409  0F22                     	;# 
  1410  0F23                     	;# 
  1411  0F24                     	;# 
  1412  0F25                     	;# 
  1413  0F26                     	;# 
  1414  0F27                     	;# 
  1415  0F28                     	;# 
  1416  0F29                     	;# 
  1417  0F2A                     	;# 
  1418  0F2B                     	;# 
  1419  0F2C                     	;# 
  1420  0F2D                     	;# 
  1421  0F9E                     	;# 
  1422  0FE4                     	;# 
  1423  0FE5                     	;# 
  1424  0FE6                     	;# 
  1425  0FE7                     	;# 
  1426  0FE8                     	;# 
  1427  0FE9                     	;# 
  1428  0FEA                     	;# 
  1429  0FEB                     	;# 
  1430  0FED                     	;# 
  1431  0FEE                     	;# 
  1432  0FEF                     	;# 
  1433  0000                     	;# 
  1434  0001                     	;# 
  1435  0002                     	;# 
  1436  0003                     	;# 
  1437  0004                     	;# 
  1438  0005                     	;# 
  1439  0006                     	;# 
  1440  0007                     	;# 
  1441  0008                     	;# 
  1442  0009                     	;# 
  1443  000A                     	;# 
  1444  000B                     	;# 
  1445  000C                     	;# 
  1446  000E                     	;# 
  1447  0011                     	;# 
  1448  0012                     	;# 
  1449  0013                     	;# 
  1450  0015                     	;# 
  1451  0016                     	;# 
  1452  0016                     	;# 
  1453  0017                     	;# 
  1454  0018                     	;# 
  1455  0019                     	;# 
  1456  001A                     	;# 
  1457  001B                     	;# 
  1458  001C                     	;# 
  1459  008C                     	;# 
  1460  008E                     	;# 
  1461  0091                     	;# 
  1462  0092                     	;# 
  1463  0093                     	;# 
  1464  0095                     	;# 
  1465  0096                     	;# 
  1466  0097                     	;# 
  1467  0098                     	;# 
  1468  0099                     	;# 
  1469  009A                     	;# 
  1470  009B                     	;# 
  1471  009B                     	;# 
  1472  009C                     	;# 
  1473  009D                     	;# 
  1474  009E                     	;# 
  1475  009F                     	;# 
  1476  010C                     	;# 
  1477  010E                     	;# 
  1478  0111                     	;# 
  1479  0112                     	;# 
  1480  0113                     	;# 
  1481  0114                     	;# 
  1482  0115                     	;# 
  1483  0116                     	;# 
  1484  0117                     	;# 
  1485  0118                     	;# 
  1486  0119                     	;# 
  1487  011C                     	;# 
  1488  018C                     	;# 
  1489  018E                     	;# 
  1490  0191                     	;# 
  1491  0191                     	;# 
  1492  0192                     	;# 
  1493  0193                     	;# 
  1494  0193                     	;# 
  1495  0194                     	;# 
  1496  0195                     	;# 
  1497  0196                     	;# 
  1498  0197                     	;# 
  1499  0199                     	;# 
  1500  0199                     	;# 
  1501  0199                     	;# 
  1502  019A                     	;# 
  1503  019A                     	;# 
  1504  019A                     	;# 
  1505  019B                     	;# 
  1506  019B                     	;# 
  1507  019B                     	;# 
  1508  019B                     	;# 
  1509  019B                     	;# 
  1510  019C                     	;# 
  1511  019C                     	;# 
  1512  019C                     	;# 
  1513  019D                     	;# 
  1514  019D                     	;# 
  1515  019D                     	;# 
  1516  019E                     	;# 
  1517  019E                     	;# 
  1518  019E                     	;# 
  1519  019F                     	;# 
  1520  019F                     	;# 
  1521  019F                     	;# 
  1522  019F                     	;# 
  1523  019F                     	;# 
  1524  020C                     	;# 
  1525  020E                     	;# 
  1526  0211                     	;# 
  1527  0211                     	;# 
  1528  0212                     	;# 
  1529  0212                     	;# 
  1530  0213                     	;# 
  1531  0213                     	;# 
  1532  0214                     	;# 
  1533  0214                     	;# 
  1534  0215                     	;# 
  1535  0215                     	;# 
  1536  0215                     	;# 
  1537  0215                     	;# 
  1538  0216                     	;# 
  1539  0216                     	;# 
  1540  0217                     	;# 
  1541  0217                     	;# 
  1542  028C                     	;# 
  1543  028E                     	;# 
  1544  0291                     	;# 
  1545  0291                     	;# 
  1546  0292                     	;# 
  1547  0293                     	;# 
  1548  0293                     	;# 
  1549  0298                     	;# 
  1550  0298                     	;# 
  1551  0299                     	;# 
  1552  029A                     	;# 
  1553  029A                     	;# 
  1554  029E                     	;# 
  1555  030C                     	;# 
  1556  030E                     	;# 
  1557  038C                     	;# 
  1558  038E                     	;# 
  1559  0391                     	;# 
  1560  0392                     	;# 
  1561  0393                     	;# 
  1562  0397                     	;# 
  1563  0398                     	;# 
  1564  0399                     	;# 
  1565  0415                     	;# 
  1566  0416                     	;# 
  1567  0417                     	;# 
  1568  041C                     	;# 
  1569  041D                     	;# 
  1570  041E                     	;# 
  1571  0511                     	;# 
  1572  0515                     	;# 
  1573  0617                     	;# 
  1574  0618                     	;# 
  1575  0619                     	;# 
  1576  0619                     	;# 
  1577  061A                     	;# 
  1578  061B                     	;# 
  1579  061C                     	;# 
  1580  061C                     	;# 
  1581  0691                     	;# 
  1582  0692                     	;# 
  1583  0693                     	;# 
  1584  0694                     	;# 
  1585  0695                     	;# 
  1586  0696                     	;# 
  1587  0697                     	;# 
  1588  0698                     	;# 
  1589  0699                     	;# 
  1590  069A                     	;# 
  1591  069B                     	;# 
  1592  069C                     	;# 
  1593  069D                     	;# 
  1594  069E                     	;# 
  1595  069F                     	;# 
  1596  0E0F                     	;# 
  1597  0E10                     	;# 
  1598  0E11                     	;# 
  1599  0E12                     	;# 
  1600  0E13                     	;# 
  1601  0E14                     	;# 
  1602  0E15                     	;# 
  1603  0E17                     	;# 
  1604  0E20                     	;# 
  1605  0E21                     	;# 
  1606  0E22                     	;# 
  1607  0E24                     	;# 
  1608  0E25                     	;# 
  1609  0E28                     	;# 
  1610  0E29                     	;# 
  1611  0E2A                     	;# 
  1612  0E2B                     	;# 
  1613  0E90                     	;# 
  1614  0E91                     	;# 
  1615  0E92                     	;# 
  1616  0E94                     	;# 
  1617  0E95                     	;# 
  1618  0EA0                     	;# 
  1619  0EA1                     	;# 
  1620  0EA2                     	;# 
  1621  0EA3                     	;# 
  1622  0EA4                     	;# 
  1623  0EA5                     	;# 
  1624  0F0F                     	;# 
  1625  0F10                     	;# 
  1626  0F11                     	;# 
  1627  0F12                     	;# 
  1628  0F13                     	;# 
  1629  0F14                     	;# 
  1630  0F15                     	;# 
  1631  0F16                     	;# 
  1632  0F17                     	;# 
  1633  0F18                     	;# 
  1634  0F19                     	;# 
  1635  0F1A                     	;# 
  1636  0F1B                     	;# 
  1637  0F1C                     	;# 
  1638  0F1D                     	;# 
  1639  0F1E                     	;# 
  1640  0F1F                     	;# 
  1641  0F20                     	;# 
  1642  0F21                     	;# 
  1643  0F22                     	;# 
  1644  0F23                     	;# 
  1645  0F24                     	;# 
  1646  0F25                     	;# 
  1647  0F26                     	;# 
  1648  0F27                     	;# 
  1649  0F28                     	;# 
  1650  0F29                     	;# 
  1651  0F2A                     	;# 
  1652  0F2B                     	;# 
  1653  0F2C                     	;# 
  1654  0F2D                     	;# 
  1655  0F9E                     	;# 
  1656  0FE4                     	;# 
  1657  0FE5                     	;# 
  1658  0FE6                     	;# 
  1659  0FE7                     	;# 
  1660  0FE8                     	;# 
  1661  0FE9                     	;# 
  1662  0FEA                     	;# 
  1663  0FEB                     	;# 
  1664  0FED                     	;# 
  1665  0FEE                     	;# 
  1666  0FEF                     	;# 
  1667  0000                     	;# 
  1668  0001                     	;# 
  1669  0002                     	;# 
  1670  0003                     	;# 
  1671  0004                     	;# 
  1672  0005                     	;# 
  1673  0006                     	;# 
  1674  0007                     	;# 
  1675  0008                     	;# 
  1676  0009                     	;# 
  1677  000A                     	;# 
  1678  000B                     	;# 
  1679  000C                     	;# 
  1680  000E                     	;# 
  1681  0011                     	;# 
  1682  0012                     	;# 
  1683  0013                     	;# 
  1684  0015                     	;# 
  1685  0016                     	;# 
  1686  0016                     	;# 
  1687  0017                     	;# 
  1688  0018                     	;# 
  1689  0019                     	;# 
  1690  001A                     	;# 
  1691  001B                     	;# 
  1692  001C                     	;# 
  1693  008C                     	;# 
  1694  008E                     	;# 
  1695  0091                     	;# 
  1696  0092                     	;# 
  1697  0093                     	;# 
  1698  0095                     	;# 
  1699  0096                     	;# 
  1700  0097                     	;# 
  1701  0098                     	;# 
  1702  0099                     	;# 
  1703  009A                     	;# 
  1704  009B                     	;# 
  1705  009B                     	;# 
  1706  009C                     	;# 
  1707  009D                     	;# 
  1708  009E                     	;# 
  1709  009F                     	;# 
  1710  010C                     	;# 
  1711  010E                     	;# 
  1712  0111                     	;# 
  1713  0112                     	;# 
  1714  0113                     	;# 
  1715  0114                     	;# 
  1716  0115                     	;# 
  1717  0116                     	;# 
  1718  0117                     	;# 
  1719  0118                     	;# 
  1720  0119                     	;# 
  1721  011C                     	;# 
  1722  018C                     	;# 
  1723  018E                     	;# 
  1724  0191                     	;# 
  1725  0191                     	;# 
  1726  0192                     	;# 
  1727  0193                     	;# 
  1728  0193                     	;# 
  1729  0194                     	;# 
  1730  0195                     	;# 
  1731  0196                     	;# 
  1732  0197                     	;# 
  1733  0199                     	;# 
  1734  0199                     	;# 
  1735  0199                     	;# 
  1736  019A                     	;# 
  1737  019A                     	;# 
  1738  019A                     	;# 
  1739  019B                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019C                     	;# 
  1745  019C                     	;# 
  1746  019C                     	;# 
  1747  019D                     	;# 
  1748  019D                     	;# 
  1749  019D                     	;# 
  1750  019E                     	;# 
  1751  019E                     	;# 
  1752  019E                     	;# 
  1753  019F                     	;# 
  1754  019F                     	;# 
  1755  019F                     	;# 
  1756  019F                     	;# 
  1757  019F                     	;# 
  1758  020C                     	;# 
  1759  020E                     	;# 
  1760  0211                     	;# 
  1761  0211                     	;# 
  1762  0212                     	;# 
  1763  0212                     	;# 
  1764  0213                     	;# 
  1765  0213                     	;# 
  1766  0214                     	;# 
  1767  0214                     	;# 
  1768  0215                     	;# 
  1769  0215                     	;# 
  1770  0215                     	;# 
  1771  0215                     	;# 
  1772  0216                     	;# 
  1773  0216                     	;# 
  1774  0217                     	;# 
  1775  0217                     	;# 
  1776  028C                     	;# 
  1777  028E                     	;# 
  1778  0291                     	;# 
  1779  0291                     	;# 
  1780  0292                     	;# 
  1781  0293                     	;# 
  1782  0293                     	;# 
  1783  0298                     	;# 
  1784  0298                     	;# 
  1785  0299                     	;# 
  1786  029A                     	;# 
  1787  029A                     	;# 
  1788  029E                     	;# 
  1789  030C                     	;# 
  1790  030E                     	;# 
  1791  038C                     	;# 
  1792  038E                     	;# 
  1793  0391                     	;# 
  1794  0392                     	;# 
  1795  0393                     	;# 
  1796  0397                     	;# 
  1797  0398                     	;# 
  1798  0399                     	;# 
  1799  0415                     	;# 
  1800  0416                     	;# 
  1801  0417                     	;# 
  1802  041C                     	;# 
  1803  041D                     	;# 
  1804  041E                     	;# 
  1805  0511                     	;# 
  1806  0515                     	;# 
  1807  0617                     	;# 
  1808  0618                     	;# 
  1809  0619                     	;# 
  1810  0619                     	;# 
  1811  061A                     	;# 
  1812  061B                     	;# 
  1813  061C                     	;# 
  1814  061C                     	;# 
  1815  0691                     	;# 
  1816  0692                     	;# 
  1817  0693                     	;# 
  1818  0694                     	;# 
  1819  0695                     	;# 
  1820  0696                     	;# 
  1821  0697                     	;# 
  1822  0698                     	;# 
  1823  0699                     	;# 
  1824  069A                     	;# 
  1825  069B                     	;# 
  1826  069C                     	;# 
  1827  069D                     	;# 
  1828  069E                     	;# 
  1829  069F                     	;# 
  1830  0E0F                     	;# 
  1831  0E10                     	;# 
  1832  0E11                     	;# 
  1833  0E12                     	;# 
  1834  0E13                     	;# 
  1835  0E14                     	;# 
  1836  0E15                     	;# 
  1837  0E17                     	;# 
  1838  0E20                     	;# 
  1839  0E21                     	;# 
  1840  0E22                     	;# 
  1841  0E24                     	;# 
  1842  0E25                     	;# 
  1843  0E28                     	;# 
  1844  0E29                     	;# 
  1845  0E2A                     	;# 
  1846  0E2B                     	;# 
  1847  0E90                     	;# 
  1848  0E91                     	;# 
  1849  0E92                     	;# 
  1850  0E94                     	;# 
  1851  0E95                     	;# 
  1852  0EA0                     	;# 
  1853  0EA1                     	;# 
  1854  0EA2                     	;# 
  1855  0EA3                     	;# 
  1856  0EA4                     	;# 
  1857  0EA5                     	;# 
  1858  0F0F                     	;# 
  1859  0F10                     	;# 
  1860  0F11                     	;# 
  1861  0F12                     	;# 
  1862  0F13                     	;# 
  1863  0F14                     	;# 
  1864  0F15                     	;# 
  1865  0F16                     	;# 
  1866  0F17                     	;# 
  1867  0F18                     	;# 
  1868  0F19                     	;# 
  1869  0F1A                     	;# 
  1870  0F1B                     	;# 
  1871  0F1C                     	;# 
  1872  0F1D                     	;# 
  1873  0F1E                     	;# 
  1874  0F1F                     	;# 
  1875  0F20                     	;# 
  1876  0F21                     	;# 
  1877  0F22                     	;# 
  1878  0F23                     	;# 
  1879  0F24                     	;# 
  1880  0F25                     	;# 
  1881  0F26                     	;# 
  1882  0F27                     	;# 
  1883  0F28                     	;# 
  1884  0F29                     	;# 
  1885  0F2A                     	;# 
  1886  0F2B                     	;# 
  1887  0F2C                     	;# 
  1888  0F2D                     	;# 
  1889  0F9E                     	;# 
  1890  0FE4                     	;# 
  1891  0FE5                     	;# 
  1892  0FE6                     	;# 
  1893  0FE7                     	;# 
  1894  0FE8                     	;# 
  1895  0FE9                     	;# 
  1896  0FEA                     	;# 
  1897  0FEB                     	;# 
  1898  0FED                     	;# 
  1899  0FEE                     	;# 
  1900  0FEF                     	;# 
  1901  0000                     	;# 
  1902  0001                     	;# 
  1903  0002                     	;# 
  1904  0003                     	;# 
  1905  0004                     	;# 
  1906  0005                     	;# 
  1907  0006                     	;# 
  1908  0007                     	;# 
  1909  0008                     	;# 
  1910  0009                     	;# 
  1911  000A                     	;# 
  1912  000B                     	;# 
  1913  000C                     	;# 
  1914  000E                     	;# 
  1915  0011                     	;# 
  1916  0012                     	;# 
  1917  0013                     	;# 
  1918  0015                     	;# 
  1919  0016                     	;# 
  1920  0016                     	;# 
  1921  0017                     	;# 
  1922  0018                     	;# 
  1923  0019                     	;# 
  1924  001A                     	;# 
  1925  001B                     	;# 
  1926  001C                     	;# 
  1927  008C                     	;# 
  1928  008E                     	;# 
  1929  0091                     	;# 
  1930  0092                     	;# 
  1931  0093                     	;# 
  1932  0095                     	;# 
  1933  0096                     	;# 
  1934  0097                     	;# 
  1935  0098                     	;# 
  1936  0099                     	;# 
  1937  009A                     	;# 
  1938  009B                     	;# 
  1939  009B                     	;# 
  1940  009C                     	;# 
  1941  009D                     	;# 
  1942  009E                     	;# 
  1943  009F                     	;# 
  1944  010C                     	;# 
  1945  010E                     	;# 
  1946  0111                     	;# 
  1947  0112                     	;# 
  1948  0113                     	;# 
  1949  0114                     	;# 
  1950  0115                     	;# 
  1951  0116                     	;# 
  1952  0117                     	;# 
  1953  0118                     	;# 
  1954  0119                     	;# 
  1955  011C                     	;# 
  1956  018C                     	;# 
  1957  018E                     	;# 
  1958  0191                     	;# 
  1959  0191                     	;# 
  1960  0192                     	;# 
  1961  0193                     	;# 
  1962  0193                     	;# 
  1963  0194                     	;# 
  1964  0195                     	;# 
  1965  0196                     	;# 
  1966  0197                     	;# 
  1967  0199                     	;# 
  1968  0199                     	;# 
  1969  0199                     	;# 
  1970  019A                     	;# 
  1971  019A                     	;# 
  1972  019A                     	;# 
  1973  019B                     	;# 
  1974  019B                     	;# 
  1975  019B                     	;# 
  1976  019B                     	;# 
  1977  019B                     	;# 
  1978  019C                     	;# 
  1979  019C                     	;# 
  1980  019C                     	;# 
  1981  019D                     	;# 
  1982  019D                     	;# 
  1983  019D                     	;# 
  1984  019E                     	;# 
  1985  019E                     	;# 
  1986  019E                     	;# 
  1987  019F                     	;# 
  1988  019F                     	;# 
  1989  019F                     	;# 
  1990  019F                     	;# 
  1991  019F                     	;# 
  1992  020C                     	;# 
  1993  020E                     	;# 
  1994  0211                     	;# 
  1995  0211                     	;# 
  1996  0212                     	;# 
  1997  0212                     	;# 
  1998  0213                     	;# 
  1999  0213                     	;# 
  2000  0214                     	;# 
  2001  0214                     	;# 
  2002  0215                     	;# 
  2003  0215                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0216                     	;# 
  2007  0216                     	;# 
  2008  0217                     	;# 
  2009  0217                     	;# 
  2010  028C                     	;# 
  2011  028E                     	;# 
  2012  0291                     	;# 
  2013  0291                     	;# 
  2014  0292                     	;# 
  2015  0293                     	;# 
  2016  0293                     	;# 
  2017  0298                     	;# 
  2018  0298                     	;# 
  2019  0299                     	;# 
  2020  029A                     	;# 
  2021  029A                     	;# 
  2022  029E                     	;# 
  2023  030C                     	;# 
  2024  030E                     	;# 
  2025  038C                     	;# 
  2026  038E                     	;# 
  2027  0391                     	;# 
  2028  0392                     	;# 
  2029  0393                     	;# 
  2030  0397                     	;# 
  2031  0398                     	;# 
  2032  0399                     	;# 
  2033  0415                     	;# 
  2034  0416                     	;# 
  2035  0417                     	;# 
  2036  041C                     	;# 
  2037  041D                     	;# 
  2038  041E                     	;# 
  2039  0511                     	;# 
  2040  0515                     	;# 
  2041  0617                     	;# 
  2042  0618                     	;# 
  2043  0619                     	;# 
  2044  0619                     	;# 
  2045  061A                     	;# 
  2046  061B                     	;# 
  2047  061C                     	;# 
  2048  061C                     	;# 
  2049  0691                     	;# 
  2050  0692                     	;# 
  2051  0693                     	;# 
  2052  0694                     	;# 
  2053  0695                     	;# 
  2054  0696                     	;# 
  2055  0697                     	;# 
  2056  0698                     	;# 
  2057  0699                     	;# 
  2058  069A                     	;# 
  2059  069B                     	;# 
  2060  069C                     	;# 
  2061  069D                     	;# 
  2062  069E                     	;# 
  2063  069F                     	;# 
  2064  0E0F                     	;# 
  2065  0E10                     	;# 
  2066  0E11                     	;# 
  2067  0E12                     	;# 
  2068  0E13                     	;# 
  2069  0E14                     	;# 
  2070  0E15                     	;# 
  2071  0E17                     	;# 
  2072  0E20                     	;# 
  2073  0E21                     	;# 
  2074  0E22                     	;# 
  2075  0E24                     	;# 
  2076  0E25                     	;# 
  2077  0E28                     	;# 
  2078  0E29                     	;# 
  2079  0E2A                     	;# 
  2080  0E2B                     	;# 
  2081  0E90                     	;# 
  2082  0E91                     	;# 
  2083  0E92                     	;# 
  2084  0E94                     	;# 
  2085  0E95                     	;# 
  2086  0EA0                     	;# 
  2087  0EA1                     	;# 
  2088  0EA2                     	;# 
  2089  0EA3                     	;# 
  2090  0EA4                     	;# 
  2091  0EA5                     	;# 
  2092  0F0F                     	;# 
  2093  0F10                     	;# 
  2094  0F11                     	;# 
  2095  0F12                     	;# 
  2096  0F13                     	;# 
  2097  0F14                     	;# 
  2098  0F15                     	;# 
  2099  0F16                     	;# 
  2100  0F17                     	;# 
  2101  0F18                     	;# 
  2102  0F19                     	;# 
  2103  0F1A                     	;# 
  2104  0F1B                     	;# 
  2105  0F1C                     	;# 
  2106  0F1D                     	;# 
  2107  0F1E                     	;# 
  2108  0F1F                     	;# 
  2109  0F20                     	;# 
  2110  0F21                     	;# 
  2111  0F22                     	;# 
  2112  0F23                     	;# 
  2113  0F24                     	;# 
  2114  0F25                     	;# 
  2115  0F26                     	;# 
  2116  0F27                     	;# 
  2117  0F28                     	;# 
  2118  0F29                     	;# 
  2119  0F2A                     	;# 
  2120  0F2B                     	;# 
  2121  0F2C                     	;# 
  2122  0F2D                     	;# 
  2123  0F9E                     	;# 
  2124  0FE4                     	;# 
  2125  0FE5                     	;# 
  2126  0FE6                     	;# 
  2127  0FE7                     	;# 
  2128  0FE8                     	;# 
  2129  0FE9                     	;# 
  2130  0FEA                     	;# 
  2131  0FEB                     	;# 
  2132  0FED                     	;# 
  2133  0FEE                     	;# 
  2134  0FEF                     	;# 
  2135  0000                     	;# 
  2136  0001                     	;# 
  2137  0002                     	;# 
  2138  0003                     	;# 
  2139  0004                     	;# 
  2140  0005                     	;# 
  2141  0006                     	;# 
  2142  0007                     	;# 
  2143  0008                     	;# 
  2144  0009                     	;# 
  2145  000A                     	;# 
  2146  000B                     	;# 
  2147  000C                     	;# 
  2148  000E                     	;# 
  2149  0011                     	;# 
  2150  0012                     	;# 
  2151  0013                     	;# 
  2152  0015                     	;# 
  2153  0016                     	;# 
  2154  0016                     	;# 
  2155  0017                     	;# 
  2156  0018                     	;# 
  2157  0019                     	;# 
  2158  001A                     	;# 
  2159  001B                     	;# 
  2160  001C                     	;# 
  2161  008C                     	;# 
  2162  008E                     	;# 
  2163  0091                     	;# 
  2164  0092                     	;# 
  2165  0093                     	;# 
  2166  0095                     	;# 
  2167  0096                     	;# 
  2168  0097                     	;# 
  2169  0098                     	;# 
  2170  0099                     	;# 
  2171  009A                     	;# 
  2172  009B                     	;# 
  2173  009B                     	;# 
  2174  009C                     	;# 
  2175  009D                     	;# 
  2176  009E                     	;# 
  2177  009F                     	;# 
  2178  010C                     	;# 
  2179  010E                     	;# 
  2180  0111                     	;# 
  2181  0112                     	;# 
  2182  0113                     	;# 
  2183  0114                     	;# 
  2184  0115                     	;# 
  2185  0116                     	;# 
  2186  0117                     	;# 
  2187  0118                     	;# 
  2188  0119                     	;# 
  2189  011C                     	;# 
  2190  018C                     	;# 
  2191  018E                     	;# 
  2192  0191                     	;# 
  2193  0191                     	;# 
  2194  0192                     	;# 
  2195  0193                     	;# 
  2196  0193                     	;# 
  2197  0194                     	;# 
  2198  0195                     	;# 
  2199  0196                     	;# 
  2200  0197                     	;# 
  2201  0199                     	;# 
  2202  0199                     	;# 
  2203  0199                     	;# 
  2204  019A                     	;# 
  2205  019A                     	;# 
  2206  019A                     	;# 
  2207  019B                     	;# 
  2208  019B                     	;# 
  2209  019B                     	;# 
  2210  019B                     	;# 
  2211  019B                     	;# 
  2212  019C                     	;# 
  2213  019C                     	;# 
  2214  019C                     	;# 
  2215  019D                     	;# 
  2216  019D                     	;# 
  2217  019D                     	;# 
  2218  019E                     	;# 
  2219  019E                     	;# 
  2220  019E                     	;# 
  2221  019F                     	;# 
  2222  019F                     	;# 
  2223  019F                     	;# 
  2224  019F                     	;# 
  2225  019F                     	;# 
  2226  020C                     	;# 
  2227  020E                     	;# 
  2228  0211                     	;# 
  2229  0211                     	;# 
  2230  0212                     	;# 
  2231  0212                     	;# 
  2232  0213                     	;# 
  2233  0213                     	;# 
  2234  0214                     	;# 
  2235  0214                     	;# 
  2236  0215                     	;# 
  2237  0215                     	;# 
  2238  0215                     	;# 
  2239  0215                     	;# 
  2240  0216                     	;# 
  2241  0216                     	;# 
  2242  0217                     	;# 
  2243  0217                     	;# 
  2244  028C                     	;# 
  2245  028E                     	;# 
  2246  0291                     	;# 
  2247  0291                     	;# 
  2248  0292                     	;# 
  2249  0293                     	;# 
  2250  0293                     	;# 
  2251  0298                     	;# 
  2252  0298                     	;# 
  2253  0299                     	;# 
  2254  029A                     	;# 
  2255  029A                     	;# 
  2256  029E                     	;# 
  2257  030C                     	;# 
  2258  030E                     	;# 
  2259  038C                     	;# 
  2260  038E                     	;# 
  2261  0391                     	;# 
  2262  0392                     	;# 
  2263  0393                     	;# 
  2264  0397                     	;# 
  2265  0398                     	;# 
  2266  0399                     	;# 
  2267  0415                     	;# 
  2268  0416                     	;# 
  2269  0417                     	;# 
  2270  041C                     	;# 
  2271  041D                     	;# 
  2272  041E                     	;# 
  2273  0511                     	;# 
  2274  0515                     	;# 
  2275  0617                     	;# 
  2276  0618                     	;# 
  2277  0619                     	;# 
  2278  0619                     	;# 
  2279  061A                     	;# 
  2280  061B                     	;# 
  2281  061C                     	;# 
  2282  061C                     	;# 
  2283  0691                     	;# 
  2284  0692                     	;# 
  2285  0693                     	;# 
  2286  0694                     	;# 
  2287  0695                     	;# 
  2288  0696                     	;# 
  2289  0697                     	;# 
  2290  0698                     	;# 
  2291  0699                     	;# 
  2292  069A                     	;# 
  2293  069B                     	;# 
  2294  069C                     	;# 
  2295  069D                     	;# 
  2296  069E                     	;# 
  2297  069F                     	;# 
  2298  0E0F                     	;# 
  2299  0E10                     	;# 
  2300  0E11                     	;# 
  2301  0E12                     	;# 
  2302  0E13                     	;# 
  2303  0E14                     	;# 
  2304  0E15                     	;# 
  2305  0E17                     	;# 
  2306  0E20                     	;# 
  2307  0E21                     	;# 
  2308  0E22                     	;# 
  2309  0E24                     	;# 
  2310  0E25                     	;# 
  2311  0E28                     	;# 
  2312  0E29                     	;# 
  2313  0E2A                     	;# 
  2314  0E2B                     	;# 
  2315  0E90                     	;# 
  2316  0E91                     	;# 
  2317  0E92                     	;# 
  2318  0E94                     	;# 
  2319  0E95                     	;# 
  2320  0EA0                     	;# 
  2321  0EA1                     	;# 
  2322  0EA2                     	;# 
  2323  0EA3                     	;# 
  2324  0EA4                     	;# 
  2325  0EA5                     	;# 
  2326  0F0F                     	;# 
  2327  0F10                     	;# 
  2328  0F11                     	;# 
  2329  0F12                     	;# 
  2330  0F13                     	;# 
  2331  0F14                     	;# 
  2332  0F15                     	;# 
  2333  0F16                     	;# 
  2334  0F17                     	;# 
  2335  0F18                     	;# 
  2336  0F19                     	;# 
  2337  0F1A                     	;# 
  2338  0F1B                     	;# 
  2339  0F1C                     	;# 
  2340  0F1D                     	;# 
  2341  0F1E                     	;# 
  2342  0F1F                     	;# 
  2343  0F20                     	;# 
  2344  0F21                     	;# 
  2345  0F22                     	;# 
  2346  0F23                     	;# 
  2347  0F24                     	;# 
  2348  0F25                     	;# 
  2349  0F26                     	;# 
  2350  0F27                     	;# 
  2351  0F28                     	;# 
  2352  0F29                     	;# 
  2353  0F2A                     	;# 
  2354  0F2B                     	;# 
  2355  0F2C                     	;# 
  2356  0F2D                     	;# 
  2357  0F9E                     	;# 
  2358  0FE4                     	;# 
  2359  0FE5                     	;# 
  2360  0FE6                     	;# 
  2361  0FE7                     	;# 
  2362  0FE8                     	;# 
  2363  0FE9                     	;# 
  2364  0FEA                     	;# 
  2365  0FEB                     	;# 
  2366  0FED                     	;# 
  2367  0FEE                     	;# 
  2368  0FEF                     	;# 
  2369  0000                     	;# 
  2370  0001                     	;# 
  2371  0002                     	;# 
  2372  0003                     	;# 
  2373  0004                     	;# 
  2374  0005                     	;# 
  2375  0006                     	;# 
  2376  0007                     	;# 
  2377  0008                     	;# 
  2378  0009                     	;# 
  2379  000A                     	;# 
  2380  000B                     	;# 
  2381  000C                     	;# 
  2382  000E                     	;# 
  2383  0011                     	;# 
  2384  0012                     	;# 
  2385  0013                     	;# 
  2386  0015                     	;# 
  2387  0016                     	;# 
  2388  0016                     	;# 
  2389  0017                     	;# 
  2390  0018                     	;# 
  2391  0019                     	;# 
  2392  001A                     	;# 
  2393  001B                     	;# 
  2394  001C                     	;# 
  2395  008C                     	;# 
  2396  008E                     	;# 
  2397  0091                     	;# 
  2398  0092                     	;# 
  2399  0093                     	;# 
  2400  0095                     	;# 
  2401  0096                     	;# 
  2402  0097                     	;# 
  2403  0098                     	;# 
  2404  0099                     	;# 
  2405  009A                     	;# 
  2406  009B                     	;# 
  2407  009B                     	;# 
  2408  009C                     	;# 
  2409  009D                     	;# 
  2410  009E                     	;# 
  2411  009F                     	;# 
  2412  010C                     	;# 
  2413  010E                     	;# 
  2414  0111                     	;# 
  2415  0112                     	;# 
  2416  0113                     	;# 
  2417  0114                     	;# 
  2418  0115                     	;# 
  2419  0116                     	;# 
  2420  0117                     	;# 
  2421  0118                     	;# 
  2422  0119                     	;# 
  2423  011C                     	;# 
  2424  018C                     	;# 
  2425  018E                     	;# 
  2426  0191                     	;# 
  2427  0191                     	;# 
  2428  0192                     	;# 
  2429  0193                     	;# 
  2430  0193                     	;# 
  2431  0194                     	;# 
  2432  0195                     	;# 
  2433  0196                     	;# 
  2434  0197                     	;# 
  2435  0199                     	;# 
  2436  0199                     	;# 
  2437  0199                     	;# 
  2438  019A                     	;# 
  2439  019A                     	;# 
  2440  019A                     	;# 
  2441  019B                     	;# 
  2442  019B                     	;# 
  2443  019B                     	;# 
  2444  019B                     	;# 
  2445  019B                     	;# 
  2446  019C                     	;# 
  2447  019C                     	;# 
  2448  019C                     	;# 
  2449  019D                     	;# 
  2450  019D                     	;# 
  2451  019D                     	;# 
  2452  019E                     	;# 
  2453  019E                     	;# 
  2454  019E                     	;# 
  2455  019F                     	;# 
  2456  019F                     	;# 
  2457  019F                     	;# 
  2458  019F                     	;# 
  2459  019F                     	;# 
  2460  020C                     	;# 
  2461  020E                     	;# 
  2462  0211                     	;# 
  2463  0211                     	;# 
  2464  0212                     	;# 
  2465  0212                     	;# 
  2466  0213                     	;# 
  2467  0213                     	;# 
  2468  0214                     	;# 
  2469  0214                     	;# 
  2470  0215                     	;# 
  2471  0215                     	;# 
  2472  0215                     	;# 
  2473  0215                     	;# 
  2474  0216                     	;# 
  2475  0216                     	;# 
  2476  0217                     	;# 
  2477  0217                     	;# 
  2478  028C                     	;# 
  2479  028E                     	;# 
  2480  0291                     	;# 
  2481  0291                     	;# 
  2482  0292                     	;# 
  2483  0293                     	;# 
  2484  0293                     	;# 
  2485  0298                     	;# 
  2486  0298                     	;# 
  2487  0299                     	;# 
  2488  029A                     	;# 
  2489  029A                     	;# 
  2490  029E                     	;# 
  2491  030C                     	;# 
  2492  030E                     	;# 
  2493  038C                     	;# 
  2494  038E                     	;# 
  2495  0391                     	;# 
  2496  0392                     	;# 
  2497  0393                     	;# 
  2498  0397                     	;# 
  2499  0398                     	;# 
  2500  0399                     	;# 
  2501  0415                     	;# 
  2502  0416                     	;# 
  2503  0417                     	;# 
  2504  041C                     	;# 
  2505  041D                     	;# 
  2506  041E                     	;# 
  2507  0511                     	;# 
  2508  0515                     	;# 
  2509  0617                     	;# 
  2510  0618                     	;# 
  2511  0619                     	;# 
  2512  0619                     	;# 
  2513  061A                     	;# 
  2514  061B                     	;# 
  2515  061C                     	;# 
  2516  061C                     	;# 
  2517  0691                     	;# 
  2518  0692                     	;# 
  2519  0693                     	;# 
  2520  0694                     	;# 
  2521  0695                     	;# 
  2522  0696                     	;# 
  2523  0697                     	;# 
  2524  0698                     	;# 
  2525  0699                     	;# 
  2526  069A                     	;# 
  2527  069B                     	;# 
  2528  069C                     	;# 
  2529  069D                     	;# 
  2530  069E                     	;# 
  2531  069F                     	;# 
  2532  0E0F                     	;# 
  2533  0E10                     	;# 
  2534  0E11                     	;# 
  2535  0E12                     	;# 
  2536  0E13                     	;# 
  2537  0E14                     	;# 
  2538  0E15                     	;# 
  2539  0E17                     	;# 
  2540  0E20                     	;# 
  2541  0E21                     	;# 
  2542  0E22                     	;# 
  2543  0E24                     	;# 
  2544  0E25                     	;# 
  2545  0E28                     	;# 
  2546  0E29                     	;# 
  2547  0E2A                     	;# 
  2548  0E2B                     	;# 
  2549  0E90                     	;# 
  2550  0E91                     	;# 
  2551  0E92                     	;# 
  2552  0E94                     	;# 
  2553  0E95                     	;# 
  2554  0EA0                     	;# 
  2555  0EA1                     	;# 
  2556  0EA2                     	;# 
  2557  0EA3                     	;# 
  2558  0EA4                     	;# 
  2559  0EA5                     	;# 
  2560  0F0F                     	;# 
  2561  0F10                     	;# 
  2562  0F11                     	;# 
  2563  0F12                     	;# 
  2564  0F13                     	;# 
  2565  0F14                     	;# 
  2566  0F15                     	;# 
  2567  0F16                     	;# 
  2568  0F17                     	;# 
  2569  0F18                     	;# 
  2570  0F19                     	;# 
  2571  0F1A                     	;# 
  2572  0F1B                     	;# 
  2573  0F1C                     	;# 
  2574  0F1D                     	;# 
  2575  0F1E                     	;# 
  2576  0F1F                     	;# 
  2577  0F20                     	;# 
  2578  0F21                     	;# 
  2579  0F22                     	;# 
  2580  0F23                     	;# 
  2581  0F24                     	;# 
  2582  0F25                     	;# 
  2583  0F26                     	;# 
  2584  0F27                     	;# 
  2585  0F28                     	;# 
  2586  0F29                     	;# 
  2587  0F2A                     	;# 
  2588  0F2B                     	;# 
  2589  0F2C                     	;# 
  2590  0F2D                     	;# 
  2591  0F9E                     	;# 
  2592  0FE4                     	;# 
  2593  0FE5                     	;# 
  2594  0FE6                     	;# 
  2595  0FE7                     	;# 
  2596  0FE8                     	;# 
  2597  0FE9                     	;# 
  2598  0FEA                     	;# 
  2599  0FEB                     	;# 
  2600  0FED                     	;# 
  2601  0FEE                     	;# 
  2602  0FEF                     	;# 
  2603                           
  2604                           	psect	idataBANK4
  2605  0000                     __pidataBANK4:	
  2606                           
  2607                           	psect	stringtext
  2608  1800                     __pstringtext:	
  2609  1800                     _ScanCodeFunctionNoE0:	
  2610  1800  3400               	retlw	0
  2611  1801  3411               	retlw	17
  2612  1802  3400               	retlw	0
  2613  1803  340C               	retlw	12
  2614  1804  340A               	retlw	10
  2615  1805  3406               	retlw	6
  2616  1806  3407               	retlw	7
  2617  1807  3414               	retlw	20
  2618  1808  3400               	retlw	0
  2619  1809  3412               	retlw	18
  2620  180A  3410               	retlw	16
  2621  180B  340E               	retlw	14
  2622  180C  340B               	retlw	11
  2623  180D  3400               	retlw	0
  2624  180E  3400               	retlw	0
  2625  180F  3400               	retlw	0
  2626  1810  3400               	retlw	0
  2627  1811  341C               	retlw	28
  2628  1812  3400               	retlw	0
  2629  1813  3400               	retlw	0
  2630  1814  341A               	retlw	26
  2631  1815  3400               	retlw	0
  2632  1816  3400               	retlw	0
  2633  1817  3400               	retlw	0
  2634  1818  3400               	retlw	0
  2635  1819  3400               	retlw	0
  2636  181A  3400               	retlw	0
  2637  181B  3400               	retlw	0
  2638  181C  3400               	retlw	0
  2639  181D  3400               	retlw	0
  2640  181E  3400               	retlw	0
  2641  181F  3400               	retlw	0
  2642  1820  3400               	retlw	0
  2643  1821  3400               	retlw	0
  2644  1822  3400               	retlw	0
  2645  1823  3400               	retlw	0
  2646  1824  3400               	retlw	0
  2647  1825  3400               	retlw	0
  2648  1826  3400               	retlw	0
  2649  1827  3400               	retlw	0
  2650  1828  3400               	retlw	0
  2651  1829  3400               	retlw	0
  2652  182A  3400               	retlw	0
  2653  182B  3400               	retlw	0
  2654  182C  3400               	retlw	0
  2655  182D  3400               	retlw	0
  2656  182E  3400               	retlw	0
  2657  182F  3400               	retlw	0
  2658  1830  3400               	retlw	0
  2659  1831  3400               	retlw	0
  2660  1832  3400               	retlw	0
  2661  1833  3400               	retlw	0
  2662  1834  3400               	retlw	0
  2663  1835  3400               	retlw	0
  2664  1836  3400               	retlw	0
  2665  1837  3400               	retlw	0
  2666  1838  3400               	retlw	0
  2667  1839  3400               	retlw	0
  2668  183A  3400               	retlw	0
  2669  183B  3400               	retlw	0
  2670  183C  3400               	retlw	0
  2671  183D  3400               	retlw	0
  2672  183E  3400               	retlw	0
  2673  183F  3400               	retlw	0
  2674  1840  3400               	retlw	0
  2675  1841  3400               	retlw	0
  2676  1842  3400               	retlw	0
  2677  1843  3400               	retlw	0
  2678  1844  3400               	retlw	0
  2679  1845  3400               	retlw	0
  2680  1846  3400               	retlw	0
  2681  1847  3400               	retlw	0
  2682  1848  3400               	retlw	0
  2683  1849  3400               	retlw	0
  2684  184A  3400               	retlw	0
  2685  184B  3400               	retlw	0
  2686  184C  3400               	retlw	0
  2687  184D  3400               	retlw	0
  2688  184E  3400               	retlw	0
  2689  184F  3400               	retlw	0
  2690  1850  3400               	retlw	0
  2691  1851  3400               	retlw	0
  2692  1852  3400               	retlw	0
  2693  1853  3400               	retlw	0
  2694  1854  3400               	retlw	0
  2695  1855  3400               	retlw	0
  2696  1856  3400               	retlw	0
  2697  1857  3400               	retlw	0
  2698  1858  3400               	retlw	0
  2699  1859  3400               	retlw	0
  2700  185A  3400               	retlw	0
  2701  185B  3400               	retlw	0
  2702  185C  3400               	retlw	0
  2703  185D  3400               	retlw	0
  2704  185E  3400               	retlw	0
  2705  185F  3400               	retlw	0
  2706  1860  3400               	retlw	0
  2707  1861  3400               	retlw	0
  2708  1862  3400               	retlw	0
  2709  1863  3400               	retlw	0
  2710  1864  3400               	retlw	0
  2711  1865  3400               	retlw	0
  2712  1866  3400               	retlw	0
  2713  1867  3400               	retlw	0
  2714  1868  3400               	retlw	0
  2715  1869  3400               	retlw	0
  2716  186A  3400               	retlw	0
  2717  186B  3400               	retlw	0
  2718  186C  3400               	retlw	0
  2719  186D  3400               	retlw	0
  2720  186E  3400               	retlw	0
  2721  186F  3400               	retlw	0
  2722  1870  3400               	retlw	0
  2723  1871  3400               	retlw	0
  2724  1872  3400               	retlw	0
  2725  1873  3400               	retlw	0
  2726  1874  3400               	retlw	0
  2727  1875  3400               	retlw	0
  2728  1876  3400               	retlw	0
  2729  1877  3400               	retlw	0
  2730  1878  3413               	retlw	19
  2731  1879  3400               	retlw	0
  2732  187A  3400               	retlw	0
  2733  187B  3400               	retlw	0
  2734  187C  3400               	retlw	0
  2735  187D  3400               	retlw	0
  2736  187E  3400               	retlw	0
  2737  187F  3400               	retlw	0
  2738  1880  3400               	retlw	0
  2739  1881  3400               	retlw	0
  2740  1882  3400               	retlw	0
  2741  1883  340F               	retlw	15
  2742  1884                     __end_of_ScanCodeFunctionNoE0:	
  2743  1884                     _ScanCode:	
  2744  1884  3409               	retlw	9
  2745  1885  3460               	retlw	96
  2746  1886  3400               	retlw	0
  2747  1887  3400               	retlw	0
  2748  1888  3400               	retlw	0
  2749  1889  3400               	retlw	0
  2750  188A  3400               	retlw	0
  2751  188B  3400               	retlw	0
  2752  188C  3471               	retlw	113
  2753  188D  3431               	retlw	49
  2754  188E  3400               	retlw	0
  2755  188F  3400               	retlw	0
  2756  1890  3400               	retlw	0
  2757  1891  347A               	retlw	122
  2758  1892  3473               	retlw	115
  2759  1893  3461               	retlw	97
  2760  1894  3477               	retlw	119
  2761  1895  3432               	retlw	50
  2762  1896  3400               	retlw	0
  2763  1897  3400               	retlw	0
  2764  1898  3463               	retlw	99
  2765  1899  3478               	retlw	120
  2766  189A  3464               	retlw	100
  2767  189B  3465               	retlw	101
  2768  189C  3434               	retlw	52
  2769  189D  3433               	retlw	51
  2770  189E  3400               	retlw	0
  2771  189F  3400               	retlw	0
  2772  18A0  3420               	retlw	32
  2773  18A1  3476               	retlw	118
  2774  18A2  3466               	retlw	102
  2775  18A3  3474               	retlw	116
  2776  18A4  3472               	retlw	114
  2777  18A5  3435               	retlw	53
  2778  18A6  3400               	retlw	0
  2779  18A7  3400               	retlw	0
  2780  18A8  346E               	retlw	110
  2781  18A9  3462               	retlw	98
  2782  18AA  3468               	retlw	104
  2783  18AB  3467               	retlw	103
  2784  18AC  3479               	retlw	121
  2785  18AD  3436               	retlw	54
  2786  18AE  3400               	retlw	0
  2787  18AF  3400               	retlw	0
  2788  18B0  3400               	retlw	0
  2789  18B1  346D               	retlw	109
  2790  18B2  346A               	retlw	106
  2791  18B3  3475               	retlw	117
  2792  18B4  3437               	retlw	55
  2793  18B5  3438               	retlw	56
  2794  18B6  3400               	retlw	0
  2795  18B7  3400               	retlw	0
  2796  18B8  342C               	retlw	44
  2797  18B9  346B               	retlw	107
  2798  18BA  3469               	retlw	105
  2799  18BB  346F               	retlw	111
  2800  18BC  3430               	retlw	48
  2801  18BD  3439               	retlw	57
  2802  18BE  3400               	retlw	0
  2803  18BF  3400               	retlw	0
  2804  18C0  342E               	retlw	46
  2805  18C1  342F               	retlw	47
  2806  18C2  346C               	retlw	108
  2807  18C3  343B               	retlw	59
  2808  18C4  3470               	retlw	112
  2809  18C5  342D               	retlw	45
  2810  18C6  3400               	retlw	0
  2811  18C7  3400               	retlw	0
  2812  18C8  3400               	retlw	0
  2813  18C9  3427               	retlw	39
  2814  18CA  3400               	retlw	0
  2815  18CB  345B               	retlw	91
  2816  18CC  343D               	retlw	61
  2817  18CD  3400               	retlw	0
  2818  18CE  3400               	retlw	0
  2819  18CF  3400               	retlw	0
  2820  18D0  3400               	retlw	0
  2821  18D1  340D               	retlw	13
  2822  18D2  345D               	retlw	93
  2823  18D3  3400               	retlw	0
  2824  18D4  345C               	retlw	92
  2825  18D5  3400               	retlw	0
  2826  18D6  3400               	retlw	0
  2827  18D7  3400               	retlw	0
  2828  18D8  3400               	retlw	0
  2829  18D9  3400               	retlw	0
  2830  18DA  3400               	retlw	0
  2831  18DB  3400               	retlw	0
  2832  18DC  3400               	retlw	0
  2833  18DD  3408               	retlw	8
  2834  18DE  3400               	retlw	0
  2835  18DF  3400               	retlw	0
  2836  18E0  3431               	retlw	49
  2837  18E1  3400               	retlw	0
  2838  18E2  3434               	retlw	52
  2839  18E3  3437               	retlw	55
  2840  18E4  3400               	retlw	0
  2841  18E5  3400               	retlw	0
  2842  18E6  3400               	retlw	0
  2843  18E7  3430               	retlw	48
  2844  18E8  342E               	retlw	46
  2845  18E9  3432               	retlw	50
  2846  18EA  3435               	retlw	53
  2847  18EB  3436               	retlw	54
  2848  18EC  3438               	retlw	56
  2849  18ED  341B               	retlw	27
  2850  18EE  3400               	retlw	0
  2851  18EF  3400               	retlw	0
  2852  18F0  342B               	retlw	43
  2853  18F1  3433               	retlw	51
  2854  18F2  342D               	retlw	45
  2855  18F3  342A               	retlw	42
  2856  18F4  3439               	retlw	57
  2857  18F5                     __end_of_ScanCode:	
  2858  18F5                     _ScanCodeSHIFT:	
  2859  18F5  3409               	retlw	9
  2860  18F6  347E               	retlw	126
  2861  18F7  3400               	retlw	0
  2862  18F8  3400               	retlw	0
  2863  18F9  3400               	retlw	0
  2864  18FA  3400               	retlw	0
  2865  18FB  3400               	retlw	0
  2866  18FC  3400               	retlw	0
  2867  18FD  3451               	retlw	81
  2868  18FE  3421               	retlw	33
  2869  18FF  3400               	retlw	0
  2870  1900  3400               	retlw	0
  2871  1901  3400               	retlw	0
  2872  1902  345A               	retlw	90
  2873  1903  3453               	retlw	83
  2874  1904  3441               	retlw	65
  2875  1905  3457               	retlw	87
  2876  1906  3440               	retlw	64
  2877  1907  3400               	retlw	0
  2878  1908  3400               	retlw	0
  2879  1909  3443               	retlw	67
  2880  190A  3458               	retlw	88
  2881  190B  3444               	retlw	68
  2882  190C  3445               	retlw	69
  2883  190D  3424               	retlw	36
  2884  190E  3423               	retlw	35
  2885  190F  3400               	retlw	0
  2886  1910  3400               	retlw	0
  2887  1911  3420               	retlw	32
  2888  1912  3456               	retlw	86
  2889  1913  3446               	retlw	70
  2890  1914  3454               	retlw	84
  2891  1915  3452               	retlw	82
  2892  1916  3425               	retlw	37
  2893  1917  3400               	retlw	0
  2894  1918  3400               	retlw	0
  2895  1919  344E               	retlw	78
  2896  191A  3442               	retlw	66
  2897  191B  3448               	retlw	72
  2898  191C  3447               	retlw	71
  2899  191D  3459               	retlw	89
  2900  191E  345E               	retlw	94
  2901  191F  3400               	retlw	0
  2902  1920  3400               	retlw	0
  2903  1921  3400               	retlw	0
  2904  1922  344D               	retlw	77
  2905  1923  344A               	retlw	74
  2906  1924  3455               	retlw	85
  2907  1925  3426               	retlw	38
  2908  1926  342A               	retlw	42
  2909  1927  3400               	retlw	0
  2910  1928  3400               	retlw	0
  2911  1929  343C               	retlw	60
  2912  192A  344B               	retlw	75
  2913  192B  3449               	retlw	73
  2914  192C  344F               	retlw	79
  2915  192D  3429               	retlw	41
  2916  192E  3428               	retlw	40
  2917  192F  3400               	retlw	0
  2918  1930  3400               	retlw	0
  2919  1931  343E               	retlw	62
  2920  1932  343F               	retlw	63
  2921  1933  344C               	retlw	76
  2922  1934  343A               	retlw	58
  2923  1935  3450               	retlw	80
  2924  1936  345F               	retlw	95
  2925  1937  3400               	retlw	0
  2926  1938  3400               	retlw	0
  2927  1939  3400               	retlw	0
  2928  193A  3422               	retlw	34
  2929  193B  3400               	retlw	0
  2930  193C  347B               	retlw	123
  2931  193D  342B               	retlw	43
  2932  193E  3400               	retlw	0
  2933  193F  3400               	retlw	0
  2934  1940  3400               	retlw	0
  2935  1941  3400               	retlw	0
  2936  1942  340D               	retlw	13
  2937  1943  347D               	retlw	125
  2938  1944  3400               	retlw	0
  2939  1945  347C               	retlw	124
  2940  1946  3400               	retlw	0
  2941  1947  3400               	retlw	0
  2942  1948  3400               	retlw	0
  2943  1949  3400               	retlw	0
  2944  194A  3400               	retlw	0
  2945  194B  3400               	retlw	0
  2946  194C  3400               	retlw	0
  2947  194D  3400               	retlw	0
  2948  194E  3408               	retlw	8
  2949  194F  3400               	retlw	0
  2950  1950  3400               	retlw	0
  2951  1951  3431               	retlw	49
  2952  1952  3400               	retlw	0
  2953  1953  3434               	retlw	52
  2954  1954  3437               	retlw	55
  2955  1955  3400               	retlw	0
  2956  1956  3400               	retlw	0
  2957  1957  3400               	retlw	0
  2958  1958  3430               	retlw	48
  2959  1959  342E               	retlw	46
  2960  195A  3432               	retlw	50
  2961  195B  3435               	retlw	53
  2962  195C  3436               	retlw	54
  2963  195D  3438               	retlw	56
  2964  195E  341B               	retlw	27
  2965  195F  3400               	retlw	0
  2966  1960  3400               	retlw	0
  2967  1961  342B               	retlw	43
  2968  1962  3433               	retlw	51
  2969  1963  342D               	retlw	45
  2970  1964  342A               	retlw	42
  2971  1965  3439               	retlw	57
  2972  1966                     __end_of_ScanCodeSHIFT:	
  2973  1966                     _ScanCodeFunctionE0:	
  2974  1966  341E               	retlw	30
  2975  1967  3400               	retlw	0
  2976  1968  3400               	retlw	0
  2977  1969  341F               	retlw	31
  2978  196A  3400               	retlw	0
  2979  196B  3400               	retlw	0
  2980  196C  3400               	retlw	0
  2981  196D  3400               	retlw	0
  2982  196E  3400               	retlw	0
  2983  196F  3400               	retlw	0
  2984  1970  3400               	retlw	0
  2985  1971  3400               	retlw	0
  2986  1972  3400               	retlw	0
  2987  1973  3400               	retlw	0
  2988  1974  3419               	retlw	25
  2989  1975  3400               	retlw	0
  2990  1976  3400               	retlw	0
  2991  1977  3400               	retlw	0
  2992  1978  3400               	retlw	0
  2993  1979  3400               	retlw	0
  2994  197A  3400               	retlw	0
  2995  197B  3400               	retlw	0
  2996  197C  341D               	retlw	29
  2997  197D  3400               	retlw	0
  2998  197E  3400               	retlw	0
  2999  197F  3400               	retlw	0
  3000  1980  3400               	retlw	0
  3001  1981  3400               	retlw	0
  3002  1982  3400               	retlw	0
  3003  1983  3400               	retlw	0
  3004  1984  3400               	retlw	0
  3005  1985  3400               	retlw	0
  3006  1986  3400               	retlw	0
  3007  1987  3400               	retlw	0
  3008  1988  3400               	retlw	0
  3009  1989  3400               	retlw	0
  3010  198A  3400               	retlw	0
  3011  198B  3400               	retlw	0
  3012  198C  3400               	retlw	0
  3013  198D  3400               	retlw	0
  3014  198E  3400               	retlw	0
  3015  198F  3400               	retlw	0
  3016  1990  3400               	retlw	0
  3017  1991  3400               	retlw	0
  3018  1992  3400               	retlw	0
  3019  1993  3400               	retlw	0
  3020  1994  3400               	retlw	0
  3021  1995  3400               	retlw	0
  3022  1996  3400               	retlw	0
  3023  1997  3400               	retlw	0
  3024  1998  3400               	retlw	0
  3025  1999  3400               	retlw	0
  3026  199A  3400               	retlw	0
  3027  199B  3400               	retlw	0
  3028  199C  3400               	retlw	0
  3029  199D  3400               	retlw	0
  3030  199E  3400               	retlw	0
  3031  199F  342F               	retlw	47
  3032  19A0  3400               	retlw	0
  3033  19A1  3400               	retlw	0
  3034  19A2  3400               	retlw	0
  3035  19A3  3400               	retlw	0
  3036  19A4  3400               	retlw	0
  3037  19A5  3400               	retlw	0
  3038  19A6  3400               	retlw	0
  3039  19A7  3400               	retlw	0
  3040  19A8  3400               	retlw	0
  3041  19A9  3400               	retlw	0
  3042  19AA  3400               	retlw	0
  3043  19AB  3400               	retlw	0
  3044  19AC  3400               	retlw	0
  3045  19AD  3400               	retlw	0
  3046  19AE  3400               	retlw	0
  3047  19AF  340D               	retlw	13
  3048  19B0  3400               	retlw	0
  3049  19B1  3400               	retlw	0
  3050  19B2  3400               	retlw	0
  3051  19B3  3400               	retlw	0
  3052  19B4  3400               	retlw	0
  3053  19B5  3400               	retlw	0
  3054  19B6  3400               	retlw	0
  3055  19B7  3400               	retlw	0
  3056  19B8  3400               	retlw	0
  3057  19B9  3400               	retlw	0
  3058  19BA  3400               	retlw	0
  3059  19BB  3400               	retlw	0
  3060  19BC  3400               	retlw	0
  3061  19BD  3400               	retlw	0
  3062  19BE  3401               	retlw	1
  3063  19BF  3400               	retlw	0
  3064  19C0  3403               	retlw	3
  3065  19C1  3416               	retlw	22
  3066  19C2  3400               	retlw	0
  3067  19C3  3400               	retlw	0
  3068  19C4  3400               	retlw	0
  3069  19C5  3415               	retlw	21
  3070  19C6  347F               	retlw	127
  3071  19C7  3404               	retlw	4
  3072  19C8  3400               	retlw	0
  3073  19C9  3405               	retlw	5
  3074  19CA  3402               	retlw	2
  3075  19CB  3400               	retlw	0
  3076  19CC  3400               	retlw	0
  3077  19CD  3400               	retlw	0
  3078  19CE  3400               	retlw	0
  3079  19CF  3418               	retlw	24
  3080  19D0  3400               	retlw	0
  3081  19D1  3400               	retlw	0
  3082  19D2  3417               	retlw	23
  3083  19D3                     __end_of_ScanCodeFunctionE0:	
  3084  19D3                     _dpowers:	
  3085  19D3  3401               	retlw	1
  3086  19D4  3400               	retlw	0
  3087  19D5  3400               	retlw	0
  3088  19D6  3400               	retlw	0
  3089  19D7  340A               	retlw	10
  3090  19D8  3400               	retlw	0
  3091  19D9  3400               	retlw	0
  3092  19DA  3400               	retlw	0
  3093  19DB  3464               	retlw	100
  3094  19DC  3400               	retlw	0
  3095  19DD  3400               	retlw	0
  3096  19DE  3400               	retlw	0
  3097  19DF  34E8               	retlw	232
  3098  19E0  3403               	retlw	3
  3099  19E1  3400               	retlw	0
  3100  19E2  3400               	retlw	0
  3101  19E3  3410               	retlw	16
  3102  19E4  3427               	retlw	39
  3103  19E5  3400               	retlw	0
  3104  19E6  3400               	retlw	0
  3105  19E7  34A0               	retlw	160
  3106  19E8  3486               	retlw	134
  3107  19E9  3401               	retlw	1
  3108  19EA  3400               	retlw	0
  3109  19EB  3440               	retlw	64
  3110  19EC  3442               	retlw	66
  3111  19ED  340F               	retlw	15
  3112  19EE  3400               	retlw	0
  3113  19EF  3480               	retlw	128
  3114  19F0  3496               	retlw	150
  3115  19F1  3498               	retlw	152
  3116  19F2  3400               	retlw	0
  3117  19F3  3400               	retlw	0
  3118  19F4  34E1               	retlw	225
  3119  19F5  34F5               	retlw	245
  3120  19F6  3405               	retlw	5
  3121  19F7  3400               	retlw	0
  3122  19F8  34CA               	retlw	202
  3123  19F9  349A               	retlw	154
  3124  19FA  343B               	retlw	59
  3125  19FB                     __end_of_dpowers:	
  3126  19FB                     _EvenParityMSG:	
  3127  19FB  3420               	retlw	32
  3128  19FC  3477               	retlw	119
  3129  19FD  3469               	retlw	105
  3130  19FE  3474               	retlw	116
  3131  19FF  3468               	retlw	104
  3132  1A00  3420               	retlw	32
  3133  1A01  3445               	retlw	69
  3134  1A02  3476               	retlw	118
  3135  1A03  3465               	retlw	101
  3136  1A04  346E               	retlw	110
  3137  1A05  3420               	retlw	32
  3138  1A06  3470               	retlw	112
  3139  1A07  3461               	retlw	97
  3140  1A08  3472               	retlw	114
  3141  1A09  3469               	retlw	105
  3142  1A0A  3474               	retlw	116
  3143  1A0B  3479               	retlw	121
  3144  1A0C  3420               	retlw	32
  3145  1A0D  3462               	retlw	98
  3146  1A0E  3469               	retlw	105
  3147  1A0F  3474               	retlw	116
  3148  1A10  3400               	retlw	0
  3149  1A11                     __end_of_EvenParityMSG:	
  3150  1A11                     _OddParityMSG:	
  3151  1A11  3420               	retlw	32
  3152  1A12  3477               	retlw	119
  3153  1A13  3469               	retlw	105
  3154  1A14  3474               	retlw	116
  3155  1A15  3468               	retlw	104
  3156  1A16  3420               	retlw	32
  3157  1A17  344F               	retlw	79
  3158  1A18  3464               	retlw	100
  3159  1A19  3464               	retlw	100
  3160  1A1A  3420               	retlw	32
  3161  1A1B  3470               	retlw	112
  3162  1A1C  3461               	retlw	97
  3163  1A1D  3472               	retlw	114
  3164  1A1E  3469               	retlw	105
  3165  1A1F  3474               	retlw	116
  3166  1A20  3479               	retlw	121
  3167  1A21  3420               	retlw	32
  3168  1A22  3462               	retlw	98
  3169  1A23  3469               	retlw	105
  3170  1A24  3474               	retlw	116
  3171  1A25  3400               	retlw	0
  3172  1A26                     __end_of_OddParityMSG:	
  3173  1A26                     _NoParityMSG:	
  3174  1A26  3420               	retlw	32
  3175  1A27  3477               	retlw	119
  3176  1A28  3469               	retlw	105
  3177  1A29  3474               	retlw	116
  3178  1A2A  3468               	retlw	104
  3179  1A2B  3420               	retlw	32
  3180  1A2C  344E               	retlw	78
  3181  1A2D  346F               	retlw	111
  3182  1A2E  3420               	retlw	32
  3183  1A2F  3470               	retlw	112
  3184  1A30  3461               	retlw	97
  3185  1A31  3472               	retlw	114
  3186  1A32  3469               	retlw	105
  3187  1A33  3474               	retlw	116
  3188  1A34  3479               	retlw	121
  3189  1A35  3420               	retlw	32
  3190  1A36  3462               	retlw	98
  3191  1A37  3469               	retlw	105
  3192  1A38  3474               	retlw	116
  3193  1A39  3400               	retlw	0
  3194  1A3A                     __end_of_NoParityMSG:	
  3195  1A3A                     _SpaceParityMSG:	
  3196  1A3A  3420               	retlw	32
  3197  1A3B  3477               	retlw	119
  3198  1A3C  3469               	retlw	105
  3199  1A3D  3474               	retlw	116
  3200  1A3E  3468               	retlw	104
  3201  1A3F  3420               	retlw	32
  3202  1A40  3453               	retlw	83
  3203  1A41  3470               	retlw	112
  3204  1A42  3461               	retlw	97
  3205  1A43  3463               	retlw	99
  3206  1A44  3465               	retlw	101
  3207  1A45  3420               	retlw	32
  3208  1A46  3462               	retlw	98
  3209  1A47  3469               	retlw	105
  3210  1A48  3474               	retlw	116
  3211  1A49  3400               	retlw	0
  3212  1A4A                     __end_of_SpaceParityMSG:	
  3213  1A4A                     _MarkParityMSG:	
  3214  1A4A  3420               	retlw	32
  3215  1A4B  3477               	retlw	119
  3216  1A4C  3469               	retlw	105
  3217  1A4D  3474               	retlw	116
  3218  1A4E  3468               	retlw	104
  3219  1A4F  3420               	retlw	32
  3220  1A50  344D               	retlw	77
  3221  1A51  3461               	retlw	97
  3222  1A52  3472               	retlw	114
  3223  1A53  346B               	retlw	107
  3224  1A54  3420               	retlw	32
  3225  1A55  3462               	retlw	98
  3226  1A56  3469               	retlw	105
  3227  1A57  3474               	retlw	116
  3228  1A58  3400               	retlw	0
  3229  1A59                     __end_of_MarkParityMSG:	
  3230  1A59                     _VoltageMSG:	
  3231  1A59  3456               	retlw	86
  3232  1A5A  346F               	retlw	111
  3233  1A5B  346C               	retlw	108
  3234  1A5C  3474               	retlw	116
  3235  1A5D  3461               	retlw	97
  3236  1A5E  3467               	retlw	103
  3237  1A5F  3465               	retlw	101
  3238  1A60  3420               	retlw	32
  3239  1A61  3474               	retlw	116
  3240  1A62  346F               	retlw	111
  3241  1A63  346F               	retlw	111
  3242  1A64  3420               	retlw	32
  3243  1A65  3400               	retlw	0
  3244  1A66                     __end_of_VoltageMSG:	
  3245  1A66                     _Version:	
  3246  1A66  3437               	retlw	55
  3247  1A67  342E               	retlw	46
  3248  1A68  3433               	retlw	51
  3249  1A69  345F               	retlw	95
  3250  1A6A  3444               	retlw	68
  3251  1A6B  3457               	retlw	87
  3252  1A6C  3430               	retlw	48
  3253  1A6D  3461               	retlw	97
  3254  1A6E  3400               	retlw	0
  3255  1A6F                     __end_of_Version:	
  3256  000B                     _INTCON	set	11
  3257  000B                     _INTCONbits	set	11
  3258  0011                     _PIR1bits	set	17
  3259  000C                     _PORTA	set	12
  3260  000E                     _PORTC	set	14
  3261  001B                     _PR2	set	27
  3262  001C                     _T2CON	set	28
  3263  001C                     _T2CONbits	set	28
  3264  001A                     _TMR2	set	26
  3265  009D                     _ADCON0	set	157
  3266  009E                     _ADCON1	set	158
  3267  009C                     _ADRESH	set	156
  3268  009B                     _ADRESL	set	155
  3269  0095                     _OPTION_REGbits	set	149
  3270  0099                     _OSCCON	set	153
  3271  009A                     _OSCSTAT	set	154
  3272  0091                     _PIE1	set	145
  3273  0091                     _PIE1bits	set	145
  3274  008C                     _TRISAbits	set	140
  3275  008E                     _TRISCbits	set	142
  3276  04D0                     _HFIOFS	set	1232
  3277  0117                     _FVRCON	set	279
  3278  010C                     _LATA	set	268
  3279  010E                     _LATC	set	270
  3280  018C                     _ANSELA	set	396
  3281  018E                     _ANSELC	set	398
  3282  019F                     _BAUD1CON	set	415
  3283  0192                     _PMADRH	set	402
  3284  0191                     _PMADRL	set	401
  3285  0195                     _PMCON1	set	405
  3286  0196                     _PMCON2	set	406
  3287  0194                     _PMDATH	set	404
  3288  0193                     _PMDATL	set	403
  3289  019D                     _RC1STA	set	413
  3290  019D                     _RC1STAbits	set	413
  3291  0199                     _RCREG	set	409
  3292  019D                     _RCSTA	set	413
  3293  019D                     _RCSTAbits	set	413
  3294  019B                     _SPBRG	set	411
  3295  019C                     _SPBRGH	set	412
  3296  019E                     _TX1STA	set	414
  3297  019E                     _TX1STAbits	set	414
  3298  019A                     _TXREG	set	410
  3299  019E                     _TXSTAbits	set	414
  3300  020C                     _WPUA	set	524
  3301  020E                     _WPUC	set	526
  3302  029A                     _CCP2CONbits	set	666
  3303  0393                     _IOCAF	set	915
  3304  0392                     _IOCAN	set	914
  3305  0E25                     _CKPPS	set	3621
  3306  0E0F                     _PPSLOCK	set	3599
  3307  0E24                     _RXPPS	set	3620
  3308  0EA2                     _RC2PPS	set	3746
  3309  1A6F                     STR_6:	
  3310  1A6F  3443               	retlw	67	;'C'
  3311  1A70  3468               	retlw	104	;'h'
  3312  1A71  3461               	retlw	97	;'a'
  3313  1A72  346E               	retlw	110	;'n'
  3314  1A73  3467               	retlw	103	;'g'
  3315  1A74  3465               	retlw	101	;'e'
  3316  1A75  3420               	retlw	32	;' '
  3317  1A76  3442               	retlw	66	;'B'
  3318  1A77  3441               	retlw	65	;'A'
  3319  1A78  3455               	retlw	85	;'U'
  3320  1A79  3444               	retlw	68	;'D'
  3321  1A7A  343A               	retlw	58	;':'
  3322  1A7B  3420               	retlw	32	;' '
  3323  1A7C  3422               	retlw	34	;'"'
  3324  1A7D  3443               	retlw	67	;'C'
  3325  1A7E  344E               	retlw	78	;'N'
  3326  1A7F  3454               	retlw	84	;'T'
  3327  1A80  3420               	retlw	32	;' '
  3328  1A81  342B               	retlw	43	;'+'
  3329  1A82  3420               	retlw	32	;' '
  3330  1A83  3441               	retlw	65	;'A'
  3331  1A84  344C               	retlw	76	;'L'
  3332  1A85  3454               	retlw	84	;'T'
  3333  1A86  3420               	retlw	32	;' '
  3334  1A87  342B               	retlw	43	;'+'
  3335  1A88  3420               	retlw	32	;' '
  3336  1A89  3444               	retlw	68	;'D'
  3337  1A8A  3445               	retlw	69	;'E'
  3338  1A8B  344C               	retlw	76	;'L'
  3339  1A8C  3422               	retlw	34	;'"'
  3340  1A8D  340D               	retlw	13
  3341  1A8E  340A               	retlw	10
  3342  1A8F  3400               	retlw	0
  3343  1A90                     STR_3:	
  3344  1A90  340D               	retlw	13
  3345  1A91  340A               	retlw	10
  3346  1A92  3450               	retlw	80	;'P'
  3347  1A93  3453               	retlw	83	;'S'
  3348  1A94  342F               	retlw	47	;'/'
  3349  1A95  3432               	retlw	50	;'2'
  3350  1A96  3420               	retlw	32	;' '
  3351  1A97  344B               	retlw	75	;'K'
  3352  1A98  3465               	retlw	101	;'e'
  3353  1A99  3479               	retlw	121	;'y'
  3354  1A9A  3462               	retlw	98	;'b'
  3355  1A9B  346F               	retlw	111	;'o'
  3356  1A9C  3461               	retlw	97	;'a'
  3357  1A9D  3472               	retlw	114	;'r'
  3358  1A9E  3464               	retlw	100	;'d'
  3359  1A9F  3420               	retlw	32	;' '
  3360  1AA0  3474               	retlw	116	;'t'
  3361  1AA1  346F               	retlw	111	;'o'
  3362  1AA2  3420               	retlw	32	;' '
  3363  1AA3  3452               	retlw	82	;'R'
  3364  1AA4  3453               	retlw	83	;'S'
  3365  1AA5  342D               	retlw	45	;'-'
  3366  1AA6  3432               	retlw	50	;'2'
  3367  1AA7  3433               	retlw	51	;'3'
  3368  1AA8  3432               	retlw	50	;'2'
  3369  1AA9  340D               	retlw	13
  3370  1AAA  340A               	retlw	10
  3371  1AAB  3400               	retlw	0
  3372  1AAC                     STR_18:	
  3373  1AAC  3442               	retlw	66	;'B'
  3374  1AAD  3461               	retlw	97	;'a'
  3375  1AAE  3475               	retlw	117	;'u'
  3376  1AAF  3464               	retlw	100	;'d'
  3377  1AB0  3420               	retlw	32	;' '
  3378  1AB1  3477               	retlw	119	;'w'
  3379  1AB2  3469               	retlw	105	;'i'
  3380  1AB3  346C               	retlw	108	;'l'
  3381  1AB4  346C               	retlw	108	;'l'
  3382  1AB5  3420               	retlw	32	;' '
  3383  1AB6  3462               	retlw	98	;'b'
  3384  1AB7  3465               	retlw	101	;'e'
  3385  1AB8  3420               	retlw	32	;' '
  3386  1AB9  3473               	retlw	115	;'s'
  3387  1ABA  3465               	retlw	101	;'e'
  3388  1ABB  3474               	retlw	116	;'t'
  3389  1ABC  3420               	retlw	32	;' '
  3390  1ABD  3474               	retlw	116	;'t'
  3391  1ABE  346F               	retlw	111	;'o'
  3392  1ABF  3420               	retlw	32	;' '
  3393  1AC0  3425               	retlw	37	;'%'
  3394  1AC1  346C               	retlw	108	;'l'
  3395  1AC2  3475               	retlw	117	;'u'
  3396  1AC3  3400               	retlw	0
  3397  1AC4                     STR_10:	
  3398  1AC4  3446               	retlw	70	;'F'
  3399  1AC5  346C               	retlw	108	;'l'
  3400  1AC6  3461               	retlw	97	;'a'
  3401  1AC7  3473               	retlw	115	;'s'
  3402  1AC8  3468               	retlw	104	;'h'
  3403  1AC9  3420               	retlw	32	;' '
  3404  1ACA  3450               	retlw	80	;'P'
  3405  1ACB  3472               	retlw	114	;'r'
  3406  1ACC  346F               	retlw	111	;'o'
  3407  1ACD  3467               	retlw	103	;'g'
  3408  1ACE  3472               	retlw	114	;'r'
  3409  1ACF  3461               	retlw	97	;'a'
  3410  1AD0  346D               	retlw	109	;'m'
  3411  1AD1  3420               	retlw	32	;' '
  3412  1AD2  3446               	retlw	70	;'F'
  3413  1AD3  3461               	retlw	97	;'a'
  3414  1AD4  3469               	retlw	105	;'i'
  3415  1AD5  346C               	retlw	108	;'l'
  3416  1AD6  340D               	retlw	13
  3417  1AD7  340A               	retlw	10
  3418  1AD8  3400               	retlw	0
  3419  1AD9                     STR_20:	
  3420  1AD9  3442               	retlw	66	;'B'
  3421  1ADA  3461               	retlw	97	;'a'
  3422  1ADB  3475               	retlw	117	;'u'
  3423  1ADC  3464               	retlw	100	;'d'
  3424  1ADD  3420               	retlw	32	;' '
  3425  1ADE  344F               	retlw	79	;'O'
  3426  1ADF  3475               	retlw	117	;'u'
  3427  1AE0  3474               	retlw	116	;'t'
  3428  1AE1  3420               	retlw	32	;' '
  3429  1AE2  346F               	retlw	111	;'o'
  3430  1AE3  3466               	retlw	102	;'f'
  3431  1AE4  3420               	retlw	32	;' '
  3432  1AE5  3452               	retlw	82	;'R'
  3433  1AE6  3461               	retlw	97	;'a'
  3434  1AE7  346E               	retlw	110	;'n'
  3435  1AE8  3467               	retlw	103	;'g'
  3436  1AE9  3465               	retlw	101	;'e'
  3437  1AEA  340D               	retlw	13
  3438  1AEB  340A               	retlw	10
  3439  1AEC  3400               	retlw	0
  3440  1AED                     STR_14:	
  3441  1AED  3445               	retlw	69	;'E'
  3442  1AEE  346E               	retlw	110	;'n'
  3443  1AEF  3474               	retlw	116	;'t'
  3444  1AF0  3465               	retlw	101	;'e'
  3445  1AF1  3472               	retlw	114	;'r'
  3446  1AF2  3420               	retlw	32	;' '
  3447  1AF3  3442               	retlw	66	;'B'
  3448  1AF4  3461               	retlw	97	;'a'
  3449  1AF5  3475               	retlw	117	;'u'
  3450  1AF6  3464               	retlw	100	;'d'
  3451  1AF7  3420               	retlw	32	;' '
  3452  1AF8  3472               	retlw	114	;'r'
  3453  1AF9  3461               	retlw	97	;'a'
  3454  1AFA  3474               	retlw	116	;'t'
  3455  1AFB  3465               	retlw	101	;'e'
  3456  1AFC  3420               	retlw	32	;' '
  3457  1AFD  340D               	retlw	13
  3458  1AFE  340A               	retlw	10
  3459  1AFF  3400               	retlw	0
  3460  1B00                     STR_15:	
  3461  1B00  3442               	retlw	66	;'B'
  3462  1B01  3461               	retlw	97	;'a'
  3463  1B02  3475               	retlw	117	;'u'
  3464  1B03  3464               	retlw	100	;'d'
  3465  1B04  3420               	retlw	32	;' '
  3466  1B05  3452               	retlw	82	;'R'
  3467  1B06  3465               	retlw	101	;'e'
  3468  1B07  3473               	retlw	115	;'s'
  3469  1B08  3465               	retlw	101	;'e'
  3470  1B09  3474               	retlw	116	;'t'
  3471  1B0A  3420               	retlw	32	;' '
  3472  1B0B  3474               	retlw	116	;'t'
  3473  1B0C  346F               	retlw	111	;'o'
  3474  1B0D  3420               	retlw	32	;' '
  3475  1B0E  3439               	retlw	57	;'9'
  3476  1B0F  3436               	retlw	54	;'6'
  3477  1B10  3430               	retlw	48	;'0'
  3478  1B11  3430               	retlw	48	;'0'
  3479  1B12  3400               	retlw	0
  3480  1B13                     STR_4:	
  3481  1B13  3446               	retlw	70	;'F'
  3482  1B14  3469               	retlw	105	;'i'
  3483  1B15  3472               	retlw	114	;'r'
  3484  1B16  346D               	retlw	109	;'m'
  3485  1B17  3477               	retlw	119	;'w'
  3486  1B18  3461               	retlw	97	;'a'
  3487  1B19  3472               	retlw	114	;'r'
  3488  1B1A  3465               	retlw	101	;'e'
  3489  1B1B  3420               	retlw	32	;' '
  3490  1B1C  3456               	retlw	86	;'V'
  3491  1B1D  3465               	retlw	101	;'e'
  3492  1B1E  3472               	retlw	114	;'r'
  3493  1B1F  3473               	retlw	115	;'s'
  3494  1B20  3469               	retlw	105	;'i'
  3495  1B21  346F               	retlw	111	;'o'
  3496  1B22  346E               	retlw	110	;'n'
  3497  1B23  343A               	retlw	58	;':'
  3498  1B24  3420               	retlw	32	;' '
  3499  1B25  3400               	retlw	0
  3500  1B26                     STR_11:	
  3501  1B26  3442               	retlw	66	;'B'
  3502  1B27  3461               	retlw	97	;'a'
  3503  1B28  3475               	retlw	117	;'u'
  3504  1B29  3464               	retlw	100	;'d'
  3505  1B2A  3420               	retlw	32	;' '
  3506  1B2B  3469               	retlw	105	;'i'
  3507  1B2C  3473               	retlw	115	;'s'
  3508  1B2D  3420               	retlw	32	;' '
  3509  1B2E  3425               	retlw	37	;'%'
  3510  1B2F  346C               	retlw	108	;'l'
  3511  1B30  3475               	retlw	117	;'u'
  3512  1B31  3400               	retlw	0
  3513  1B32                     STR_2:	
  3514  1B32  3448               	retlw	72	;'H'
  3515  1B33  3469               	retlw	105	;'i'
  3516  1B34  3467               	retlw	103	;'g'
  3517  1B35  3468               	retlw	104	;'h'
  3518  1B36  3421               	retlw	33	;'!'
  3519  1B37  340D               	retlw	13
  3520  1B38  340A               	retlw	10
  3521  1B39  3400               	retlw	0
  3522  1B3A                     STR_1:	
  3523  1B3A  344C               	retlw	76	;'L'
  3524  1B3B  346F               	retlw	111	;'o'
  3525  1B3C  3477               	retlw	119	;'w'
  3526  1B3D  3421               	retlw	33	;'!'
  3527  1B3E  340D               	retlw	13
  3528  1B3F  340A               	retlw	10
  3529  1B40  3400               	retlw	0
  3530  1AFD                     
  3531                           ; #config settings
  3532  0000                     
  3533                           	psect	cinit
  3534  0819                     start_initialization:	
  3535  0819                     __initialization:	
  3536                           
  3537                           ; Clear objects allocated to BANK3
  3538  0819  30D3               	movlw	low __pbssBANK3
  3539  081A  0084               	movwf	4
  3540  081B  3001               	movlw	high __pbssBANK3
  3541  081C  0085               	movwf	5
  3542  081D  301D               	movlw	29
  3543  081E  3184  24D5  3188   	fcall	clear_ram0
  3544                           
  3545                           ; Clear objects allocated to BANK4
  3546  0821  3020               	movlw	low __pbssBANK4
  3547  0822  0084               	movwf	4
  3548  0823  3002               	movlw	high __pbssBANK4
  3549  0824  0085               	movwf	5
  3550  0825  3018               	movlw	24
  3551  0826  3184  24D5  3188   	fcall	clear_ram0
  3552                           
  3553                           ; Initialize objects allocated to BANK4
  3554  0829  0024               	movlb	4	; select bank4
  3555                           
  3556                           ;initializer for _MEM
  3557  082A  3000               	movlw	0
  3558  082B  00B8               	movwf	__pdataBANK4& (0+127)
  3559  082C  00B9               	movwf	(__pdataBANK4+1)& (0+127)
  3560  082D  3080               	movlw	128
  3561  082E  00BA               	movwf	(__pdataBANK4+2)& (0+127)
  3562  082F  3025               	movlw	37
  3563  0830  00BB               	movwf	(__pdataBANK4+3)& (0+127)
  3564  0831                     end_of_initialization:	
  3565                           ;End of C runtime variable initialization code
  3566                           
  3567  0831                     __end_of__initialization:	
  3568  0831  0020               	movlb	0
  3569  0832  283D               	ljmp	_main	;jump to C main() function
  3570  0833                     __ptext9:	
  3571 ;; *************** function _PS_2_INIT *****************
  3572 ;; Defined at:
  3573 ;;		line 106 in file "PS_2.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;		None
  3576 ;; Auto vars:     Size  Location     Type
  3577 ;;		None
  3578 ;; Return value:  Size  Location     Type
  3579 ;;		None               void
  3580 ;; Registers used:
  3581 ;;		wreg, status,2, status,0, pclath, cstack
  3582 ;; Tracked objects:
  3583 ;;		On entry : 1F/3
  3584 ;;		On exit  : 1F/1
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3591 ;;Total ram usage:        0 bytes
  3592 ;; Hardware stack levels used:    1
  3593 ;; Hardware stack levels required when called:   10
  3594 ;; This function calls:
  3595 ;;		_Clock_TRIS
  3596 ;;		_Data_TRIS
  3597 ;;		_Init_PS_2_Send
  3598 ;;		_Timer2Init
  3599 ;; This function is called by:
  3600 ;;		_main
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           
  3605                           ;psect for function _PS_2_INIT
  3606  0833                     _PS_2_INIT:	
  3607                           
  3608                           ;PS_2.c: 109: Clock_TRIS(1);
  3609                           
  3610                           ;incstack = 0
  3611                           ; Regs used in _PS_2_INIT: [wreg+status,2+status,0+pclath+cstack]
  3612  0833  3001               	movlw	1
  3613  0834  22F6  3188         	fcall	_Clock_TRIS
  3614                           
  3615                           ;PS_2.c: 110: Data_TRIS(1);
  3616  0836  3001               	movlw	1
  3617  0837  232D  3188         	fcall	_Data_TRIS
  3618                           
  3619                           ;PS_2.c: 111: Timer2Init(50);
  3620  0839  3032               	movlw	50
  3621  083A  27E9  3188         	fcall	_Timer2Init
  3622                           
  3623                           ;PS_2.c: 112: Init_PS_2_Send();
  3624  083C  29A1               	ljmp	l4948
  3625  083D                     __end_of_PS_2_INIT:	
  3626  083D                     __pmaintext:	
  3627 ;;
  3628 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3629 ;;
  3630 ;; *************** function _main *****************
  3631 ;; Defined at:
  3632 ;;		line 125 in file "main.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;  i               1   50[BANK3 ] unsigned char 
  3637 ;; Return value:  Size  Location     Type
  3638 ;;		None               void
  3639 ;; Registers used:
  3640 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : B1F/0
  3643 ;;		On exit  : 1F/2
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3647 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  3648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3649 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  3650 ;;Total ram usage:        1 bytes
  3651 ;; Hardware stack levels required when called:   11
  3652 ;; This function calls:
  3653 ;;		_ConfigureOscillator
  3654 ;;		_InitApp
  3655 ;;		_Init_System
  3656 ;;		_PS_2_ENABLE_INTERRUPT
  3657 ;;		_PS_2_INIT
  3658 ;;		_ReadVoltage
  3659 ;;		_UARTstringWAIT
  3660 ;;		___ftge
  3661 ;;		_delayUS
  3662 ;; This function is called by:
  3663 ;;		Startup code after reset
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           
  3668                           ;psect for function _main
  3669  083D                     _main:	
  3670                           
  3671                           ;main.c: 129: ConfigureOscillator();
  3672                           
  3673                           ;incstack = 0
  3674                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3675  083D  2338  3188         	fcall	_ConfigureOscillator
  3676                           
  3677                           ;main.c: 130: InitApp();
  3678  083F  2346  3188         	fcall	_InitApp
  3679                           
  3680                           ;main.c: 131: Init_System();
  3681  0841  20BD  3188         	fcall	_Init_System
  3682                           
  3683                           ;main.c: 132: PS_2_INIT();
  3684  0843  2033  3188         	fcall	_PS_2_INIT
  3685                           
  3686                           ;main.c: 135: for(i =0;i<10;i++)
  3687  0845  0023               	movlb	3	; select bank3
  3688  0846  01D2               	clrf	main@i^(0+384)
  3689  0847                     l175:	
  3690                           
  3691                           ;main.c: 136: {
  3692                           ;main.c: 137: LATC |= 0b00010000;
  3693  0847  0022               	movlb	2	; select bank2
  3694  0848  160E               	bsf	14,4	;volatile
  3695                           
  3696                           ;main.c: 138: delayUS(10000);
  3697  0849  23B7  3188         	fcall	PL36	;call to abstracted procedure
  3698  084B  22CF  3188         	fcall	_delayUS
  3699                           
  3700                           ;main.c: 139: LATC &= ~0b00010000;
  3701  084D  0022               	movlb	2	; select bank2
  3702  084E  120E               	bcf	14,4	;volatile
  3703                           
  3704                           ;main.c: 140: delayUS(10000);
  3705  084F  23B7  3188         	fcall	PL36	;call to abstracted procedure
  3706  0851  22CF  3188         	fcall	_delayUS
  3707  0853  300A               	movlw	10
  3708  0854  0AD2               	incf	main@i^(0+384),f
  3709  0855  0252               	subwf	main@i^(0+384),w
  3710  0856  1C03               	skipc
  3711  0857  2847               	goto	l175
  3712                           
  3713                           ;main.c: 141: }
  3714                           ;main.c: 143: BatteryVoltage = ReadVoltage();
  3715  0858  3182  22B3  3188   	fcall	_ReadVoltage
  3716  085B  2397  3188         	fcall	PL20	;call to abstracted procedure
  3717                           
  3718                           ;main.c: 144: if(BatteryVoltage < 6.55 )
  3719  085D  2373  3188         	fcall	PL10	;call to abstracted procedure
  3720  085F  2301  3188         	fcall	___ftge
  3721  0861  1803               	btfsc	3,0
  3722  0862  286B               	goto	l6168
  3723                           
  3724                           ;main.c: 145: {
  3725                           ;main.c: 146: UARTstringWAIT(VoltageMSG);
  3726  0863  23CB  3188         	fcall	PL70	;call to abstracted procedure
  3727  0865  217D  3188         	fcall	_UARTstringWAIT
  3728                           
  3729                           ;main.c: 147: UARTstringWAIT("Low!\r\n");
  3730  0867  303A               	movlw	low (STR_1| (0+32768))
  3731  0868  00AB               	movwf	UARTstringWAIT@data^(0+384)
  3732  0869  309B               	movlw	high (STR_1| (0+32768))
  3733  086A  2878               	goto	L1
  3734  086B                     l6168:	
  3735                           ;main.c: 148: }
  3736                           
  3737                           
  3738                           ;main.c: 149: else if (BatteryVoltage > 30.0)
  3739  086B  2385  3188         	fcall	PL12	;call to abstracted procedure
  3740  086D  2301  3188         	fcall	___ftge
  3741  086F  1803               	btfsc	3,0
  3742  0870  287B               	goto	l6172
  3743                           
  3744                           ;main.c: 150: {
  3745                           ;main.c: 151: UARTstringWAIT(VoltageMSG);
  3746  0871  23CB  3188         	fcall	PL70	;call to abstracted procedure
  3747  0873  217D  3188         	fcall	_UARTstringWAIT
  3748                           
  3749                           ;main.c: 152: UARTstringWAIT("High!\r\n");
  3750  0875  3032               	movlw	low (STR_2| (0+32768))
  3751  0876  00AB               	movwf	UARTstringWAIT@data^(0+384)
  3752  0877  309B               	movlw	high (STR_2| (0+32768))
  3753  0878                     L1:	
  3754  0878  00AC               	movwf	(UARTstringWAIT@data^(0+384)+1)
  3755  0879  217D  3188         	fcall	_UARTstringWAIT
  3756  087B                     l6172:	
  3757                           
  3758                           ;main.c: 153: }
  3759                           ;main.c: 155: PS_2_ENABLE_INTERRUPT(0b00100000);
  3760  087B  3020               	movlw	32
  3761  087C  27D4               	fcall	_PS_2_ENABLE_INTERRUPT
  3762                           
  3763                           ;main.c: 157: PIE1bits.RCIE = 1;
  3764  087D  0021               	movlb	1	; select bank1
  3765  087E  1691               	bsf	17,5	;volatile
  3766  087F                     l6176:	
  3767                           
  3768                           ;main.c: 161: {
  3769                           ;main.c: 162: BatteryVoltage = ReadVoltage();
  3770  087F  3182  22B3  3188   	fcall	_ReadVoltage
  3771  0882  2397  3188         	fcall	PL20	;call to abstracted procedure
  3772                           
  3773                           ;main.c: 163: delayUS(20);
  3774  0884  3014               	movlw	20
  3775  0885  23A3  3188         	fcall	PL22	;call to abstracted procedure
  3776  0887  22CF  3188         	fcall	_delayUS
  3777                           
  3778                           ;main.c: 164: if(BatteryVoltage < 6.55 || BatteryVoltage > 30.0)
  3779  0889  0024               	movlb	4	; select bank4
  3780  088A  2373  3188         	fcall	PL10	;call to abstracted procedure
  3781  088C  2301  3188         	fcall	___ftge
  3782  088E  1C03               	btfss	3,0
  3783  088F  2896               	goto	l183
  3784  0890  2385  3188         	fcall	PL12	;call to abstracted procedure
  3785  0892  2301  3188         	fcall	___ftge
  3786  0894  1803               	btfsc	3,0
  3787  0895  2899               	goto	l6184
  3788  0896                     l183:	
  3789                           
  3790                           ;main.c: 165: {
  3791                           ;main.c: 166: Alarm = 1;
  3792  0896  01DD               	clrf	_Alarm^(0+384)
  3793  0897  0ADD               	incf	_Alarm^(0+384),f
  3794                           
  3795                           ;main.c: 167: }
  3796  0898  289C               	goto	l6188
  3797  0899                     l6184:	
  3798                           
  3799                           ;main.c: 168: else
  3800                           ;main.c: 169: {
  3801                           ;main.c: 170: Alarm = 0;
  3802  0899  01DD               	clrf	_Alarm^(0+384)
  3803                           
  3804                           ;main.c: 171: LATC |= 0b00000010;
  3805  089A  0022               	movlb	2	; select bank2
  3806  089B  148E               	bsf	14,1	;volatile
  3807  089C                     l6188:	
  3808                           
  3809                           ;main.c: 172: }
  3810                           ;main.c: 173: if(Alarm)
  3811  089C  0023               	movlb	3	; select bank3
  3812  089D  085D               	movf	_Alarm^(0+384),w
  3813  089E  1903               	btfsc	3,2
  3814  089F  28AE               	goto	l6198
  3815                           
  3816                           ;main.c: 174: {
  3817                           ;main.c: 175: pwrLEDtoggle++;
  3818  08A0  0024               	movlb	4	; select bank4
  3819  08A1  0AA7               	incf	_pwrLEDtoggle^(0+512),f
  3820  08A2  1903               	skipnz
  3821  08A3  0AA8               	incf	(_pwrLEDtoggle+1)^(0+512),f
  3822                           
  3823                           ;main.c: 176: if(pwrLEDtoggle == 100)
  3824  08A4  3064               	movlw	100
  3825  08A5  0627               	xorwf	_pwrLEDtoggle^(0+512),w
  3826  08A6  0428               	iorwf	(_pwrLEDtoggle+1)^(0+512),w
  3827  08A7  1D03               	btfss	3,2
  3828  08A8  28AE               	goto	l6198
  3829  08A9  3002               	movlw	2
  3830                           
  3831                           ;main.c: 177: {
  3832                           ;main.c: 178: pwrLEDtoggle = 0;
  3833  08AA  01A7               	clrf	_pwrLEDtoggle^(0+512)
  3834  08AB  01A8               	clrf	(_pwrLEDtoggle+1)^(0+512)
  3835                           
  3836                           ;main.c: 179: LATC ^= 0b00000010;
  3837  08AC  0022               	movlb	2	; select bank2
  3838  08AD  068E               	xorwf	14,f	;volatile
  3839  08AE                     l6198:	
  3840                           
  3841                           ;main.c: 180: }
  3842                           ;main.c: 181: }
  3843                           ;main.c: 183: if(SinLEDtimer < 100)
  3844  08AE  3000               	movlw	0
  3845  08AF  0024               	movlb	4	; select bank4
  3846  08B0  0226               	subwf	(_SinLEDtimer+1)^(0+512),w
  3847  08B1  3064               	movlw	100
  3848  08B2  1903               	skipnz
  3849  08B3  0225               	subwf	_SinLEDtimer^(0+512),w
  3850  08B4  1803               	skipnc
  3851  08B5  28BA               	goto	l187
  3852                           
  3853                           ;main.c: 184: {
  3854                           ;main.c: 185: SinLEDtimer++;
  3855  08B6  0AA5               	incf	_SinLEDtimer^(0+512),f
  3856  08B7  1903               	skipnz
  3857  08B8  0AA6               	incf	(_SinLEDtimer+1)^(0+512),f
  3858                           
  3859                           ;main.c: 186: }
  3860  08B9  287F               	goto	l6176
  3861  08BA                     l187:	
  3862                           
  3863                           ;main.c: 187: else
  3864                           ;main.c: 188: {
  3865                           ;main.c: 189: LATC &= ~0b00001000;
  3866  08BA  0022               	movlb	2	; select bank2
  3867  08BB  118E               	bcf	14,3	;volatile
  3868  08BC  287F               	goto	l6176
  3869  08BD                     __end_of_main:	
  3870  08BD                     __ptext19:	
  3871 ;; *************** function _Init_System *****************
  3872 ;; Defined at:
  3873 ;;		line 103 in file "user.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;		None
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;  Baud            4   42[BANK3 ] unsigned long 
  3878 ;;  temp            4   38[BANK3 ] unsigned long 
  3879 ;;  Parity          1   46[BANK3 ] unsigned char 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;		None               void
  3882 ;; Registers used:
  3883 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3884 ;; Tracked objects:
  3885 ;;		On entry : B1F/4
  3886 ;;		On exit  : 1F/3
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3890 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  3891 ;;      Temps:          0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3892 ;;      Totals:         0       0       0       0      13       0       0       0       0       0       0       0       
      +0       0
  3893 ;;Total ram usage:       13 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:   10
  3896 ;; This function calls:
  3897 ;;		_InitUART
  3898 ;;		_ReadBaud
  3899 ;;		_UARTstringWAIT
  3900 ;;		_delayUS
  3901 ;; This function is called by:
  3902 ;;		_main
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           
  3907                           ;psect for function _Init_System
  3908  08BD                     _Init_System:	
  3909                           
  3910                           ;user.c: 106: unsigned long Baud =0;
  3911                           
  3912                           ;incstack = 0
  3913                           ; Regs used in _Init_System: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3914  08BD  0023               	movlb	3	; select bank3
  3915  08BE  30C0               	movlw	192
  3916  08BF  01CA               	clrf	Init_System@Baud^(0+384)
  3917  08C0  01CB               	clrf	(Init_System@Baud+1)^(0+384)
  3918  08C1  01CC               	clrf	(Init_System@Baud+2)^(0+384)
  3919  08C2  01CD               	clrf	(Init_System@Baud+3)^(0+384)
  3920                           
  3921                           ;user.c: 109: temp = ReadBaud((0x1800 >> 5),0);
  3922  08C3  00B2               	movwf	ReadBaud@row^(0+384)
  3923  08C4  01B3               	clrf	(ReadBaud@row+1)^(0+384)
  3924  08C5  01B4               	clrf	ReadBaud@column^(0+384)
  3925  08C6  2716  3188         	fcall	_ReadBaud
  3926  08C8  0835               	movf	(?_ReadBaud+3)^(0+384),w
  3927  08C9  00C9               	movwf	(Init_System@temp+3)^(0+384)
  3928  08CA  0834               	movf	(?_ReadBaud+2)^(0+384),w
  3929  08CB  00C8               	movwf	(Init_System@temp+2)^(0+384)
  3930  08CC  0833               	movf	(?_ReadBaud+1)^(0+384),w
  3931  08CD  00C7               	movwf	(Init_System@temp+1)^(0+384)
  3932  08CE  0832               	movf	?_ReadBaud^(0+384),w
  3933  08CF  00C6               	movwf	Init_System@temp^(0+384)
  3934                           
  3935                           ;user.c: 110: Baud = temp & 0x000FFFFF;
  3936  08D0  0849               	movf	(Init_System@temp+3)^(0+384),w
  3937  08D1  00CD               	movwf	(Init_System@Baud+3)^(0+384)
  3938  08D2  0848               	movf	(Init_System@temp+2)^(0+384),w
  3939  08D3  00CC               	movwf	(Init_System@Baud+2)^(0+384)
  3940  08D4  0847               	movf	(Init_System@temp+1)^(0+384),w
  3941  08D5  00CB               	movwf	(Init_System@Baud+1)^(0+384)
  3942  08D6  0846               	movf	Init_System@temp^(0+384),w
  3943  08D7  00CA               	movwf	Init_System@Baud^(0+384)
  3944  08D8  30FF               	movlw	255
  3945  08D9  05CA               	andwf	Init_System@Baud^(0+384),f
  3946  08DA  05CB               	andwf	(Init_System@Baud+1)^(0+384),f
  3947  08DB  300F               	movlw	15
  3948  08DC  05CC               	andwf	(Init_System@Baud+2)^(0+384),f
  3949  08DD  01CD               	clrf	(Init_System@Baud+3)^(0+384)
  3950                           
  3951                           ;user.c: 111: Parity = (unsigned char)((temp & 0x00F00000) >> 20);
  3952  08DE  0846               	movf	Init_System@temp^(0+384),w
  3953  08DF  00C2               	movwf	??_Init_System^(0+384)
  3954  08E0  0847               	movf	(Init_System@temp+1)^(0+384),w
  3955  08E1  00C3               	movwf	(??_Init_System^(0+384)+1)
  3956  08E2  0848               	movf	(Init_System@temp+2)^(0+384),w
  3957  08E3  00C4               	movwf	(??_Init_System^(0+384)+2)
  3958  08E4  0849               	movf	(Init_System@temp+3)^(0+384),w
  3959  08E5  00C5               	movwf	(??_Init_System^(0+384)+3)
  3960  08E6  3014               	movlw	20
  3961  08E7                     u6625:	
  3962  08E7  36C5               	lsrf	(??_Init_System^(0+384)+3),f
  3963  08E8  0CC4               	rrf	(??_Init_System^(0+384)+2),f
  3964  08E9  0CC3               	rrf	(??_Init_System^(0+384)+1),f
  3965  08EA  0CC2               	rrf	??_Init_System^(0+384),f
  3966  08EB  0B89               	decfsz	9,f
  3967  08EC  28E7               	goto	u6625
  3968  08ED  0842               	movf	??_Init_System^(0+384),w
  3969  08EE  00CE               	movwf	Init_System@Parity^(0+384)
  3970  08EF  300F               	movlw	15
  3971  08F0  05CE               	andwf	Init_System@Parity^(0+384),f
  3972                           
  3973                           ;user.c: 112: if(Baud <2400 || Baud > 115200)
  3974  08F1  084D               	movf	(Init_System@Baud+3)^(0+384),w
  3975  08F2  1D03               	btfss	3,2
  3976  08F3  28FD               	goto	l5930
  3977  08F4  084C               	movf	(Init_System@Baud+2)^(0+384),w
  3978  08F5  1D03               	btfss	3,2
  3979  08F6  28FD               	goto	l5930
  3980  08F7  3060               	movlw	96
  3981  08F8  024A               	subwf	Init_System@Baud^(0+384),w
  3982  08F9  3009               	movlw	9
  3983  08FA  3B4B               	subwfb	(Init_System@Baud+1)^(0+384),w
  3984  08FB  1C03               	btfss	3,0
  3985  08FC  2908               	goto	l5932
  3986  08FD                     l5930:	
  3987  08FD  084D               	movf	(Init_System@Baud+3)^(0+384),w
  3988  08FE  1D03               	btfss	3,2
  3989  08FF  2908               	goto	l5932
  3990  0900  3001               	movlw	1
  3991  0901  024A               	subwf	Init_System@Baud^(0+384),w
  3992  0902  30C2               	movlw	194
  3993  0903  3B4B               	subwfb	(Init_System@Baud+1)^(0+384),w
  3994  0904  3001               	movlw	1
  3995  0905  3B4C               	subwfb	(Init_System@Baud+2)^(0+384),w
  3996  0906  1C03               	btfss	3,0
  3997  0907  290F               	goto	l5936
  3998  0908                     l5932:	
  3999                           
  4000                           ;user.c: 113: {
  4001                           ;user.c: 115: Baud = 9600;
  4002  0908  3025               	movlw	37
  4003  0909  01CD               	clrf	(Init_System@Baud+3)^(0+384)
  4004  090A  01CC               	clrf	(Init_System@Baud+2)^(0+384)
  4005  090B  00CB               	movwf	(Init_System@Baud+1)^(0+384)
  4006  090C  3080               	movlw	128
  4007  090D  00CA               	movwf	Init_System@Baud^(0+384)
  4008                           
  4009                           ;user.c: 116: Parity = 0;
  4010  090E  01CE               	clrf	Init_System@Parity^(0+384)
  4011  090F                     l5936:	
  4012                           
  4013                           ;user.c: 117: }
  4014                           ;user.c: 118: InitUART(Baud, Parity);
  4015  090F  084D               	movf	(Init_System@Baud+3)^(0+384),w
  4016  0910  00B0               	movwf	(InitUART@Baud+3)^(0+384)
  4017  0911  084C               	movf	(Init_System@Baud+2)^(0+384),w
  4018  0912  00AF               	movwf	(InitUART@Baud+2)^(0+384)
  4019  0913  084B               	movf	(Init_System@Baud+1)^(0+384),w
  4020  0914  00AE               	movwf	(InitUART@Baud+1)^(0+384)
  4021  0915  084A               	movf	Init_System@Baud^(0+384),w
  4022  0916  00AD               	movwf	InitUART@Baud^(0+384)
  4023  0917  084E               	movf	Init_System@Parity^(0+384),w
  4024  0918  00B1               	movwf	InitUART@parity^(0+384)
  4025  0919  23D0  3188         	fcall	_InitUART
  4026                           
  4027                           ;user.c: 121: delayUS(15000);
  4028  091B  3000               	movlw	0
  4029  091C  0023               	movlb	3	; select bank3
  4030  091D  23BF  3188         	fcall	PL44	;call to abstracted procedure
  4031  091F  22CF  3188         	fcall	_delayUS
  4032                           
  4033                           ;user.c: 122: UARTstringWAIT("\r\nPS/2 Keyboard to RS-232\r\n");
  4034  0921  3090               	movlw	low (STR_3| (0+32768))
  4035  0922  00AB               	movwf	UARTstringWAIT@data^(0+384)
  4036  0923  309A               	movlw	high (STR_3| (0+32768))
  4037  0924  00AC               	movwf	(UARTstringWAIT@data^(0+384)+1)
  4038  0925  217D  3188         	fcall	_UARTstringWAIT
  4039                           
  4040                           ;user.c: 123: delayUS(15000);
  4041  0927  3000               	movlw	0
  4042  0928  23BF  3188         	fcall	PL44	;call to abstracted procedure
  4043  092A  22CF  3188         	fcall	_delayUS
  4044                           
  4045                           ;user.c: 124: UARTstringWAIT("Firmware Version: ");
  4046  092C  3013               	movlw	low (STR_4| (0+32768))
  4047  092D  00AB               	movwf	UARTstringWAIT@data^(0+384)
  4048  092E  309B               	movlw	high (STR_4| (0+32768))
  4049  092F  00AC               	movwf	(UARTstringWAIT@data^(0+384)+1)
  4050  0930  217D  3188         	fcall	_UARTstringWAIT
  4051                           
  4052                           ;user.c: 125: UARTstringWAIT(Version);
  4053  0932  3066               	movlw	low (_Version| (0+32768))
  4054  0933  00AB               	movwf	UARTstringWAIT@data^(0+384)
  4055  0934  309A               	movlw	high (_Version| (0+32768))
  4056  0935  00AC               	movwf	(UARTstringWAIT@data^(0+384)+1)
  4057  0936  217D  3188         	fcall	_UARTstringWAIT
  4058                           
  4059                           ;user.c: 126: UARTstringWAIT("\r\n");
  4060  0938  23C6  3188         	fcall	PL68	;call to abstracted procedure
  4061  093A  217D  3188         	fcall	_UARTstringWAIT
  4062                           
  4063                           ;user.c: 127: delayUS(15000);
  4064  093C  23A9  3188         	fcall	PL24	;call to abstracted procedure
  4065  093E  22CF  3188         	fcall	_delayUS
  4066                           
  4067                           ;user.c: 128: UARTstringWAIT("Change BAUD: \"CNT + ALT + DEL\"\r\n");
  4068  0940  306F               	movlw	low (STR_6| (0+32768))
  4069  0941  00AB               	movwf	UARTstringWAIT@data^(0+384)
  4070  0942  309A               	movlw	high (STR_6| (0+32768))
  4071  0943  00AC               	movwf	(UARTstringWAIT@data^(0+384)+1)
  4072  0944  217D  3188         	fcall	_UARTstringWAIT
  4073                           
  4074                           ;user.c: 129: delayUS(15000);
  4075  0946  23A9  3188         	fcall	PL24	;call to abstracted procedure
  4076  0948  22CF  3188         	fcall	_delayUS
  4077                           
  4078                           ;user.c: 130: UARTstringWAIT("\r\n");
  4079  094A  23C6  3188         	fcall	PL68	;call to abstracted procedure
  4080  094C  217D  3188         	fcall	_UARTstringWAIT
  4081                           
  4082                           ;user.c: 132: if(Parity)
  4083  094E  084E               	movf	Init_System@Parity^(0+384),w
  4084  094F  1D03               	btfss	3,2
  4085  0950  2962               	goto	l5972
  4086  0951  296D               	goto	l5974
  4087  0952                     l5962:	
  4088                           
  4089                           ;user.c: 137: UARTstringWAIT(OddParityMSG);
  4090  0952  3011               	movlw	low (_OddParityMSG| (0+32768))
  4091  0953  00AB               	movwf	UARTstringWAIT@data^(0+384)
  4092  0954  309A               	movlw	high (_OddParityMSG| (0+32768))
  4093  0955  2970               	goto	L3
  4094  0956                     l5964:	
  4095                           ;user.c: 138: break;
  4096                           
  4097                           
  4098                           ;user.c: 140: UARTstringWAIT(EvenParityMSG);
  4099  0956  30FB               	movlw	low (_EvenParityMSG| (0+32768))
  4100  0957  00AB               	movwf	UARTstringWAIT@data^(0+384)
  4101  0958  3099               	movlw	high (_EvenParityMSG| (0+32768))
  4102  0959  2970               	goto	L3
  4103  095A                     l5966:	
  4104                           ;user.c: 141: break;
  4105                           
  4106                           
  4107                           ;user.c: 143: UARTstringWAIT(MarkParityMSG);
  4108  095A  304A               	movlw	low (_MarkParityMSG| (0+32768))
  4109  095B  00AB               	movwf	UARTstringWAIT@data^(0+384)
  4110  095C  309A               	movlw	high (_MarkParityMSG| (0+32768))
  4111  095D  2970               	goto	L3
  4112  095E                     l5968:	
  4113                           ;user.c: 144: break;
  4114                           
  4115                           
  4116                           ;user.c: 146: UARTstringWAIT(SpaceParityMSG);
  4117  095E  303A               	movlw	low (_SpaceParityMSG| (0+32768))
  4118  095F  00AB               	movwf	UARTstringWAIT@data^(0+384)
  4119  0960  309A               	movlw	high (_SpaceParityMSG| (0+32768))
  4120  0961  2970               	goto	L3
  4121  0962                     l5972:	
  4122                           ;user.c: 147: break;
  4123                           
  4124  0962  084E               	movf	Init_System@Parity^(0+384),w
  4125                           
  4126                           ; Switch size 1, requested type "space"
  4127                           ; Number of cases is 3, Range of values is 1 to 3
  4128                           ; switch strategies available:
  4129                           ; Name         Instructions Cycles
  4130                           ; simple_byte           10     6 (average)
  4131                           ; direct_byte           15     9 (fixed)
  4132                           ; jumptable            263     9 (fixed)
  4133                           ;	Chosen strategy is simple_byte
  4134  0963  3A01               	xorlw	1	; case 1
  4135  0964  1903               	skipnz
  4136  0965  2952               	goto	l5962
  4137  0966  3A03               	xorlw	3	; case 2
  4138  0967  1903               	skipnz
  4139  0968  2956               	goto	l5964
  4140  0969  3A01               	xorlw	1	; case 3
  4141  096A  1903               	skipnz
  4142  096B  295A               	goto	l5966
  4143  096C  295E               	goto	l5968
  4144  096D                     l5974:	
  4145                           
  4146                           ;user.c: 150: else
  4147                           ;user.c: 151: {
  4148                           ;user.c: 152: UARTstringWAIT(NoParityMSG);
  4149  096D  3026               	movlw	low (_NoParityMSG| (0+32768))
  4150  096E  00AB               	movwf	UARTstringWAIT@data^(0+384)
  4151  096F  309A               	movlw	high (_NoParityMSG| (0+32768))
  4152  0970                     L3:	
  4153  0970  00AC               	movwf	(UARTstringWAIT@data^(0+384)+1)
  4154  0971  217D  3188         	fcall	_UARTstringWAIT
  4155                           
  4156                           ;user.c: 153: }
  4157                           ;user.c: 154: UARTstringWAIT("\r\n");
  4158  0973  23C6  3188         	fcall	PL68	;call to abstracted procedure
  4159  0975  217D  3188         	fcall	_UARTstringWAIT
  4160                           
  4161                           ;user.c: 155: delayUS(15000);
  4162  0977  23A9  3188         	fcall	PL24	;call to abstracted procedure
  4163  0979  22CF               	fcall	_delayUS
  4164                           
  4165                           ;user.c: 156: INTCON |= 0x08;
  4166  097A  158B               	bsf	11,3	;volatile
  4167                           
  4168                           ;user.c: 157: INTCONbits.GIE = 1;
  4169  097B  178B               	bsf	11,7	;volatile
  4170  097C  0008               	return
  4171  097D                     __end_of_Init_System:	
  4172  097D                     __ptext20:	
  4173 ;; *************** function _UARTstringWAIT *****************
  4174 ;; Defined at:
  4175 ;;		line 366 in file "UART.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  data            2   11[BANK3 ] PTR const unsigned char 
  4178 ;;		 -> STR_20(20), STR_19(3), Process_PS2_ScanCode@buf(60), STR_17(3), 
  4179 ;;		 -> STR_16(3), STR_15(19), STR_14(19), STR_13(3), 
  4180 ;;		 -> STR_12(3), SetBaud@buf(50), STR_10(21), STR_9(3), 
  4181 ;;		 -> STR_8(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
  4182 ;;		 -> EvenParityMSG(22), OddParityMSG(21), STR_7(3), STR_6(33), 
  4183 ;;		 -> STR_5(3), Version(9), STR_4(19), STR_3(28), 
  4184 ;;		 -> STR_2(8), STR_1(7), VoltageMSG(13), 
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;		None
  4187 ;; Return value:  Size  Location     Type
  4188 ;;		None               void
  4189 ;; Registers used:
  4190 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : 1F/3
  4193 ;;		On exit  : 1F/3
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4196 ;;      Params:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4198 ;;      Temps:          0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  4199 ;;      Totals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  4200 ;;Total ram usage:        5 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    9
  4203 ;; This function calls:
  4204 ;;		_UARTchar
  4205 ;;		_delayUS
  4206 ;; This function is called by:
  4207 ;;		_main
  4208 ;;		_Init_System
  4209 ;; This function uses a non-reentrant model
  4210 ;;
  4211                           
  4212                           
  4213                           ;psect for function _UARTstringWAIT
  4214  097D                     _UARTstringWAIT:	
  4215  097D                     l474:	
  4216                           ;incstack = 0
  4217                           ; Regs used in _UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4218                           ;UART.c: 368: do
  4219                           
  4220                           
  4221                           ;UART.c: 369: {
  4222                           ;UART.c: 370: delayUS(5000);
  4223  097D  23B0  3188         	fcall	PL28	;call to abstracted procedure
  4224  097F  22CF  3188         	fcall	_delayUS
  4225                           
  4226                           ;UART.c: 371: if(*data != 0)
  4227  0981  082B               	movf	UARTstringWAIT@data^(0+384),w
  4228  0982  0084               	movwf	4
  4229  0983  082C               	movf	(UARTstringWAIT@data+1)^(0+384),w
  4230  0984  0085               	movwf	5
  4231  0985  0012               	moviw fsr0++
  4232  0986  1903               	btfsc	3,2
  4233  0987  2993               	goto	l4730
  4234                           
  4235                           ;UART.c: 372: {
  4236                           ;UART.c: 373: UARTchar(*data, 0, 0);
  4237  0988  01A7               	clrf	UARTchar@override^(0+384)
  4238  0989  01A8               	clrf	UARTchar@NinethBit_override_data^(0+384)
  4239  098A  082B               	movf	UARTstringWAIT@data^(0+384),w
  4240  098B  0084               	movwf	4
  4241  098C  082C               	movf	(UARTstringWAIT@data+1)^(0+384),w
  4242  098D  0085               	movwf	5
  4243  098E  0800               	movf	0,w	;code access
  4244  098F  26B8  3188         	fcall	_UARTchar
  4245  0991                     l476:	
  4246                           ;UART.c: 374: while((!TX1STAbits.TRMT));
  4247                           
  4248  0991  1C9E               	btfss	30,1	;volatile
  4249  0992  2991               	goto	l476
  4250  0993                     l4730:	
  4251                           
  4252                           ;UART.c: 375: }
  4253                           ;UART.c: 376: } while( *data++);
  4254  0993  082C               	movf	(UARTstringWAIT@data+1)^(0+384),w
  4255  0994  00AE               	movwf	(??_UARTstringWAIT^(0+384)+1)
  4256  0995  082B               	movf	UARTstringWAIT@data^(0+384),w
  4257  0996  00AD               	movwf	??_UARTstringWAIT^(0+384)
  4258  0997  0AAB               	incf	UARTstringWAIT@data^(0+384),f
  4259  0998  1903               	skipnz
  4260  0999  0AAC               	incf	(UARTstringWAIT@data+1)^(0+384),f
  4261  099A  0084               	movwf	4
  4262  099B  082E               	movf	(??_UARTstringWAIT+1)^(0+384),w
  4263  099C  0085               	movwf	5
  4264  099D  0012               	moviw fsr0++
  4265  099E  1903               	btfsc	3,2
  4266  099F  0008               	return
  4267  09A0  297D               	goto	l474
  4268  09A1                     __end_of_UARTstringWAIT:	
  4269  09A1                     __ptext12:	
  4270 ;; *************** function _Init_PS_2_Send *****************
  4271 ;; Defined at:
  4272 ;;		line 1021 in file "PS_2.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;		None
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;		None
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  1    wreg      unsigned char 
  4279 ;; Registers used:
  4280 ;;		wreg, status,2, status,0, pclath, cstack
  4281 ;; Tracked objects:
  4282 ;;		On entry : 1F/1
  4283 ;;		On exit  : 1F/1
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;Total ram usage:        0 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    9
  4293 ;; This function calls:
  4294 ;;		_PS_2_DISABLE_INTERRUPT
  4295 ;;		_Send_PS2
  4296 ;;		_delayUS
  4297 ;; This function is called by:
  4298 ;;		_PS_2_INIT
  4299 ;; This function uses a non-reentrant model
  4300 ;;
  4301                           
  4302                           
  4303                           ;psect for function _Init_PS_2_Send
  4304  09A1                     _Init_PS_2_Send:	
  4305  09A1                     l4948:	
  4306                           ;incstack = 0
  4307                           ; Regs used in _Init_PS_2_Send: [wreg+status,2+status,0+pclath+cstack]
  4308                           
  4309                           
  4310                           ;PS_2.c: 1023: PS_2_DISABLE_INTERRUPT(0b00100000);
  4311  09A1  3020               	movlw	32
  4312  09A2  27DE  3188         	fcall	_PS_2_DISABLE_INTERRUPT
  4313                           
  4314                           ;PS_2.c: 1026: if(Send_PS2(0x07))
  4315  09A4  3007               	movlw	7
  4316  09A5  21EA  3188         	fcall	_Send_PS2
  4317  09A7  3A00               	xorlw	0
  4318  09A8  1D03               	btfss	3,2
  4319  09A9  0008               	return
  4320                           
  4321                           ;PS_2.c: 1029: }
  4322                           ;PS_2.c: 1030: delayUS(5000);
  4323  09AA  0023               	movlb	3	; select bank3
  4324  09AB  23B0  3188         	fcall	PL28	;call to abstracted procedure
  4325  09AD  22CF  3188         	fcall	_delayUS
  4326                           
  4327                           ;PS_2.c: 1033: if(Send_PS2(0xED))
  4328  09AF  30ED               	movlw	237
  4329  09B0  21EA  3188         	fcall	_Send_PS2
  4330  09B2  3A00               	xorlw	0
  4331  09B3  1D03               	btfss	3,2
  4332  09B4  0008               	return
  4333                           
  4334                           ;PS_2.c: 1036: }
  4335                           ;PS_2.c: 1037: delayUS(5000);
  4336  09B5  0023               	movlb	3	; select bank3
  4337  09B6  23B0  3188         	fcall	PL28	;call to abstracted procedure
  4338  09B8  22CF  3188         	fcall	_delayUS
  4339                           
  4340                           ;PS_2.c: 1038: if(Send_PS2(0x00))
  4341  09BA  3000               	movlw	0
  4342  09BB  21EA  3188         	fcall	_Send_PS2
  4343  09BD  3A00               	xorlw	0
  4344  09BE  1D03               	btfss	3,2
  4345  09BF  0008               	return
  4346                           
  4347                           ;PS_2.c: 1041: }
  4348                           ;PS_2.c: 1044: if(Send_PS2(0xf4))
  4349  09C0  30F4               	movlw	244
  4350  09C1  21EA  3188         	fcall	_Send_PS2
  4351  09C3  3A00               	xorlw	0
  4352  09C4  1D03               	btfss	3,2
  4353  09C5  0008               	return
  4354                           
  4355                           ;PS_2.c: 1047: }
  4356                           ;PS_2.c: 1050: if(Send_PS2(0xf4))
  4357  09C6  30F4               	movlw	244
  4358  09C7  21EA  3188         	fcall	_Send_PS2
  4359  09C9  3A00               	xorlw	0
  4360  09CA  1D03               	btfss	3,2
  4361  09CB  0008               	return
  4362                           
  4363                           ;PS_2.c: 1053: }
  4364                           ;PS_2.c: 1056: if(Send_PS2(0xf0))
  4365  09CC  30F0               	movlw	240
  4366  09CD  21EA  3188         	fcall	_Send_PS2
  4367  09CF  3A00               	xorlw	0
  4368  09D0  1D03               	btfss	3,2
  4369  09D1  0008               	return
  4370                           
  4371                           ;PS_2.c: 1059: }
  4372                           ;PS_2.c: 1060: delayUS(100);
  4373  09D2  3064               	movlw	100
  4374  09D3  23A3  3188         	fcall	PL22	;call to abstracted procedure
  4375  09D5  22CF  3188         	fcall	_delayUS
  4376                           
  4377                           ;PS_2.c: 1061: if(Send_PS2(0x02))
  4378  09D7  3002               	movlw	2
  4379  09D8  21EA  3188         	fcall	_Send_PS2
  4380  09DA  3A00               	xorlw	0
  4381  09DB  1D03               	btfss	3,2
  4382  09DC  0008               	return
  4383                           
  4384                           ;PS_2.c: 1064: }
  4385                           ;PS_2.c: 1067: if(Send_PS2(0xf3))
  4386  09DD  30F3               	movlw	243
  4387  09DE  21EA  3188         	fcall	_Send_PS2
  4388  09E0  3A00               	xorlw	0
  4389  09E1  1D03               	btfss	3,2
  4390  09E2  0008               	return
  4391                           
  4392                           ;PS_2.c: 1070: }
  4393                           ;PS_2.c: 1071: delayUS(100);
  4394  09E3  3064               	movlw	100
  4395  09E4  23A3  3188         	fcall	PL22	;call to abstracted procedure
  4396  09E6  22CF  3188         	fcall	_delayUS
  4397                           
  4398                           ;PS_2.c: 1072: if(Send_PS2(0x2F))
  4399  09E8  302F               	movlw	47
  4400  09E9  29EA               	ljmp	_Send_PS2
  4401  09EA                     __end_of_Init_PS_2_Send:	
  4402  09EA                     __ptext13:	
  4403 ;; *************** function _Send_PS2 *****************
  4404 ;; Defined at:
  4405 ;;		line 856 in file "PS_2.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;  command         1    wreg     unsigned char 
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;  command         1   11[BANK3 ] unsigned char 
  4410 ;;  timeout         2   13[BANK3 ] unsigned int 
  4411 ;;  i               1   12[BANK3 ] unsigned char 
  4412 ;;  oddparity       1   10[BANK3 ] unsigned char 
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      unsigned char 
  4415 ;; Registers used:
  4416 ;;		wreg, status,2, status,0, pclath, cstack
  4417 ;; Tracked objects:
  4418 ;;		On entry : 19/7
  4419 ;;		On exit  : 1F/1
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4423 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  4424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4425 ;;      Totals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  4426 ;;Total ram usage:        5 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; Hardware stack levels required when called:    8
  4429 ;; This function calls:
  4430 ;;		_CheckSum_byte
  4431 ;;		_Clock_TRIS
  4432 ;;		_Data_TRIS
  4433 ;;		_READ_PS_2_PIN
  4434 ;;		_delayUS
  4435 ;; This function is called by:
  4436 ;;		_Init_PS_2_Send
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           
  4441                           ;psect for function _Send_PS2
  4442  09EA                     _Send_PS2:	
  4443                           
  4444                           ;incstack = 0
  4445                           ; Regs used in _Send_PS2: [wreg+status,2+status,0+pclath+cstack]
  4446                           ;Send_PS2@command stored from wreg
  4447  09EA  0023               	movlb	3	; select bank3
  4448  09EB  00AB               	movwf	Send_PS2@command^(0+384)
  4449                           
  4450                           ;PS_2.c: 859: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
  4451  09EC  2711  3188         	fcall	PL82	;call to abstracted procedure
  4452  09EE  26F8  3188         	fcall	_CheckSum_byte
  4453  09F0  00AA               	movwf	Send_PS2@oddparity^(0+384)
  4454                           
  4455                           ;PS_2.c: 862: Clock_TRIS(0);
  4456  09F1  3000               	movlw	0
  4457  09F2  22F6  3188         	fcall	_Clock_TRIS
  4458                           
  4459                           ;PS_2.c: 863: Data_TRIS(0);
  4460  09F4  3000               	movlw	0
  4461  09F5  232D  3188         	fcall	_Data_TRIS
  4462                           
  4463                           ;PS_2.c: 864: LATA &= ~0b00100000;
  4464  09F7  0022               	movlb	2	; select bank2
  4465  09F8  128C               	bcf	12,5	;volatile
  4466                           
  4467                           ;PS_2.c: 865: delayUS(300);
  4468  09F9  0023               	movlb	3	; select bank3
  4469  09FA  3001               	movlw	1
  4470  09FB  01A3               	clrf	(delayUS@US+3)^(0+384)
  4471  09FC  01A2               	clrf	(delayUS@US+2)^(0+384)
  4472  09FD  00A1               	movwf	(delayUS@US+1)^(0+384)
  4473  09FE  302C               	movlw	44
  4474  09FF  00A0               	movwf	delayUS@US^(0+384)
  4475  0A00  22CF  3188         	fcall	_delayUS
  4476                           
  4477                           ;PS_2.c: 866: LATA &= ~0b00010000;
  4478  0A02  0022               	movlb	2	; select bank2
  4479  0A03  120C               	bcf	12,4	;volatile
  4480                           
  4481                           ;PS_2.c: 867: delayUS(20);
  4482  0A04  3014               	movlw	20
  4483  0A05  23A3  3188         	fcall	PL22	;call to abstracted procedure
  4484  0A07  22CF  3188         	fcall	_delayUS
  4485                           
  4486                           ;PS_2.c: 868: Clock_TRIS(1);
  4487  0A09  3001               	movlw	1
  4488  0A0A  22F6  3188         	fcall	_Clock_TRIS
  4489                           
  4490                           ;PS_2.c: 869: timeout=0;
  4491  0A0C  0023               	movlb	3	; select bank3
  4492  0A0D  01AD               	clrf	Send_PS2@timeout^(0+384)
  4493  0A0E  01AE               	clrf	(Send_PS2@timeout+1)^(0+384)
  4494  0A0F                     l4394:	
  4495                           ;PS_2.c: 870: while(READ_PS_2_PIN(0b00100000))
  4496                           
  4497  0A0F  3020               	movlw	32
  4498  0A10  22C3  3188         	fcall	_READ_PS_2_PIN
  4499  0A12  3A00               	xorlw	0
  4500  0A13  1903               	btfsc	3,2
  4501  0A14  2A22               	goto	l4396
  4502                           
  4503                           ;PS_2.c: 871: {
  4504                           ;PS_2.c: 872: __nop();
  4505  0A15  0000               	nop
  4506                           
  4507                           ;PS_2.c: 873: timeout++;
  4508                           
  4509                           ;PS_2.c: 874: if(timeout > 15000)
  4510  0A16  235F  3188         	fcall	PL2	;call to abstracted procedure
  4511  0A18  1903               	skipnz
  4512  0A19  022D               	subwf	Send_PS2@timeout^(0+384),w
  4513  0A1A  1C03               	skipc
  4514  0A1B  2A0F               	goto	l4394
  4515  0A1C                     l4388:	
  4516                           
  4517                           ;PS_2.c: 875: {
  4518                           ;PS_2.c: 876: Clock_TRIS(1);
  4519  0A1C  3001               	movlw	1
  4520  0A1D  22F6  3188         	fcall	_Clock_TRIS
  4521                           
  4522                           ;PS_2.c: 877: Data_TRIS(1);
  4523  0A1F  3001               	movlw	1
  4524  0A20  232D               	fcall	_Data_TRIS
  4525                           
  4526                           ;PS_2.c: 878: return 1;
  4527  0A21  3401               	retlw	1
  4528  0A22                     l4396:	
  4529                           
  4530                           ;PS_2.c: 879: }
  4531                           ;PS_2.c: 880: }
  4532                           ;PS_2.c: 881: for(i=0;i<8;i++)
  4533  0A22  0023               	movlb	3	; select bank3
  4534  0A23  01AC               	clrf	Send_PS2@i^(0+384)
  4535  0A24                     l870:	
  4536                           
  4537                           ;PS_2.c: 882: {
  4538                           ;PS_2.c: 883: if(command & 0x1)
  4539  0A24  1C2B               	btfss	Send_PS2@command^(0+384),0
  4540  0A25  2A29               	goto	l872
  4541                           
  4542                           ;PS_2.c: 884: {
  4543                           ;PS_2.c: 885: LATA |= 0b00010000;
  4544  0A26  0022               	movlb	2	; select bank2
  4545  0A27  160C               	bsf	12,4	;volatile
  4546                           
  4547                           ;PS_2.c: 886: }
  4548  0A28  2A2B               	goto	l873
  4549  0A29                     l872:	
  4550                           
  4551                           ;PS_2.c: 887: else
  4552                           ;PS_2.c: 888: {
  4553                           ;PS_2.c: 889: LATA &= ~0b00010000;
  4554  0A29  0022               	movlb	2	; select bank2
  4555  0A2A  120C               	bcf	12,4	;volatile
  4556  0A2B                     l873:	
  4557                           
  4558                           ;PS_2.c: 890: }
  4559                           ;PS_2.c: 891: command >> = 1;
  4560  0A2B  0023               	movlb	3	; select bank3
  4561  0A2C  36AB               	lsrf	Send_PS2@command^(0+384),f
  4562                           
  4563                           ;PS_2.c: 892: timeout=0;
  4564  0A2D  01AD               	clrf	Send_PS2@timeout^(0+384)
  4565  0A2E  01AE               	clrf	(Send_PS2@timeout+1)^(0+384)
  4566  0A2F                     l4416:	
  4567                           ;PS_2.c: 899: Data_TRIS(1);
  4568                           
  4569                           ;PS_2.c: 897: {
  4570                           ;PS_2.c: 898: Clock_TRIS(1);
  4571                           
  4572                           ;PS_2.c: 893: while(!READ_PS_2_PIN(0b00100000))
  4573                           
  4574  0A2F  3020               	movlw	32
  4575  0A30  22C3  3188         	fcall	_READ_PS_2_PIN
  4576  0A32  3A00               	xorlw	0
  4577  0A33  1D03               	btfss	3,2
  4578  0A34  2A3C               	goto	l4418
  4579                           
  4580                           ;PS_2.c: 894: {
  4581                           ;PS_2.c: 895: timeout++;
  4582                           
  4583                           ;PS_2.c: 896: if(timeout > 15000)
  4584  0A35  235F  3188         	fcall	PL2	;call to abstracted procedure
  4585  0A37  1903               	skipnz
  4586  0A38  022D               	subwf	Send_PS2@timeout^(0+384),w
  4587  0A39  1C03               	skipc
  4588  0A3A  2A2F               	goto	l4416
  4589  0A3B  2A1C               	goto	l4388
  4590  0A3C                     l4418:	
  4591                           
  4592                           ;PS_2.c: 901: }
  4593                           ;PS_2.c: 902: }
  4594                           ;PS_2.c: 903: timeout=0;
  4595  0A3C  0023               	movlb	3	; select bank3
  4596  0A3D  01AD               	clrf	Send_PS2@timeout^(0+384)
  4597  0A3E  01AE               	clrf	(Send_PS2@timeout+1)^(0+384)
  4598  0A3F                     l4430:	
  4599                           ;PS_2.c: 911: Data_TRIS(1);
  4600                           
  4601                           ;PS_2.c: 909: {
  4602                           ;PS_2.c: 910: Clock_TRIS(1);
  4603                           
  4604                           ;PS_2.c: 904: while(READ_PS_2_PIN(0b00100000))
  4605                           
  4606  0A3F  3020               	movlw	32
  4607  0A40  22C3  3188         	fcall	_READ_PS_2_PIN
  4608  0A42  3A00               	xorlw	0
  4609  0A43  1903               	btfsc	3,2
  4610  0A44  2A4D               	goto	l4432
  4611                           
  4612                           ;PS_2.c: 905: {
  4613                           ;PS_2.c: 906: __nop();
  4614  0A45  0000               	nop
  4615                           
  4616                           ;PS_2.c: 907: timeout++;
  4617                           
  4618                           ;PS_2.c: 908: if(timeout > 15000)
  4619  0A46  235F  3188         	fcall	PL2	;call to abstracted procedure
  4620  0A48  1903               	skipnz
  4621  0A49  022D               	subwf	Send_PS2@timeout^(0+384),w
  4622  0A4A  1C03               	skipc
  4623  0A4B  2A3F               	goto	l4430
  4624  0A4C  2A1C               	goto	l4388
  4625  0A4D                     l4432:	
  4626  0A4D  0023               	movlb	3	; select bank3
  4627  0A4E  3008               	movlw	8
  4628  0A4F  0AAC               	incf	Send_PS2@i^(0+384),f
  4629  0A50  022C               	subwf	Send_PS2@i^(0+384),w
  4630  0A51  1C03               	skipc
  4631  0A52  2A24               	goto	l870
  4632                           
  4633                           ;PS_2.c: 913: }
  4634                           ;PS_2.c: 914: }
  4635                           ;PS_2.c: 915: }
  4636                           ;PS_2.c: 917: if(oddparity & 0x1)
  4637  0A53  1C2A               	btfss	Send_PS2@oddparity^(0+384),0
  4638  0A54  2A58               	goto	l882
  4639                           
  4640                           ;PS_2.c: 918: {
  4641                           ;PS_2.c: 919: LATA |= 0b00010000;
  4642  0A55  0022               	movlb	2	; select bank2
  4643  0A56  160C               	bsf	12,4	;volatile
  4644                           
  4645                           ;PS_2.c: 920: }
  4646  0A57  2A5A               	goto	l4438
  4647  0A58                     l882:	
  4648                           
  4649                           ;PS_2.c: 921: else
  4650                           ;PS_2.c: 922: {
  4651                           ;PS_2.c: 923: LATA &= ~0b00010000;
  4652  0A58  0022               	movlb	2	; select bank2
  4653  0A59  120C               	bcf	12,4	;volatile
  4654  0A5A                     l4438:	
  4655                           
  4656                           ;PS_2.c: 924: }
  4657                           ;PS_2.c: 925: timeout=0;
  4658  0A5A  0023               	movlb	3	; select bank3
  4659  0A5B  01AD               	clrf	Send_PS2@timeout^(0+384)
  4660  0A5C  01AE               	clrf	(Send_PS2@timeout+1)^(0+384)
  4661  0A5D                     l4450:	
  4662                           ;PS_2.c: 932: Data_TRIS(1);
  4663                           
  4664                           ;PS_2.c: 930: {
  4665                           ;PS_2.c: 931: Clock_TRIS(1);
  4666                           
  4667                           ;PS_2.c: 926: while(!READ_PS_2_PIN(0b00100000))
  4668                           
  4669  0A5D  3020               	movlw	32
  4670  0A5E  22C3  3188         	fcall	_READ_PS_2_PIN
  4671  0A60  3A00               	xorlw	0
  4672  0A61  1D03               	btfss	3,2
  4673  0A62  2A6A               	goto	l4452
  4674                           
  4675                           ;PS_2.c: 927: {
  4676                           ;PS_2.c: 928: timeout++;
  4677                           
  4678                           ;PS_2.c: 929: if(timeout > 15000)
  4679  0A63  235F  3188         	fcall	PL2	;call to abstracted procedure
  4680  0A65  1903               	skipnz
  4681  0A66  022D               	subwf	Send_PS2@timeout^(0+384),w
  4682  0A67  1C03               	skipc
  4683  0A68  2A5D               	goto	l4450
  4684  0A69  2A1C               	goto	l4388
  4685  0A6A                     l4452:	
  4686                           
  4687                           ;PS_2.c: 934: }
  4688                           ;PS_2.c: 935: }
  4689                           ;PS_2.c: 936: timeout=0;
  4690  0A6A  0023               	movlb	3	; select bank3
  4691  0A6B  01AD               	clrf	Send_PS2@timeout^(0+384)
  4692  0A6C  01AE               	clrf	(Send_PS2@timeout+1)^(0+384)
  4693  0A6D                     l4464:	
  4694                           ;PS_2.c: 943: Data_TRIS(1);
  4695                           
  4696                           ;PS_2.c: 941: {
  4697                           ;PS_2.c: 942: Clock_TRIS(1);
  4698                           
  4699                           ;PS_2.c: 937: while(READ_PS_2_PIN(0b00100000))
  4700                           
  4701  0A6D  3020               	movlw	32
  4702  0A6E  22C3  3188         	fcall	_READ_PS_2_PIN
  4703  0A70  3A00               	xorlw	0
  4704  0A71  1903               	btfsc	3,2
  4705  0A72  2A7A               	goto	l4466
  4706                           
  4707                           ;PS_2.c: 938: {
  4708                           ;PS_2.c: 939: timeout++;
  4709                           
  4710                           ;PS_2.c: 940: if(timeout > 15000)
  4711  0A73  235F  3188         	fcall	PL2	;call to abstracted procedure
  4712  0A75  1903               	skipnz
  4713  0A76  022D               	subwf	Send_PS2@timeout^(0+384),w
  4714  0A77  1C03               	skipc
  4715  0A78  2A6D               	goto	l4464
  4716  0A79  2A1C               	goto	l4388
  4717  0A7A                     l4466:	
  4718                           
  4719                           ;PS_2.c: 945: }
  4720                           ;PS_2.c: 946: }
  4721                           ;PS_2.c: 948: Data_TRIS(1);
  4722  0A7A  3001               	movlw	1
  4723  0A7B  232D  3188         	fcall	_Data_TRIS
  4724                           
  4725                           ;PS_2.c: 950: timeout=0;
  4726  0A7D  0023               	movlb	3	; select bank3
  4727  0A7E  01AD               	clrf	Send_PS2@timeout^(0+384)
  4728  0A7F  01AE               	clrf	(Send_PS2@timeout+1)^(0+384)
  4729  0A80                     l4480:	
  4730                           ;PS_2.c: 957: Data_TRIS(1);
  4731                           
  4732                           ;PS_2.c: 955: {
  4733                           ;PS_2.c: 956: Clock_TRIS(1);
  4734                           
  4735                           ;PS_2.c: 951: while(READ_PS_2_PIN(0b00010000))
  4736                           
  4737  0A80  3010               	movlw	16
  4738  0A81  22C3  3188         	fcall	_READ_PS_2_PIN
  4739  0A83  3A00               	xorlw	0
  4740  0A84  1903               	btfsc	3,2
  4741  0A85  2A8D               	goto	l4482
  4742                           
  4743                           ;PS_2.c: 952: {
  4744                           ;PS_2.c: 953: timeout++;
  4745                           
  4746                           ;PS_2.c: 954: if(timeout > 15000)
  4747  0A86  235F  3188         	fcall	PL2	;call to abstracted procedure
  4748  0A88  1903               	skipnz
  4749  0A89  022D               	subwf	Send_PS2@timeout^(0+384),w
  4750  0A8A  1C03               	skipc
  4751  0A8B  2A80               	goto	l4480
  4752  0A8C  2A1C               	goto	l4388
  4753  0A8D                     l4482:	
  4754                           
  4755                           ;PS_2.c: 959: }
  4756                           ;PS_2.c: 960: }
  4757                           ;PS_2.c: 961: timeout=0;
  4758  0A8D  0023               	movlb	3	; select bank3
  4759  0A8E  01AD               	clrf	Send_PS2@timeout^(0+384)
  4760  0A8F  01AE               	clrf	(Send_PS2@timeout+1)^(0+384)
  4761  0A90                     l4494:	
  4762                           ;PS_2.c: 968: Data_TRIS(1);
  4763                           
  4764                           ;PS_2.c: 966: {
  4765                           ;PS_2.c: 967: Clock_TRIS(1);
  4766                           
  4767                           ;PS_2.c: 962: while(READ_PS_2_PIN(0b00100000))
  4768                           
  4769  0A90  3020               	movlw	32
  4770  0A91  22C3  3188         	fcall	_READ_PS_2_PIN
  4771  0A93  3A00               	xorlw	0
  4772  0A94  1903               	btfsc	3,2
  4773  0A95  2A9D               	goto	l4496
  4774                           
  4775                           ;PS_2.c: 963: {
  4776                           ;PS_2.c: 964: timeout++;
  4777                           
  4778                           ;PS_2.c: 965: if(timeout > 15000)
  4779  0A96  235F  3188         	fcall	PL2	;call to abstracted procedure
  4780  0A98  1903               	skipnz
  4781  0A99  022D               	subwf	Send_PS2@timeout^(0+384),w
  4782  0A9A  1C03               	skipc
  4783  0A9B  2A90               	goto	l4494
  4784  0A9C  2A1C               	goto	l4388
  4785  0A9D                     l4496:	
  4786                           
  4787                           ;PS_2.c: 970: }
  4788                           ;PS_2.c: 971: }
  4789                           ;PS_2.c: 972: timeout=0;
  4790  0A9D  0023               	movlb	3	; select bank3
  4791  0A9E  01AD               	clrf	Send_PS2@timeout^(0+384)
  4792  0A9F  01AE               	clrf	(Send_PS2@timeout+1)^(0+384)
  4793  0AA0                     l4508:	
  4794                           ;PS_2.c: 979: Data_TRIS(1);
  4795                           
  4796                           ;PS_2.c: 977: {
  4797                           ;PS_2.c: 978: Clock_TRIS(1);
  4798                           
  4799                           ;PS_2.c: 973: while(!READ_PS_2_PIN(0b00010000))
  4800                           
  4801  0AA0  3010               	movlw	16
  4802  0AA1  22C3  3188         	fcall	_READ_PS_2_PIN
  4803  0AA3  3A00               	xorlw	0
  4804  0AA4  1D03               	btfss	3,2
  4805  0AA5  2AAD               	goto	l4510
  4806                           
  4807                           ;PS_2.c: 974: {
  4808                           ;PS_2.c: 975: timeout++;
  4809                           
  4810                           ;PS_2.c: 976: if(timeout > 15000)
  4811  0AA6  235F  3188         	fcall	PL2	;call to abstracted procedure
  4812  0AA8  1903               	skipnz
  4813  0AA9  022D               	subwf	Send_PS2@timeout^(0+384),w
  4814  0AAA  1C03               	skipc
  4815  0AAB  2AA0               	goto	l4508
  4816  0AAC  2A1C               	goto	l4388
  4817  0AAD                     l4510:	
  4818                           
  4819                           ;PS_2.c: 981: }
  4820                           ;PS_2.c: 982: }
  4821                           ;PS_2.c: 983: timeout=0;
  4822  0AAD  0023               	movlb	3	; select bank3
  4823  0AAE  01AD               	clrf	Send_PS2@timeout^(0+384)
  4824  0AAF  01AE               	clrf	(Send_PS2@timeout+1)^(0+384)
  4825  0AB0                     l4522:	
  4826                           ;PS_2.c: 990: Data_TRIS(1);
  4827                           
  4828                           ;PS_2.c: 988: {
  4829                           ;PS_2.c: 989: Clock_TRIS(1);
  4830                           
  4831                           ;PS_2.c: 984: while(!READ_PS_2_PIN(0b00100000))
  4832                           
  4833  0AB0  3020               	movlw	32
  4834  0AB1  22C3  3188         	fcall	_READ_PS_2_PIN
  4835  0AB3  3A00               	xorlw	0
  4836  0AB4  1D03               	btfss	3,2
  4837  0AB5  2ABD               	goto	l4524
  4838                           
  4839                           ;PS_2.c: 985: {
  4840                           ;PS_2.c: 986: timeout++;
  4841                           
  4842                           ;PS_2.c: 987: if(timeout > 15000)
  4843  0AB6  235F  3188         	fcall	PL2	;call to abstracted procedure
  4844  0AB8  1903               	skipnz
  4845  0AB9  022D               	subwf	Send_PS2@timeout^(0+384),w
  4846  0ABA  1C03               	skipc
  4847  0ABB  2AB0               	goto	l4522
  4848  0ABC  2A1C               	goto	l4388
  4849  0ABD                     l4524:	
  4850                           
  4851                           ;PS_2.c: 992: }
  4852                           ;PS_2.c: 993: }
  4853                           ;PS_2.c: 996: Clock_TRIS(1);
  4854  0ABD  3001               	movlw	1
  4855  0ABE  22F6  3188         	fcall	_Clock_TRIS
  4856                           
  4857                           ;PS_2.c: 997: Data_TRIS(1);
  4858  0AC0  3001               	movlw	1
  4859  0AC1  232D               	fcall	_Data_TRIS
  4860                           
  4861                           ;PS_2.c: 998: return 0;
  4862  0AC2  3400               	retlw	0
  4863  0AC3                     __end_of_Send_PS2:	
  4864  0AC3                     __ptext14:	
  4865 ;; *************** function _READ_PS_2_PIN *****************
  4866 ;; Defined at:
  4867 ;;		line 222 in file "PS_2.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;  DATA_CLK        1    wreg     unsigned char 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  DATA_CLK        1    0[BANK3 ] unsigned char 
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  1    wreg      unsigned char 
  4874 ;; Registers used:
  4875 ;;		wreg, status,2, status,0
  4876 ;; Tracked objects:
  4877 ;;		On entry : 1F/3
  4878 ;;		On exit  : 1F/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4885 ;;Total ram usage:        1 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    7
  4888 ;; This function calls:
  4889 ;;		Nothing
  4890 ;; This function is called by:
  4891 ;;		_Send_PS2
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           
  4896                           ;psect for function _READ_PS_2_PIN
  4897  0AC3                     _READ_PS_2_PIN:	
  4898                           
  4899                           ;incstack = 0
  4900                           ; Regs used in _READ_PS_2_PIN: [wreg+status,2+status,0]
  4901                           ;READ_PS_2_PIN@DATA_CLK stored from wreg
  4902  0AC3  00A0               	movwf	READ_PS_2_PIN@DATA_CLK^(0+384)
  4903                           
  4904                           ;PS_2.c: 224: if(DATA_CLK == 0b00100000)
  4905  0AC4  3A20               	xorlw	32
  4906  0AC5  1D03               	btfss	3,2
  4907  0AC6  2ACB               	goto	l657
  4908                           
  4909                           ;PS_2.c: 225: {
  4910                           ;PS_2.c: 227: if((PORTA & 0b00100000) == 0b00100000)
  4911  0AC7  0020               	movlb	0	; select bank0
  4912  0AC8  1E8C               	btfss	12,5	;volatile
  4913  0AC9  3400               	retlw	0
  4914                           
  4915                           ;PS_2.c: 228: {
  4916                           ;PS_2.c: 229: return (1);
  4917  0ACA  3401               	retlw	1
  4918  0ACB                     l657:	
  4919                           ;PS_2.c: 231: else
  4920                           ;PS_2.c: 232: {
  4921                           ;PS_2.c: 233: return 0;
  4922                           
  4923                           
  4924                           ;PS_2.c: 236: else
  4925                           ;PS_2.c: 237: {
  4926                           ;PS_2.c: 239: if((PORTA & 0b00010000) == 0b00010000)
  4927  0ACB  0020               	movlb	0	; select bank0
  4928  0ACC  1A0C               	btfsc	12,4	;volatile
  4929  0ACD  3401               	retlw	1
  4930  0ACE  3400               	retlw	0
  4931  0ACF                     __end_of_READ_PS_2_PIN:	
  4932  0ACF                     __ptext21:	
  4933 ;; *************** function _delayUS *****************
  4934 ;; Defined at:
  4935 ;;		line 51 in file "MISC.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;  US              4    0[BANK3 ] long 
  4938 ;; Auto vars:     Size  Location     Type
  4939 ;;  i               4    5[BANK3 ] long 
  4940 ;;  j               1    9[BANK3 ] unsigned char 
  4941 ;; Return value:  Size  Location     Type
  4942 ;;		None               void
  4943 ;; Registers used:
  4944 ;;		wreg, status,2, status,0
  4945 ;; Tracked objects:
  4946 ;;		On entry : 1F/3
  4947 ;;		On exit  : 1F/3
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4950 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  4952 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4953 ;;      Totals:         0       0       0       0      10       0       0       0       0       0       0       0       
      +0       0
  4954 ;;Total ram usage:       10 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; Hardware stack levels required when called:    7
  4957 ;; This function calls:
  4958 ;;		Nothing
  4959 ;; This function is called by:
  4960 ;;		_main
  4961 ;;		_Init_System
  4962 ;;		_UARTstringWAIT
  4963 ;;		_Send_PS2
  4964 ;;		_Init_PS_2_Send
  4965 ;;		_InternalADC_Read
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           
  4970                           ;psect for function _delayUS
  4971  0ACF                     _delayUS:	
  4972                           
  4973                           ;MISC.c: 53: long i;
  4974                           ;MISC.c: 54: unsigned char j;
  4975                           ;MISC.c: 55: for(i=0;i<US;i+=6)
  4976                           
  4977                           ;incstack = 0
  4978                           ; Regs used in _delayUS: [wreg+status,2+status,0]
  4979  0ACF  01A5               	clrf	delayUS@i^(0+384)
  4980  0AD0  01A6               	clrf	(delayUS@i+1)^(0+384)
  4981  0AD1  01A7               	clrf	(delayUS@i+2)^(0+384)
  4982  0AD2  01A8               	clrf	(delayUS@i+3)^(0+384)
  4983  0AD3                     l3968:	
  4984  0AD3  0828               	movf	(delayUS@i+3)^(0+384),w
  4985  0AD4  3A80               	xorlw	128
  4986  0AD5  00A4               	movwf	??_delayUS^(0+384)
  4987  0AD6  0823               	movf	(delayUS@US+3)^(0+384),w
  4988  0AD7  3A80               	xorlw	128
  4989  0AD8  0224               	subwf	??_delayUS^(0+384),w
  4990  0AD9  1D03               	skipz
  4991  0ADA  2AE5               	goto	u3653
  4992  0ADB  0822               	movf	(delayUS@US+2)^(0+384),w
  4993  0ADC  0227               	subwf	(delayUS@i+2)^(0+384),w
  4994  0ADD  1D03               	skipz
  4995  0ADE  2AE5               	goto	u3653
  4996  0ADF  0821               	movf	(delayUS@US+1)^(0+384),w
  4997  0AE0  0226               	subwf	(delayUS@i+1)^(0+384),w
  4998  0AE1  1D03               	skipz
  4999  0AE2  2AE5               	goto	u3653
  5000  0AE3  0820               	movf	delayUS@US^(0+384),w
  5001  0AE4  0225               	subwf	delayUS@i^(0+384),w
  5002  0AE5                     u3653:	
  5003  0AE5  1803               	btfsc	3,0
  5004  0AE6  0008               	return
  5005                           
  5006                           ;MISC.c: 56: {
  5007                           ;MISC.c: 57: for(j=0;j<32;j++)
  5008  0AE7  01A9               	clrf	delayUS@j^(0+384)
  5009  0AE8                     l288:	
  5010                           
  5011                           ;MISC.c: 58: {
  5012                           ;MISC.c: 59: __nop();
  5013  0AE8  0000               	nop
  5014  0AE9  0023               	movlb	3	; select bank3
  5015  0AEA  3020               	movlw	32
  5016  0AEB  0AA9               	incf	delayUS@j^(0+384),f
  5017  0AEC  0229               	subwf	delayUS@j^(0+384),w
  5018  0AED  1C03               	skipc
  5019  0AEE  2AE8               	goto	l288
  5020  0AEF  3006               	movlw	6
  5021  0AF0  07A5               	addwf	delayUS@i^(0+384),f
  5022  0AF1  3000               	movlw	0
  5023  0AF2  3DA6               	addwfc	(delayUS@i+1)^(0+384),f
  5024  0AF3  3DA7               	addwfc	(delayUS@i+2)^(0+384),f
  5025  0AF4  3DA8               	addwfc	(delayUS@i+3)^(0+384),f
  5026  0AF5  2AD3               	goto	l3968
  5027  0AF6                     __end_of_delayUS:	
  5028  0AF6                     __ptext16:	
  5029 ;; *************** function _Clock_TRIS *****************
  5030 ;; Defined at:
  5031 ;;		line 120 in file "PS_2.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;  direction       1    wreg     unsigned char 
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;  direction       1    0[BANK3 ] unsigned char 
  5036 ;; Return value:  Size  Location     Type
  5037 ;;		None               void
  5038 ;; Registers used:
  5039 ;;		wreg, status,2, status,0
  5040 ;; Tracked objects:
  5041 ;;		On entry : 1C/3
  5042 ;;		On exit  : 1F/1
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5046 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5049 ;;Total ram usage:        1 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:    7
  5052 ;; This function calls:
  5053 ;;		Nothing
  5054 ;; This function is called by:
  5055 ;;		_PS_2_INIT
  5056 ;;		_Send_PS2
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060                           
  5061                           ;psect for function _Clock_TRIS
  5062  0AF6                     _Clock_TRIS:	
  5063                           
  5064                           ;incstack = 0
  5065                           ; Regs used in _Clock_TRIS: [wreg+status,2+status,0]
  5066                           ;Clock_TRIS@direction stored from wreg
  5067  0AF6  0023               	movlb	3	; select bank3
  5068  0AF7  00A0               	movwf	Clock_TRIS@direction^(0+384)
  5069                           
  5070                           ;PS_2.c: 122: if(direction == 0)
  5071  0AF8  0820               	movf	Clock_TRIS@direction^(0+384),w
  5072  0AF9  1D03               	btfss	3,2
  5073  0AFA  2AFE               	goto	l632
  5074                           
  5075                           ;PS_2.c: 123: {
  5076                           ;PS_2.c: 124: TRISAbits.TRISA5 = 0;
  5077  0AFB  0021               	movlb	1	; select bank1
  5078  0AFC  128C               	bcf	12,5	;volatile
  5079                           
  5080                           ;PS_2.c: 125: }
  5081  0AFD  0008               	return
  5082  0AFE                     l632:	
  5083                           
  5084                           ;PS_2.c: 126: else
  5085                           ;PS_2.c: 127: {
  5086                           ;PS_2.c: 128: TRISAbits.TRISA5 = 1;
  5087  0AFE  0021               	movlb	1	; select bank1
  5088  0AFF  168C               	bsf	12,5	;volatile
  5089  0B00  0008               	return
  5090  0B01                     __end_of_Clock_TRIS:	
  5091  0B01                     __ptext1:	
  5092 ;; *************** function ___ftge *****************
  5093 ;; Defined at:
  5094 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;  ff1             3    0[BANK3 ] float 
  5097 ;;  ff2             3    3[BANK3 ] float 
  5098 ;; Auto vars:     Size  Location     Type
  5099 ;;		None
  5100 ;; Return value:  Size  Location     Type
  5101 ;;		None               void
  5102 ;; Registers used:
  5103 ;;		wreg, status,2, status,0
  5104 ;; Tracked objects:
  5105 ;;		On entry : 1F/3
  5106 ;;		On exit  : 1F/3
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5109 ;;      Params:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  5110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5112 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  5113 ;;Total ram usage:        6 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    7
  5116 ;; This function calls:
  5117 ;;		Nothing
  5118 ;; This function is called by:
  5119 ;;		_main
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           
  5124                           ;psect for function ___ftge
  5125  0B01                     ___ftge:	
  5126                           
  5127                           ;incstack = 0
  5128                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5129  0B01  1FA2               	btfss	(___ftge@ff1+2)^(0+384),7
  5130  0B02  2B10               	goto	l6006
  5131  0B03  0820               	movf	___ftge@ff1^(0+384),w
  5132  0B04  3C00               	sublw	0
  5133  0B05  00A0               	movwf	___ftge@ff1^(0+384)
  5134  0B06  0821               	movf	(___ftge@ff1+1)^(0+384),w
  5135  0B07  1C03               	skipc
  5136  0B08  0F21               	incfsz	(___ftge@ff1+1)^(0+384),w
  5137  0B09  3C00               	sublw	0
  5138  0B0A  00A1               	movwf	(___ftge@ff1+1)^(0+384)
  5139  0B0B  0822               	movf	(___ftge@ff1+2)^(0+384),w
  5140  0B0C  1C03               	skipc
  5141  0B0D  0F22               	incfsz	(___ftge@ff1+2)^(0+384),w
  5142  0B0E  3C80               	sublw	128
  5143  0B0F  00A2               	movwf	(___ftge@ff1+2)^(0+384)
  5144  0B10                     l6006:	
  5145  0B10  1FA5               	btfss	(___ftge@ff2+2)^(0+384),7
  5146  0B11  2B1F               	goto	l6010
  5147  0B12  0823               	movf	___ftge@ff2^(0+384),w
  5148  0B13  3C00               	sublw	0
  5149  0B14  00A3               	movwf	___ftge@ff2^(0+384)
  5150  0B15  0824               	movf	(___ftge@ff2+1)^(0+384),w
  5151  0B16  1C03               	skipc
  5152  0B17  0F24               	incfsz	(___ftge@ff2+1)^(0+384),w
  5153  0B18  3C00               	sublw	0
  5154  0B19  00A4               	movwf	(___ftge@ff2+1)^(0+384)
  5155  0B1A  0825               	movf	(___ftge@ff2+2)^(0+384),w
  5156  0B1B  1C03               	skipc
  5157  0B1C  0F25               	incfsz	(___ftge@ff2+2)^(0+384),w
  5158  0B1D  3C80               	sublw	128
  5159  0B1E  00A5               	movwf	(___ftge@ff2+2)^(0+384)
  5160  0B1F                     l6010:	
  5161  0B1F  3080               	movlw	128
  5162  0B20  06A2               	xorwf	(___ftge@ff1+2)^(0+384),f
  5163  0B21  06A5               	xorwf	(___ftge@ff2+2)^(0+384),f
  5164  0B22  0825               	movf	(___ftge@ff2+2)^(0+384),w
  5165  0B23  0222               	subwf	(___ftge@ff1+2)^(0+384),w
  5166  0B24  1D03               	skipz
  5167  0B25  0008               	return
  5168  0B26  0824               	movf	(___ftge@ff2+1)^(0+384),w
  5169  0B27  0221               	subwf	(___ftge@ff1+1)^(0+384),w
  5170  0B28  1D03               	skipz
  5171  0B29  0008               	return
  5172  0B2A  0823               	movf	___ftge@ff2^(0+384),w
  5173  0B2B  0220               	subwf	___ftge@ff1^(0+384),w
  5174  0B2C  0008               	return
  5175  0B2D                     __end_of___ftge:	
  5176  0B2D                     __ptext15:	
  5177 ;; *************** function _Data_TRIS *****************
  5178 ;; Defined at:
  5179 ;;		line 137 in file "PS_2.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;  direction       1    wreg     unsigned char 
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;  direction       1    0[BANK3 ] unsigned char 
  5184 ;; Return value:  Size  Location     Type
  5185 ;;		None               void
  5186 ;; Registers used:
  5187 ;;		wreg, status,2, status,0
  5188 ;; Tracked objects:
  5189 ;;		On entry : 1E/1
  5190 ;;		On exit  : 1F/1
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5196 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5197 ;;Total ram usage:        1 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:    7
  5200 ;; This function calls:
  5201 ;;		Nothing
  5202 ;; This function is called by:
  5203 ;;		_PS_2_INIT
  5204 ;;		_Send_PS2
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           
  5209                           ;psect for function _Data_TRIS
  5210  0B2D                     _Data_TRIS:	
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in _Data_TRIS: [wreg+status,2+status,0]
  5214                           ;Data_TRIS@direction stored from wreg
  5215  0B2D  0023               	movlb	3	; select bank3
  5216  0B2E  00A0               	movwf	Data_TRIS@direction^(0+384)
  5217                           
  5218                           ;PS_2.c: 139: if(direction == 0)
  5219  0B2F  0820               	movf	Data_TRIS@direction^(0+384),w
  5220  0B30  1D03               	btfss	3,2
  5221  0B31  2B35               	goto	l637
  5222                           
  5223                           ;PS_2.c: 140: {
  5224                           ;PS_2.c: 141: TRISAbits.TRISA4 = 0;
  5225  0B32  0021               	movlb	1	; select bank1
  5226  0B33  120C               	bcf	12,4	;volatile
  5227                           
  5228                           ;PS_2.c: 142: }
  5229  0B34  0008               	return
  5230  0B35                     l637:	
  5231                           
  5232                           ;PS_2.c: 143: else
  5233                           ;PS_2.c: 144: {
  5234                           ;PS_2.c: 145: TRISAbits.TRISA4 = 1;
  5235  0B35  0021               	movlb	1	; select bank1
  5236  0B36  160C               	bsf	12,4	;volatile
  5237  0B37  0008               	return
  5238  0B38                     __end_of_Data_TRIS:	
  5239  0B38                     __ptext34:	
  5240 ;; *************** function _ConfigureOscillator *****************
  5241 ;; Defined at:
  5242 ;;		line 40 in file "system.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;		None
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;		None
  5247 ;; Return value:  Size  Location     Type
  5248 ;;		None               void
  5249 ;; Registers used:
  5250 ;;		wreg, status,2, status,0
  5251 ;; Tracked objects:
  5252 ;;		On entry : B1F/0
  5253 ;;		On exit  : B1F/1
  5254 ;;		Unchanged: B00/0
  5255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5260 ;;Total ram usage:        0 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    7
  5263 ;; This function calls:
  5264 ;;		Nothing
  5265 ;; This function is called by:
  5266 ;;		_main
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           
  5271                           ;psect for function _ConfigureOscillator
  5272  0B38                     _ConfigureOscillator:	
  5273                           
  5274                           ;system.c: 42: OSCCON= 0b11110000;
  5275                           
  5276                           ;incstack = 0
  5277                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  5278  0B38  30F0               	movlw	240
  5279  0B39  0021               	movlb	1	; select bank1
  5280  0B3A  0099               	movwf	25	;volatile
  5281  0B3B                     l5876:	
  5282                           ;system.c: 43: while(!(OSCSTAT & HFIOFS));
  5283                           
  5284  0B3B  3000               	movlw	0
  5285  0B3C  181A               	btfsc	26,0	;volatile
  5286  0B3D  3001               	movlw	1
  5287  0B3E  051A               	andwf	26,w	;volatile
  5288  0B3F  1903               	btfsc	3,2
  5289  0B40  2B3B               	goto	l5876
  5290  0B41                     l5878:	
  5291  0B41  3040               	movlw	64
  5292  0B42  059A               	andwf	26,f	;volatile
  5293  0B43  1D03               	btfss	3,2
  5294  0B44  0008               	return
  5295  0B45  2B41               	goto	l5878
  5296  0B46                     __end_of_ConfigureOscillator:	
  5297  0B46                     __ptext33:	
  5298 ;; *************** function _InitApp *****************
  5299 ;; Defined at:
  5300 ;;		line 62 in file "user.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;		None
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;		None
  5305 ;; Return value:  Size  Location     Type
  5306 ;;		None               void
  5307 ;; Registers used:
  5308 ;;		wreg, status,2
  5309 ;; Tracked objects:
  5310 ;;		On entry : B1F/1
  5311 ;;		On exit  : B1F/4
  5312 ;;		Unchanged: B00/0
  5313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5318 ;;Total ram usage:        0 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:    7
  5321 ;; This function calls:
  5322 ;;		Nothing
  5323 ;; This function is called by:
  5324 ;;		_main
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           
  5329                           ;psect for function _InitApp
  5330  0B46                     _InitApp:	
  5331                           
  5332                           ;user.c: 64: LATC =0;
  5333                           
  5334                           ;incstack = 0
  5335                           ; Regs used in _InitApp: [wreg+status,2]
  5336  0B46  0022               	movlb	2	; select bank2
  5337  0B47  018E               	clrf	14	;volatile
  5338                           
  5339                           ;user.c: 65: LATA =0;
  5340  0B48  018C               	clrf	12	;volatile
  5341                           
  5342                           ;user.c: 66: TRISCbits.TRISC2 = 0;
  5343  0B49  0021               	movlb	1	; select bank1
  5344  0B4A  110E               	bcf	14,2	;volatile
  5345                           
  5346                           ;user.c: 67: TRISCbits.TRISC1 = 0;
  5347  0B4B  108E               	bcf	14,1	;volatile
  5348                           
  5349                           ;user.c: 68: TRISCbits.TRISC3 = 0;
  5350  0B4C  118E               	bcf	14,3	;volatile
  5351                           
  5352                           ;user.c: 69: TRISCbits.TRISC4 = 0;
  5353  0B4D  120E               	bcf	14,4	;volatile
  5354                           
  5355                           ;user.c: 70: TRISAbits.TRISA2 = 1;
  5356  0B4E  150C               	bsf	12,2	;volatile
  5357                           
  5358                           ;user.c: 72: TRISCbits.TRISC0 = 1;
  5359  0B4F  140E               	bsf	14,0	;volatile
  5360                           
  5361                           ;user.c: 77: TRISCbits.TRISC5 = 1;
  5362  0B50  168E               	bsf	14,5	;volatile
  5363                           
  5364                           ;user.c: 80: LATC |= 0b00000010;
  5365  0B51  0022               	movlb	2	; select bank2
  5366  0B52  148E               	bsf	14,1	;volatile
  5367                           
  5368                           ;user.c: 81: PPSLOCK =0;
  5369                           
  5370                           ;user.c: 82: RC2PPS = 0b00010100;
  5371                           
  5372                           ;user.c: 83: CKPPS = 0b00010010;
  5373                           
  5374                           ;user.c: 85: RXPPS = 0b00010101;
  5375                           
  5376                           ;user.c: 87: PPSLOCK =1;
  5377  0B53  2366               	fcall	PL4	;call to abstracted procedure
  5378                           
  5379                           ;user.c: 89: ANSELA &= ~0xFF;
  5380  0B54  0023               	movlb	3	; select bank3
  5381  0B55  018C               	clrf	12	;volatile
  5382                           
  5383                           ;user.c: 90: ANSELA |= 0b00000100;
  5384  0B56  150C               	bsf	12,2	;volatile
  5385                           
  5386                           ;user.c: 91: ANSELC &= ~0xFF;
  5387  0B57  018E               	clrf	14	;volatile
  5388                           
  5389                           ;user.c: 92: OPTION_REGbits.nWPUEN = 0;
  5390  0B58  0021               	movlb	1	; select bank1
  5391  0B59  1395               	bcf	21,7	;volatile
  5392                           
  5393                           ;user.c: 93: WPUC = 0b00100000;
  5394  0B5A  3020               	movlw	32
  5395  0B5B  0024               	movlb	4	; select bank4
  5396  0B5C  008E               	movwf	14	;volatile
  5397                           
  5398                           ;user.c: 94: WPUA = 0;
  5399  0B5D  018C               	clrf	12	;volatile
  5400  0B5E  0008               	return
  5401  0B5F                     __end_of_InitApp:	
  5402  0B5F                     PL2:	
  5403  0B5F  0023               	movlb	3	; select bank3
  5404  0B60  0AAD               	incf	Send_PS2@timeout^(0+384),f
  5405  0B61  1903               	skipnz
  5406  0B62  0AAE               	incf	(Send_PS2@timeout+1)^(0+384),f
  5407  0B63  303A               	movlw	58
  5408  0B64  022E               	subwf	(Send_PS2@timeout+1)^(0+384),w
  5409  0B65  3499               	retlw	153
  5410  0B66                     __end_ofPL2:	
  5411  0B66                     PL4:	
  5412  0B66  003C               	movlb	28	; select bank28
  5413  0B67  018F               	clrf	15	;volatile
  5414  0B68  3014               	movlw	20
  5415  0B69  003D               	movlb	29	; select bank29
  5416  0B6A  00A2               	movwf	34	;volatile
  5417  0B6B  3012               	movlw	18
  5418  0B6C  003C               	movlb	28	; select bank28
  5419  0B6D  00A5               	movwf	37	;volatile
  5420  0B6E  3015               	movlw	21
  5421  0B6F  00A4               	movwf	36	;volatile
  5422  0B70  3001               	movlw	1
  5423  0B71  008F               	movwf	15	;volatile
  5424  0B72  0008               	return
  5425  0B73                     __end_ofPL4:	
  5426  0B73                     PL10:	
  5427  0B73  0820               	movf	_BatteryVoltage^(0+512),w
  5428  0B74  0023               	movlb	3	; select bank3
  5429  0B75  00A0               	movwf	___ftge@ff1^(0+384)
  5430  0B76  0024               	movlb	4	; select bank4
  5431  0B77  0821               	movf	(_BatteryVoltage+1)^(0+512),w
  5432  0B78  0023               	movlb	3	; select bank3
  5433  0B79  00A1               	movwf	(___ftge@ff1+1)^(0+384)
  5434  0B7A  0024               	movlb	4	; select bank4
  5435  0B7B  0822               	movf	(_BatteryVoltage+2)^(0+512),w
  5436  0B7C  0023               	movlb	3	; select bank3
  5437  0B7D  00A2               	movwf	(___ftge@ff1+2)^(0+384)
  5438  0B7E  309A               	movlw	154
  5439  0B7F  00A3               	movwf	___ftge@ff2^(0+384)
  5440  0B80  30D1               	movlw	209
  5441  0B81  00A4               	movwf	(___ftge@ff2+1)^(0+384)
  5442  0B82  3040               	movlw	64
  5443  0B83  00A5               	movwf	(___ftge@ff2+2)^(0+384)
  5444  0B84  0008               	return
  5445  0B85                     __end_ofPL10:	
  5446  0B85                     PL12:	
  5447  0B85  30F0               	movlw	240
  5448  0B86  01A0               	clrf	___ftge@ff1^(0+384)
  5449  0B87  00A1               	movwf	(___ftge@ff1+1)^(0+384)
  5450  0B88  3041               	movlw	65
  5451  0B89  00A2               	movwf	(___ftge@ff1+2)^(0+384)
  5452  0B8A  0024               	movlb	4	; select bank4
  5453  0B8B  0820               	movf	_BatteryVoltage^(0+512),w
  5454  0B8C  0023               	movlb	3	; select bank3
  5455  0B8D  00A3               	movwf	___ftge@ff2^(0+384)
  5456  0B8E  0024               	movlb	4	; select bank4
  5457  0B8F  0821               	movf	(_BatteryVoltage+1)^(0+512),w
  5458  0B90  0023               	movlb	3	; select bank3
  5459  0B91  00A4               	movwf	(___ftge@ff2+1)^(0+384)
  5460  0B92  0024               	movlb	4	; select bank4
  5461  0B93  0822               	movf	(_BatteryVoltage+2)^(0+512),w
  5462  0B94  0023               	movlb	3	; select bank3
  5463  0B95  00A5               	movwf	(___ftge@ff2+2)^(0+384)
  5464  0B96  0008               	return
  5465  0B97                     __end_ofPL12:	
  5466  0B97                     PL20:	
  5467  0B97  0849               	movf	?_ReadVoltage^(0+384),w
  5468  0B98  0024               	movlb	4	; select bank4
  5469  0B99  00A0               	movwf	_BatteryVoltage^(0+512)
  5470  0B9A  0023               	movlb	3	; select bank3
  5471  0B9B  084A               	movf	(?_ReadVoltage+1)^(0+384),w
  5472  0B9C  0024               	movlb	4	; select bank4
  5473  0B9D  00A1               	movwf	(_BatteryVoltage+1)^(0+512)
  5474  0B9E  0023               	movlb	3	; select bank3
  5475  0B9F  084B               	movf	(?_ReadVoltage+2)^(0+384),w
  5476  0BA0  0024               	movlb	4	; select bank4
  5477  0BA1  00A2               	movwf	(_BatteryVoltage+2)^(0+512)
  5478  0BA2  0008               	return
  5479  0BA3                     __end_ofPL20:	
  5480  0BA3                     PL22:	
  5481  0BA3  0023               	movlb	3	; select bank3
  5482  0BA4  00A0               	movwf	delayUS@US^(0+384)
  5483  0BA5  01A1               	clrf	(delayUS@US+1)^(0+384)
  5484  0BA6  01A2               	clrf	(delayUS@US+2)^(0+384)
  5485  0BA7  01A3               	clrf	(delayUS@US+3)^(0+384)
  5486  0BA8  0008               	return
  5487  0BA9                     __end_ofPL22:	
  5488  0BA9                     PL24:	
  5489  0BA9  303A               	movlw	58
  5490  0BAA  01A3               	clrf	(delayUS@US+3)^(0+384)
  5491  0BAB  01A2               	clrf	(delayUS@US+2)^(0+384)
  5492  0BAC  00A1               	movwf	(delayUS@US+1)^(0+384)
  5493  0BAD  3098               	movlw	152
  5494  0BAE  00A0               	movwf	delayUS@US^(0+384)
  5495  0BAF  0008               	return
  5496  0BB0                     __end_ofPL24:	
  5497  0BB0                     PL28:	
  5498  0BB0  3013               	movlw	19
  5499  0BB1  01A3               	clrf	(delayUS@US+3)^(0+384)
  5500  0BB2  01A2               	clrf	(delayUS@US+2)^(0+384)
  5501  0BB3  00A1               	movwf	(delayUS@US+1)^(0+384)
  5502  0BB4  3088               	movlw	136
  5503  0BB5  00A0               	movwf	delayUS@US^(0+384)
  5504  0BB6  0008               	return
  5505  0BB7                     __end_ofPL28:	
  5506  0BB7                     PL36:	
  5507  0BB7  0023               	movlb	3	; select bank3
  5508  0BB8  3027               	movlw	39
  5509  0BB9  01A3               	clrf	(delayUS@US+3)^(0+384)
  5510  0BBA  01A2               	clrf	(delayUS@US+2)^(0+384)
  5511  0BBB  00A1               	movwf	(delayUS@US+1)^(0+384)
  5512  0BBC  3010               	movlw	16
  5513  0BBD  00A0               	movwf	delayUS@US^(0+384)
  5514  0BBE  0008               	return
  5515  0BBF                     __end_ofPL36:	
  5516  0BBF                     PL44:	
  5517  0BBF  00A3               	movwf	(delayUS@US+3)^(0+384)
  5518  0BC0  00A2               	movwf	(delayUS@US+2)^(0+384)
  5519  0BC1  303A               	movlw	58
  5520  0BC2  00A1               	movwf	(delayUS@US+1)^(0+384)
  5521  0BC3  3098               	movlw	152
  5522  0BC4  00A0               	movwf	delayUS@US^(0+384)
  5523  0BC5  0008               	return
  5524  0BC6                     __end_ofPL44:	
  5525  0BC6                     PL68:	
  5526  0BC6  30FD               	movlw	low ((STR_14+16)| (0+32768))
  5527  0BC7  00AB               	movwf	UARTstringWAIT@data^(0+384)
  5528  0BC8  309A               	movlw	high ((STR_14+16)| (0+32768))
  5529  0BC9  00AC               	movwf	(UARTstringWAIT@data^(0+384)+1)
  5530  0BCA  0008               	return
  5531  0BCB                     __end_ofPL68:	
  5532  0BCB                     PL70:	
  5533  0BCB  3059               	movlw	low (_VoltageMSG| (0+32768))
  5534  0BCC  00AB               	movwf	UARTstringWAIT@data^(0+384)
  5535  0BCD  309A               	movlw	high (_VoltageMSG| (0+32768))
  5536  0BCE  00AC               	movwf	(UARTstringWAIT@data^(0+384)+1)
  5537  0BCF  0008               	return
  5538  0BD0                     __end_ofPL70:	
  5539  0BD0                     __ptext27:	
  5540 ;; *************** function _InitUART *****************
  5541 ;; Defined at:
  5542 ;;		line 78 in file "UART.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;  Baud            4   13[BANK3 ] unsigned long 
  5545 ;;  parity          1   17[BANK3 ] unsigned char 
  5546 ;; Auto vars:     Size  Location     Type
  5547 ;;  temp            4   30[BANK3 ] unsigned long 
  5548 ;;  spbrg           2   26[BANK3 ] unsigned int 
  5549 ;;  config          1   29[BANK3 ] unsigned char 
  5550 ;;  baudconfig      1   28[BANK3 ] unsigned char 
  5551 ;; Return value:  Size  Location     Type
  5552 ;;		None               void
  5553 ;; Registers used:
  5554 ;;		wreg, status,2, status,0, pclath, cstack
  5555 ;; Tracked objects:
  5556 ;;		On entry : 1F/3
  5557 ;;		On exit  : 1F/1
  5558 ;;		Unchanged: 0/0
  5559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5560 ;;      Params:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  5561 ;;      Locals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0
  5562 ;;      Temps:          0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0
  5563 ;;      Totals:         0       0       0       0      21       0       0       0       0       0       0       0       
      +0       0
  5564 ;;Total ram usage:       21 bytes
  5565 ;; Hardware stack levels used:    1
  5566 ;; Hardware stack levels required when called:    8
  5567 ;; This function calls:
  5568 ;;		_CloseUSART
  5569 ;;		_OpenUSART
  5570 ;;		_ReadUSART
  5571 ;;		___lldiv
  5572 ;;		_baudUSART
  5573 ;; This function is called by:
  5574 ;;		_Init_System
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           
  5579                           ;psect for function _InitUART
  5580  0BD0                     _InitUART:	
  5581                           
  5582                           ;UART.c: 80: unsigned long temp;
  5583                           ;UART.c: 81: unsigned char config;
  5584                           ;UART.c: 82: unsigned int spbrg;
  5585                           ;UART.c: 83: unsigned char baudconfig;
  5586                           ;UART.c: 92: PIE1bits.RCIE = 0;
  5587                           
  5588                           ;incstack = 0
  5589                           ; Regs used in _InitUART: [wreg+status,2+status,0+pclath+cstack]
  5590  0BD0  0021               	movlb	1	; select bank1
  5591  0BD1  1291               	bcf	17,5	;volatile
  5592                           
  5593                           ;UART.c: 93: LATC |= 0b00000100;
  5594  0BD2  0022               	movlb	2	; select bank2
  5595                           
  5596                           ;UART.c: 94: PPSLOCK =0;
  5597                           
  5598                           ;UART.c: 95: RC2PPS = 0b00000000;
  5599                           
  5600                           ;UART.c: 96: PPSLOCK =1;
  5601  0BD3  3197  27BD  3188   	fcall	PL16	;call to abstracted procedure
  5602                           
  5603                           ;UART.c: 98: CloseUSART();
  5604  0BD6  2448  3188         	fcall	_CloseUSART
  5605                           
  5606                           ;UART.c: 99: config =0;
  5607  0BD8  0023               	movlb	3	; select bank3
  5608  0BD9  01BD               	clrf	InitUART@config^(0+384)
  5609                           
  5610                           ;UART.c: 100: baudconfig =0;
  5611  0BDA  01BC               	clrf	InitUART@baudconfig^(0+384)
  5612                           
  5613                           ;UART.c: 105: config |= 0b00001000;
  5614  0BDB  15BD               	bsf	InitUART@config^(0+384),3
  5615                           
  5616                           ;UART.c: 106: config |= 0b00010000;
  5617  0BDC  163D               	bsf	InitUART@config^(0+384),4
  5618                           
  5619                           ;UART.c: 108: BAUD = Baud;
  5620  0BDD  0831               	movf	InitUART@parity^(0+384),w
  5621  0BDE  00E6               	movwf	_PARITY^(0+384)
  5622                           
  5623                           ;UART.c: 109: if(parity)
  5624  0BDF  0831               	movf	InitUART@parity^(0+384),w
  5625  0BE0  1903               	btfsc	3,2
  5626  0BE1  2BE4               	goto	l410
  5627                           
  5628                           ;UART.c: 110: {
  5629                           ;UART.c: 111: config |= 0b00000010;
  5630  0BE2  14BD               	bsf	InitUART@config^(0+384),1
  5631                           
  5632                           ;UART.c: 112: }
  5633  0BE3  2BE5               	goto	l411
  5634  0BE4                     l410:	
  5635                           
  5636                           ;UART.c: 113: else
  5637                           ;UART.c: 114: {
  5638                           ;UART.c: 115: config &= ~0b00000010;
  5639  0BE4  10BD               	bcf	InitUART@config^(0+384),1
  5640  0BE5                     l411:	
  5641                           
  5642                           ;UART.c: 116: }
  5643                           ;UART.c: 117: baudconfig |= 0b00001000;
  5644  0BE5  15BC               	bsf	InitUART@baudconfig^(0+384),3
  5645                           
  5646                           ;UART.c: 120: temp = (32000000L / Baud) - 1;
  5647  0BE6  0830               	movf	(InitUART@Baud+3)^(0+384),w
  5648  0BE7  00A3               	movwf	(___lldiv@divisor+3)^(0+384)
  5649  0BE8  082F               	movf	(InitUART@Baud+2)^(0+384),w
  5650  0BE9  00A2               	movwf	(___lldiv@divisor+2)^(0+384)
  5651  0BEA  082E               	movf	(InitUART@Baud+1)^(0+384),w
  5652  0BEB  00A1               	movwf	(___lldiv@divisor+1)^(0+384)
  5653  0BEC  082D               	movf	InitUART@Baud^(0+384),w
  5654  0BED  00A0               	movwf	___lldiv@divisor^(0+384)
  5655  0BEE  3001               	movlw	1
  5656  0BEF  00A7               	movwf	(___lldiv@dividend+3)^(0+384)
  5657  0BF0  30E8               	movlw	232
  5658  0BF1  00A6               	movwf	(___lldiv@dividend+2)^(0+384)
  5659  0BF2  3048               	movlw	72
  5660  0BF3  00A5               	movwf	(___lldiv@dividend+1)^(0+384)
  5661  0BF4  01A4               	clrf	___lldiv@dividend^(0+384)
  5662  0BF5  246F  3188         	fcall	___lldiv
  5663  0BF7  0823               	movf	(?___lldiv+3)^(0+384),w
  5664  0BF8  00C1               	movwf	(InitUART@temp+3)^(0+384)
  5665  0BF9  0822               	movf	(?___lldiv+2)^(0+384),w
  5666  0BFA  00C0               	movwf	(InitUART@temp+2)^(0+384)
  5667  0BFB  0821               	movf	(?___lldiv+1)^(0+384),w
  5668  0BFC  00BF               	movwf	(InitUART@temp+1)^(0+384)
  5669  0BFD  0820               	movf	?___lldiv^(0+384),w
  5670  0BFE  00BE               	movwf	InitUART@temp^(0+384)
  5671  0BFF  30FF               	movlw	255
  5672  0C00  07BE               	addwf	InitUART@temp^(0+384),f
  5673  0C01  3DBF               	addwfc	(InitUART@temp+1)^(0+384),f
  5674  0C02  3DC0               	addwfc	(InitUART@temp+2)^(0+384),f
  5675  0C03  3DC1               	addwfc	(InitUART@temp+3)^(0+384),f
  5676                           
  5677                           ;UART.c: 121: temp = (temp >> 2) - 1;
  5678  0C04  00B2               	movwf	??_InitUART^(0+384)
  5679  0C05  00B3               	movwf	(??_InitUART^(0+384)+1)
  5680  0C06  00B4               	movwf	(??_InitUART^(0+384)+2)
  5681  0C07  00B5               	movwf	(??_InitUART^(0+384)+3)
  5682  0C08  083E               	movf	InitUART@temp^(0+384),w
  5683  0C09  00B6               	movwf	(??_InitUART+4)^(0+384)
  5684  0C0A  083F               	movf	(InitUART@temp+1)^(0+384),w
  5685  0C0B  00B7               	movwf	((??_InitUART+4)^(0+384)+1)
  5686  0C0C  0840               	movf	(InitUART@temp+2)^(0+384),w
  5687  0C0D  00B8               	movwf	((??_InitUART+4)^(0+384)+2)
  5688  0C0E  0841               	movf	(InitUART@temp+3)^(0+384),w
  5689  0C0F  00B9               	movwf	((??_InitUART+4)^(0+384)+3)
  5690  0C10  3002               	movlw	2
  5691  0C11                     u4775:	
  5692  0C11  36B9               	lsrf	((??_InitUART+4)^(0+384)+3),f
  5693  0C12  0CB8               	rrf	((??_InitUART+4)^(0+384)+2),f
  5694  0C13  0CB7               	rrf	((??_InitUART+4)^(0+384)+1),f
  5695  0C14  0CB6               	rrf	(??_InitUART+4)^(0+384),f
  5696  0C15  0B89               	decfsz	9,f
  5697  0C16  2C11               	goto	u4775
  5698  0C17  0836               	movf	(??_InitUART+4)^(0+384),w
  5699  0C18  07B2               	addwf	??_InitUART^(0+384),f
  5700  0C19  0837               	movf	(??_InitUART+5)^(0+384),w
  5701  0C1A  3DB3               	addwfc	(??_InitUART^(0+384)+1),f
  5702  0C1B  0838               	movf	(??_InitUART+6)^(0+384),w
  5703  0C1C  3DB4               	addwfc	(??_InitUART^(0+384)+2),f
  5704  0C1D  0839               	movf	(??_InitUART+7)^(0+384),w
  5705  0C1E  3DB5               	addwfc	(??_InitUART^(0+384)+3),f
  5706  0C1F  0835               	movf	(??_InitUART+3)^(0+384),w
  5707  0C20  00C1               	movwf	(InitUART@temp+3)^(0+384)
  5708  0C21  0834               	movf	(??_InitUART+2)^(0+384),w
  5709  0C22  00C0               	movwf	(InitUART@temp+2)^(0+384)
  5710  0C23  0833               	movf	(??_InitUART+1)^(0+384),w
  5711  0C24  00BF               	movwf	(InitUART@temp+1)^(0+384)
  5712  0C25  0832               	movf	??_InitUART^(0+384),w
  5713  0C26  00BE               	movwf	InitUART@temp^(0+384)
  5714                           
  5715                           ;UART.c: 122: spbrg = (unsigned int)temp;
  5716  0C27  083F               	movf	(InitUART@temp+1)^(0+384),w
  5717  0C28  00BB               	movwf	(InitUART@spbrg+1)^(0+384)
  5718  0C29  083E               	movf	InitUART@temp^(0+384),w
  5719  0C2A  00BA               	movwf	InitUART@spbrg^(0+384)
  5720                           
  5721                           ;UART.c: 124: RCSTAbits.CREN = 0;
  5722  0C2B  121D               	bcf	29,4	;volatile
  5723                           
  5724                           ;UART.c: 125: OpenUSART(config, spbrg);
  5725  0C2C  083B               	movf	(InitUART@spbrg+1)^(0+384),w
  5726  0C2D  00A1               	movwf	(OpenUSART@spbrg+1)^(0+384)
  5727  0C2E  083A               	movf	InitUART@spbrg^(0+384),w
  5728  0C2F  00A0               	movwf	OpenUSART@spbrg^(0+384)
  5729  0C30  083D               	movf	InitUART@config^(0+384),w
  5730  0C31  2449  3188         	fcall	_OpenUSART
  5731                           
  5732                           ;UART.c: 126: baudUSART(baudconfig);
  5733  0C33  083C               	movf	InitUART@baudconfig^(0+384),w
  5734  0C34  24AE  3188         	fcall	_baudUSART
  5735  0C36  2443  3188         	fcall	_ReadUSART
  5736  0C38  2443  3188         	fcall	_ReadUSART
  5737  0C3A  2443  3188         	fcall	_ReadUSART
  5738  0C3C  2443  3188         	fcall	_ReadUSART
  5739  0C3E  2443  3188         	fcall	_ReadUSART
  5740                           
  5741                           ;UART.c: 133: PPSLOCK =0;
  5742                           
  5743                           ;UART.c: 134: RC2PPS = 0b00010100;
  5744                           
  5745                           ;UART.c: 135: CKPPS = 0b00010010;
  5746                           
  5747                           ;UART.c: 137: RXPPS = 0b00010101;
  5748                           
  5749                           ;UART.c: 139: PPSLOCK =1;
  5750  0C40  2366  3188         	fcall	PL4	;call to abstracted procedure
  5751                           
  5752                           ;UART.c: 141: PIR1bits.RCIF = 0;
  5753                           
  5754                           ;UART.c: 142: PIE1bits.RCIE = 1;
  5755                           
  5756                           ;UART.c: 143: INTCONbits.PEIE = 1;
  5757  0C42  2EA4               	ljmp	PL52	;call to abstracted procedure
  5758  0C43                     __end_of_InitUART:	
  5759  0C43                     __ptext30:	
  5760 ;; *************** function _ReadUSART *****************
  5761 ;; Defined at:
  5762 ;;		line 307 in file "UART.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;		None
  5765 ;; Auto vars:     Size  Location     Type
  5766 ;;  data            1    0[BANK3 ] unsigned char 
  5767 ;; Return value:  Size  Location     Type
  5768 ;;                  1    wreg      unsigned char 
  5769 ;; Registers used:
  5770 ;;		wreg
  5771 ;; Tracked objects:
  5772 ;;		On entry : 1F/3
  5773 ;;		On exit  : 1F/3
  5774 ;;		Unchanged: 0/0
  5775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5777 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5779 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5780 ;;Total ram usage:        1 bytes
  5781 ;; Hardware stack levels used:    1
  5782 ;; Hardware stack levels required when called:    7
  5783 ;; This function calls:
  5784 ;;		Nothing
  5785 ;; This function is called by:
  5786 ;;		_InitUART
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           
  5791                           ;psect for function _ReadUSART
  5792  0C43                     _ReadUSART:	
  5793                           
  5794                           ;UART.c: 309: char data;
  5795                           ;UART.c: 311: if(RCSTAbits.OERR)
  5796                           
  5797                           ;incstack = 0
  5798                           ; Regs used in _ReadUSART: [wreg]
  5799  0C43  189D               	btfsc	29,1	;volatile
  5800                           
  5801                           ;UART.c: 312: {
  5802                           ;UART.c: 313: RCSTAbits.CREN = 0;
  5803  0C44  121D               	bcf	29,4	;volatile
  5804                           
  5805                           ;UART.c: 314: }
  5806                           ;UART.c: 316: data = RCREG;
  5807  0C45  0819               	movf	25,w	;volatile
  5808  0C46  00A0               	movwf	ReadUSART@data^(0+384)
  5809                           
  5810                           ;UART.c: 318: return (data);
  5811  0C47  0008               	return
  5812  0C48                     __end_of_ReadUSART:	
  5813  0C48                     __ptext32:	
  5814 ;; *************** function _CloseUSART *****************
  5815 ;; Defined at:
  5816 ;;		line 65 in file "UART.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;		None
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;		None
  5821 ;; Return value:  Size  Location     Type
  5822 ;;		None               void
  5823 ;; Registers used:
  5824 ;;		wreg, status,2, status,0
  5825 ;; Tracked objects:
  5826 ;;		On entry : 1F/1C
  5827 ;;		On exit  : 1F/1
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;Total ram usage:        0 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    7
  5837 ;; This function calls:
  5838 ;;		Nothing
  5839 ;; This function is called by:
  5840 ;;		_InitUART
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _CloseUSART
  5846  0C48                     _CloseUSART:	
  5847                           
  5848                           ;UART.c: 67: RCSTA&=0b01001111;
  5849                           
  5850                           ;incstack = 0
  5851                           ; Regs used in _CloseUSART: [wreg+status,2+status,0]
  5852                           
  5853                           ;UART.c: 68: TX1STAbits.TXEN=0;
  5854                           
  5855                           ;UART.c: 69: PIE1&=0b11001111;
  5856  0C48  2E94               	ljmp	PL32	;call to abstracted procedure
  5857  0C49                     __end_of_CloseUSART:	
  5858  0C49                     __ptext31:	
  5859 ;; *************** function _OpenUSART *****************
  5860 ;; Defined at:
  5861 ;;		line 162 in file "UART.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;  config          1    wreg     unsigned char 
  5864 ;;  spbrg           2    0[BANK3 ] unsigned int 
  5865 ;; Auto vars:     Size  Location     Type
  5866 ;;  config          1    2[BANK3 ] unsigned char 
  5867 ;; Return value:  Size  Location     Type
  5868 ;;		None               void
  5869 ;; Registers used:
  5870 ;;		wreg, status,2
  5871 ;; Tracked objects:
  5872 ;;		On entry : 1F/3
  5873 ;;		On exit  : 1F/3
  5874 ;;		Unchanged: 0/0
  5875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5876 ;;      Params:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5877 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5879 ;;      Totals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  5880 ;;Total ram usage:        3 bytes
  5881 ;; Hardware stack levels used:    1
  5882 ;; Hardware stack levels required when called:    7
  5883 ;; This function calls:
  5884 ;;		Nothing
  5885 ;; This function is called by:
  5886 ;;		_InitUART
  5887 ;; This function uses a non-reentrant model
  5888 ;;
  5889                           
  5890                           
  5891                           ;psect for function _OpenUSART
  5892  0C49                     _OpenUSART:	
  5893                           
  5894                           ;incstack = 0
  5895                           ; Regs used in _OpenUSART: [wreg+status,2]
  5896                           ;OpenUSART@config stored from wreg
  5897  0C49  00A2               	movwf	OpenUSART@config^(0+384)
  5898                           
  5899                           ;UART.c: 164: TX1STA = 0;
  5900  0C4A  019E               	clrf	30	;volatile
  5901                           
  5902                           ;UART.c: 165: RC1STA = 0;
  5903  0C4B  019D               	clrf	29	;volatile
  5904                           
  5905                           ;UART.c: 167: if(config&0x01)
  5906  0C4C  1822               	btfsc	OpenUSART@config^(0+384),0
  5907                           
  5908                           ;UART.c: 168: {
  5909                           ;UART.c: 169: TX1STAbits.SYNC = 1;
  5910  0C4D  161E               	bsf	30,4	;volatile
  5911                           
  5912                           ;UART.c: 170: }
  5913                           ;UART.c: 172: if(config&0x02)
  5914  0C4E  1CA2               	btfss	OpenUSART@config^(0+384),1
  5915  0C4F  2C52               	goto	l4276
  5916                           
  5917                           ;UART.c: 173: {
  5918                           ;UART.c: 174: TX1STAbits.TX9 = 1;
  5919  0C50  171E               	bsf	30,6	;volatile
  5920                           
  5921                           ;UART.c: 175: RC1STAbits.RX9 = 1;
  5922  0C51  171D               	bsf	29,6	;volatile
  5923  0C52                     l4276:	
  5924                           
  5925                           ;UART.c: 176: }
  5926                           ;UART.c: 178: if(config&0x04)
  5927  0C52  1922               	btfsc	OpenUSART@config^(0+384),2
  5928                           
  5929                           ;UART.c: 179: {
  5930                           ;UART.c: 180: TX1STAbits.CSRC = 1;
  5931  0C53  179E               	bsf	30,7	;volatile
  5932                           
  5933                           ;UART.c: 181: }
  5934                           ;UART.c: 183: if(config&0x08)
  5935  0C54  1DA2               	btfss	OpenUSART@config^(0+384),3
  5936  0C55  2C58               	goto	l421
  5937                           
  5938                           ;UART.c: 184: {
  5939                           ;UART.c: 185: RC1STAbits.CREN = 1;
  5940  0C56  161D               	bsf	29,4	;volatile
  5941                           
  5942                           ;UART.c: 186: }
  5943  0C57  2C59               	goto	l4284
  5944  0C58                     l421:	
  5945                           
  5946                           ;UART.c: 187: else
  5947                           ;UART.c: 188: {
  5948                           ;UART.c: 189: RC1STAbits.SREN = 1;
  5949  0C58  169D               	bsf	29,5	;volatile
  5950  0C59                     l4284:	
  5951                           
  5952                           ;UART.c: 190: }
  5953                           ;UART.c: 192: if(config&0x10)
  5954  0C59  1A22               	btfsc	OpenUSART@config^(0+384),4
  5955                           
  5956                           ;UART.c: 193: {
  5957                           ;UART.c: 194: TX1STAbits.BRGH = 1;
  5958  0C5A  151E               	bsf	30,2	;volatile
  5959                           
  5960                           ;UART.c: 200: }
  5961                           ;UART.c: 202: if(config&0x40)
  5962  0C5B  1F22               	btfss	OpenUSART@config^(0+384),6
  5963  0C5C  2C60               	goto	l425
  5964                           
  5965                           ;UART.c: 203: {
  5966                           ;UART.c: 204: PIR1bits.RCIF = 0;
  5967                           
  5968                           ;UART.c: 205: PIE1bits.RCIE = 1;
  5969  0C5D  26AE  3188         	fcall	PL74	;call to abstracted procedure
  5970                           
  5971                           ;UART.c: 207: }
  5972  0C5F  2C62               	goto	l4294
  5973  0C60                     l425:	
  5974                           
  5975                           ;UART.c: 208: else
  5976                           ;UART.c: 209: {
  5977                           ;UART.c: 210: PIE1bits.RCIE = 0;
  5978  0C60  0021               	movlb	1	; select bank1
  5979  0C61  1291               	bcf	17,5	;volatile
  5980  0C62                     l4294:	
  5981                           
  5982                           ;UART.c: 211: }
  5983                           ;UART.c: 213: if(config&0x80)
  5984  0C62  0023               	movlb	3	; select bank3
  5985  0C63  1FA2               	btfss	OpenUSART@config^(0+384),7
  5986  0C64  2C68               	goto	l427
  5987                           
  5988                           ;UART.c: 214: {
  5989                           ;UART.c: 215: PIR1bits.TXIF = 0;
  5990                           
  5991                           ;UART.c: 216: PIE1bits.TXIE = 1;
  5992  0C65  26B3  3188         	fcall	PL78	;call to abstracted procedure
  5993                           
  5994                           ;UART.c: 217: }
  5995  0C67  2C6A               	goto	l4298
  5996  0C68                     l427:	
  5997                           
  5998                           ;UART.c: 218: else
  5999                           ;UART.c: 219: {
  6000                           ;UART.c: 220: PIE1bits.TXIE = 0;
  6001  0C68  0021               	movlb	1	; select bank1
  6002  0C69  1211               	bcf	17,4	;volatile
  6003  0C6A                     l4298:	
  6004                           
  6005                           ;UART.c: 221: }
  6006                           ;UART.c: 223: SPBRG = spbrg;
  6007  0C6A  0023               	movlb	3	; select bank3
  6008  0C6B  0820               	movf	OpenUSART@spbrg^(0+384),w
  6009  0C6C  009B               	movwf	27	;volatile
  6010                           
  6011                           ;UART.c: 224: SPBRGH = spbrg >> 8;
  6012  0C6D  0821               	movf	(OpenUSART@spbrg^(0+384)+1),w
  6013                           
  6014                           ;UART.c: 226: TX1STAbits.TXEN = 1;
  6015                           
  6016                           ;UART.c: 227: RC1STAbits.SPEN = 1;
  6017  0C6E  2EAA               	ljmp	PL72	;call to abstracted procedure
  6018  0C6F                     __end_of_OpenUSART:	
  6019  0C6F                     __ptext29:	
  6020 ;; *************** function ___lldiv *****************
  6021 ;; Defined at:
  6022 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;  divisor         4    0[BANK3 ] unsigned long 
  6025 ;;  dividend        4    4[BANK3 ] unsigned long 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  quotient        4    8[BANK3 ] unsigned long 
  6028 ;;  counter         1   12[BANK3 ] unsigned char 
  6029 ;; Return value:  Size  Location     Type
  6030 ;;                  4    0[BANK3 ] unsigned long 
  6031 ;; Registers used:
  6032 ;;		wreg, status,2, status,0
  6033 ;; Tracked objects:
  6034 ;;		On entry : 1F/3
  6035 ;;		On exit  : 1F/3
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6038 ;;      Params:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0
  6039 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  6040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6041 ;;      Totals:         0       0       0       0      13       0       0       0       0       0       0       0       
      +0       0
  6042 ;;Total ram usage:       13 bytes
  6043 ;; Hardware stack levels used:    1
  6044 ;; Hardware stack levels required when called:    7
  6045 ;; This function calls:
  6046 ;;		Nothing
  6047 ;; This function is called by:
  6048 ;;		_InitUART
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           
  6053                           ;psect for function ___lldiv
  6054  0C6F                     ___lldiv:	
  6055                           
  6056                           ;incstack = 0
  6057                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6058  0C6F  01A8               	clrf	___lldiv@quotient^(0+384)
  6059  0C70  01A9               	clrf	(___lldiv@quotient+1)^(0+384)
  6060  0C71  01AA               	clrf	(___lldiv@quotient+2)^(0+384)
  6061  0C72  01AB               	clrf	(___lldiv@quotient+3)^(0+384)
  6062  0C73  0823               	movf	(___lldiv@divisor+3)^(0+384),w
  6063  0C74  0422               	iorwf	(___lldiv@divisor+2)^(0+384),w
  6064  0C75  0421               	iorwf	(___lldiv@divisor+1)^(0+384),w
  6065  0C76  0420               	iorwf	___lldiv@divisor^(0+384),w
  6066  0C77  1903               	skipnz
  6067  0C78  2CA5               	goto	l4584
  6068  0C79  01AC               	clrf	___lldiv@counter^(0+384)
  6069  0C7A                     L5:	
  6070  0C7A  0AAC               	incf	___lldiv@counter^(0+384),f
  6071  0C7B  1BA3               	btfsc	(___lldiv@divisor+3)^(0+384),7
  6072  0C7C  2C82               	goto	l4572
  6073  0C7D  35A0               	lslf	___lldiv@divisor^(0+384),f
  6074  0C7E  0DA1               	rlf	(___lldiv@divisor+1)^(0+384),f
  6075  0C7F  0DA2               	rlf	(___lldiv@divisor+2)^(0+384),f
  6076  0C80  0DA3               	rlf	(___lldiv@divisor+3)^(0+384),f
  6077  0C81  2C7A               	goto	L5
  6078  0C82                     l4572:	
  6079  0C82  35A8               	lslf	___lldiv@quotient^(0+384),f
  6080  0C83  0DA9               	rlf	(___lldiv@quotient+1)^(0+384),f
  6081  0C84  0DAA               	rlf	(___lldiv@quotient+2)^(0+384),f
  6082  0C85  0DAB               	rlf	(___lldiv@quotient+3)^(0+384),f
  6083  0C86  0823               	movf	(___lldiv@divisor+3)^(0+384),w
  6084  0C87  0227               	subwf	(___lldiv@dividend+3)^(0+384),w
  6085  0C88  1D03               	skipz
  6086  0C89  2C94               	goto	u4575
  6087  0C8A  0822               	movf	(___lldiv@divisor+2)^(0+384),w
  6088  0C8B  0226               	subwf	(___lldiv@dividend+2)^(0+384),w
  6089  0C8C  1D03               	skipz
  6090  0C8D  2C94               	goto	u4575
  6091  0C8E  0821               	movf	(___lldiv@divisor+1)^(0+384),w
  6092  0C8F  0225               	subwf	(___lldiv@dividend+1)^(0+384),w
  6093  0C90  1D03               	skipz
  6094  0C91  2C94               	goto	u4575
  6095  0C92  0820               	movf	___lldiv@divisor^(0+384),w
  6096  0C93  0224               	subwf	___lldiv@dividend^(0+384),w
  6097  0C94                     u4575:	
  6098  0C94  1C03               	skipc
  6099  0C95  2C9F               	goto	l4580
  6100  0C96  0820               	movf	___lldiv@divisor^(0+384),w
  6101  0C97  02A4               	subwf	___lldiv@dividend^(0+384),f
  6102  0C98  0821               	movf	(___lldiv@divisor+1)^(0+384),w
  6103  0C99  3BA5               	subwfb	(___lldiv@dividend+1)^(0+384),f
  6104  0C9A  0822               	movf	(___lldiv@divisor+2)^(0+384),w
  6105  0C9B  3BA6               	subwfb	(___lldiv@dividend+2)^(0+384),f
  6106  0C9C  0823               	movf	(___lldiv@divisor+3)^(0+384),w
  6107  0C9D  3BA7               	subwfb	(___lldiv@dividend+3)^(0+384),f
  6108  0C9E  1428               	bsf	___lldiv@quotient^(0+384),0
  6109  0C9F                     l4580:	
  6110  0C9F  36A3               	lsrf	(___lldiv@divisor+3)^(0+384),f
  6111  0CA0  0CA2               	rrf	(___lldiv@divisor+2)^(0+384),f
  6112  0CA1  0CA1               	rrf	(___lldiv@divisor+1)^(0+384),f
  6113  0CA2  0CA0               	rrf	___lldiv@divisor^(0+384),f
  6114  0CA3  0BAC               	decfsz	___lldiv@counter^(0+384),f
  6115  0CA4  2C82               	goto	l4572
  6116  0CA5                     l4584:	
  6117  0CA5  082B               	movf	(___lldiv@quotient+3)^(0+384),w
  6118  0CA6  00A3               	movwf	(?___lldiv+3)^(0+384)
  6119  0CA7  082A               	movf	(___lldiv@quotient+2)^(0+384),w
  6120  0CA8  00A2               	movwf	(?___lldiv+2)^(0+384)
  6121  0CA9  0829               	movf	(___lldiv@quotient+1)^(0+384),w
  6122  0CAA  00A1               	movwf	(?___lldiv+1)^(0+384)
  6123  0CAB  0828               	movf	___lldiv@quotient^(0+384),w
  6124  0CAC  00A0               	movwf	?___lldiv^(0+384)
  6125  0CAD  0008               	return
  6126  0CAE                     __end_of___lldiv:	
  6127  0CAE                     __ptext28:	
  6128 ;; *************** function _baudUSART *****************
  6129 ;; Defined at:
  6130 ;;		line 151 in file "UART.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;  baudconfig      1    wreg     unsigned char 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  baudconfig      1    0[BANK3 ] unsigned char 
  6135 ;; Return value:  Size  Location     Type
  6136 ;;		None               void
  6137 ;; Registers used:
  6138 ;;		wreg, status,2
  6139 ;; Tracked objects:
  6140 ;;		On entry : 1F/3
  6141 ;;		On exit  : 1F/3
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6145 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6148 ;;Total ram usage:        1 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    7
  6151 ;; This function calls:
  6152 ;;		Nothing
  6153 ;; This function is called by:
  6154 ;;		_InitUART
  6155 ;; This function uses a non-reentrant model
  6156 ;;
  6157                           
  6158                           
  6159                           ;psect for function _baudUSART
  6160  0CAE                     _baudUSART:	
  6161                           
  6162                           ;incstack = 0
  6163                           ; Regs used in _baudUSART: [wreg+status,2]
  6164                           ;baudUSART@baudconfig stored from wreg
  6165  0CAE  00A0               	movwf	baudUSART@baudconfig^(0+384)
  6166                           
  6167                           ;UART.c: 153: BAUD1CON =0;
  6168  0CAF  019F               	clrf	31	;volatile
  6169                           
  6170                           ;UART.c: 154: BAUD1CON = baudconfig;
  6171  0CB0  009F               	movwf	31	;volatile
  6172  0CB1  0008               	return
  6173  0CB2                     __end_of_baudUSART:	
  6174  0CB2                     __ptext57:	
  6175 ;; *************** function i1_InitUART *****************
  6176 ;; Defined at:
  6177 ;;		line 78 in file "UART.c"
  6178 ;; Parameters:    Size  Location     Type
  6179 ;;  Baud            4    0[BANK0 ] unsigned long 
  6180 ;;  parity          1    4[BANK0 ] unsigned char 
  6181 ;; Auto vars:     Size  Location     Type
  6182 ;;  InitUART        4   17[BANK0 ] unsigned long 
  6183 ;;  InitUART        2   13[BANK0 ] unsigned int 
  6184 ;;  InitUART        1   16[BANK0 ] unsigned char 
  6185 ;;  InitUART        1   15[BANK0 ] unsigned char 
  6186 ;; Return value:  Size  Location     Type
  6187 ;;		None               void
  6188 ;; Registers used:
  6189 ;;		wreg, status,2, status,0, pclath, cstack
  6190 ;; Tracked objects:
  6191 ;;		On entry : 1F/0
  6192 ;;		On exit  : 1F/1
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6195 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;Total ram usage:       21 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    1
  6202 ;; This function calls:
  6203 ;;		i1_CloseUSART
  6204 ;;		i1_OpenUSART
  6205 ;;		i1_ReadUSART
  6206 ;;		i1___lldiv
  6207 ;;		i1_baudUSART
  6208 ;; This function is called by:
  6209 ;;		_SetBaud
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           
  6214                           ;psect for function i1_InitUART
  6215  0CB2                     i1_InitUART:	
  6216                           
  6217                           ;UART.c: 80: unsigned long temp;
  6218                           ;UART.c: 81: unsigned char config;
  6219                           ;UART.c: 82: unsigned int spbrg;
  6220                           ;UART.c: 83: unsigned char baudconfig;
  6221                           ;UART.c: 92: PIE1bits.RCIE = 0;
  6222                           
  6223                           ;incstack = 0
  6224                           ; Regs used in i1_InitUART: [wreg+status,2+status,0+pclath+cstack]
  6225  0CB2  0021               	movlb	1	; select bank1
  6226  0CB3  1291               	bcf	17,5	;volatile
  6227                           
  6228                           ;UART.c: 93: LATC |= 0b00000100;
  6229  0CB4  0022               	movlb	2	; select bank2
  6230                           
  6231                           ;UART.c: 94: PPSLOCK =0;
  6232                           
  6233                           ;UART.c: 95: RC2PPS = 0b00000000;
  6234                           
  6235                           ;UART.c: 96: PPSLOCK =1;
  6236  0CB5  3197  27BD  3188   	fcall	PL16	;call to abstracted procedure
  6237                           
  6238                           ;UART.c: 98: CloseUSART();
  6239  0CB8  265B  3188         	fcall	i1_CloseUSART
  6240                           
  6241                           ;UART.c: 99: config =0;
  6242  0CBA  0020               	movlb	0	; select bank0
  6243  0CBB  01B0               	clrf	i1InitUART@config
  6244                           
  6245                           ;UART.c: 100: baudconfig =0;
  6246  0CBC  01AF               	clrf	i1InitUART@baudconfig
  6247                           
  6248                           ;UART.c: 105: config |= 0b00001000;
  6249  0CBD  15B0               	bsf	i1InitUART@config,3
  6250                           
  6251                           ;UART.c: 106: config |= 0b00010000;
  6252  0CBE  1630               	bsf	i1InitUART@config,4
  6253                           
  6254                           ;UART.c: 108: BAUD = Baud;
  6255  0CBF  0824               	movf	i1InitUART@parity,w
  6256  0CC0  0023               	movlb	3	; select bank3
  6257  0CC1  00E6               	movwf	_PARITY^(0+384)
  6258                           
  6259                           ;UART.c: 109: if(parity)
  6260  0CC2  0020               	movlb	0	; select bank0
  6261  0CC3  0824               	movf	i1InitUART@parity,w
  6262  0CC4  1903               	btfsc	3,2
  6263  0CC5  2CC8               	goto	i1l410
  6264                           
  6265                           ;UART.c: 110: {
  6266                           ;UART.c: 111: config |= 0b00000010;
  6267  0CC6  14B0               	bsf	i1InitUART@config,1
  6268                           
  6269                           ;UART.c: 112: }
  6270  0CC7  2CC9               	goto	i1l411
  6271  0CC8                     i1l410:	
  6272                           
  6273                           ;UART.c: 113: else
  6274                           ;UART.c: 114: {
  6275                           ;UART.c: 115: config &= ~0b00000010;
  6276  0CC8  10B0               	bcf	i1InitUART@config,1
  6277  0CC9                     i1l411:	
  6278                           
  6279                           ;UART.c: 116: }
  6280                           ;UART.c: 117: baudconfig |= 0b00001000;
  6281  0CC9  15AF               	bsf	i1InitUART@baudconfig,3
  6282                           
  6283                           ;UART.c: 120: temp = (32000000L / Baud) - 1;
  6284  0CCA  0823               	movf	i1InitUART@Baud+3,w
  6285  0CCB  00F3               	movwf	i1___lldiv@divisor+3
  6286  0CCC  0822               	movf	i1InitUART@Baud+2,w
  6287  0CCD  00F2               	movwf	i1___lldiv@divisor+2
  6288  0CCE  0821               	movf	i1InitUART@Baud+1,w
  6289  0CCF  00F1               	movwf	i1___lldiv@divisor+1
  6290  0CD0  0820               	movf	i1InitUART@Baud,w
  6291  0CD1  00F0               	movwf	i1___lldiv@divisor
  6292  0CD2  3001               	movlw	1
  6293  0CD3  00F7               	movwf	i1___lldiv@dividend+3
  6294  0CD4  30E8               	movlw	232
  6295  0CD5  00F6               	movwf	i1___lldiv@dividend+2
  6296  0CD6  3048               	movlw	72
  6297  0CD7  00F5               	movwf	i1___lldiv@dividend+1
  6298  0CD8  01F4               	clrf	i1___lldiv@dividend
  6299  0CD9  261C  3188         	fcall	i1___lldiv
  6300  0CDB  0873               	movf	?i1___lldiv+3,w
  6301  0CDC  00B4               	movwf	i1InitUART@temp+3
  6302  0CDD  0872               	movf	?i1___lldiv+2,w
  6303  0CDE  00B3               	movwf	i1InitUART@temp+2
  6304  0CDF  0871               	movf	?i1___lldiv+1,w
  6305  0CE0  00B2               	movwf	i1InitUART@temp+1
  6306  0CE1  0870               	movf	?i1___lldiv,w
  6307  0CE2  00B1               	movwf	i1InitUART@temp
  6308  0CE3  30FF               	movlw	255
  6309  0CE4  07B1               	addwf	i1InitUART@temp,f
  6310  0CE5  3DB2               	addwfc	i1InitUART@temp+1,f
  6311  0CE6  3DB3               	addwfc	i1InitUART@temp+2,f
  6312  0CE7  3DB4               	addwfc	i1InitUART@temp+3,f
  6313                           
  6314                           ;UART.c: 121: temp = (temp >> 2) - 1;
  6315  0CE8  00A5               	movwf	??i1_InitUART
  6316  0CE9  00A6               	movwf	??i1_InitUART+1
  6317  0CEA  00A7               	movwf	??i1_InitUART+2
  6318  0CEB  00A8               	movwf	??i1_InitUART+3
  6319  0CEC  0831               	movf	i1InitUART@temp,w
  6320  0CED  00A9               	movwf	??i1_InitUART+4
  6321  0CEE  0832               	movf	i1InitUART@temp+1,w
  6322  0CEF  00AA               	movwf	??i1_InitUART+5
  6323  0CF0  0833               	movf	i1InitUART@temp+2,w
  6324  0CF1  00AB               	movwf	??i1_InitUART+6
  6325  0CF2  0834               	movf	i1InitUART@temp+3,w
  6326  0CF3  00AC               	movwf	??i1_InitUART+7
  6327  0CF4  3002               	movlw	2
  6328  0CF5                     u460_25:	
  6329  0CF5  36AC               	lsrf	??i1_InitUART+7,f
  6330  0CF6  0CAB               	rrf	??i1_InitUART+6,f
  6331  0CF7  0CAA               	rrf	??i1_InitUART+5,f
  6332  0CF8  0CA9               	rrf	??i1_InitUART+4,f
  6333  0CF9  0B89               	decfsz	9,f
  6334  0CFA  2CF5               	goto	u460_25
  6335  0CFB  0829               	movf	??i1_InitUART+4,w
  6336  0CFC  07A5               	addwf	??i1_InitUART,f
  6337  0CFD  082A               	movf	??i1_InitUART+5,w
  6338  0CFE  3DA6               	addwfc	??i1_InitUART+1,f
  6339  0CFF  082B               	movf	??i1_InitUART+6,w
  6340  0D00  3DA7               	addwfc	??i1_InitUART+2,f
  6341  0D01  082C               	movf	??i1_InitUART+7,w
  6342  0D02  3DA8               	addwfc	??i1_InitUART+3,f
  6343  0D03  0828               	movf	??i1_InitUART+3,w
  6344  0D04  00B4               	movwf	i1InitUART@temp+3
  6345  0D05  0827               	movf	??i1_InitUART+2,w
  6346  0D06  00B3               	movwf	i1InitUART@temp+2
  6347  0D07  0826               	movf	??i1_InitUART+1,w
  6348  0D08  00B2               	movwf	i1InitUART@temp+1
  6349  0D09  0825               	movf	??i1_InitUART,w
  6350  0D0A  00B1               	movwf	i1InitUART@temp
  6351                           
  6352                           ;UART.c: 122: spbrg = (unsigned int)temp;
  6353  0D0B  0832               	movf	i1InitUART@temp+1,w
  6354  0D0C  00AE               	movwf	i1InitUART@spbrg+1
  6355  0D0D  0831               	movf	i1InitUART@temp,w
  6356  0D0E  00AD               	movwf	i1InitUART@spbrg
  6357                           
  6358                           ;UART.c: 124: RCSTAbits.CREN = 0;
  6359  0D0F  0023               	movlb	3	; select bank3
  6360  0D10  121D               	bcf	29,4	;volatile
  6361                           
  6362                           ;UART.c: 125: OpenUSART(config, spbrg);
  6363  0D11  0020               	movlb	0	; select bank0
  6364  0D12  082E               	movf	i1InitUART@spbrg+1,w
  6365  0D13  00F1               	movwf	i1OpenUSART@spbrg+1
  6366  0D14  082D               	movf	i1InitUART@spbrg,w
  6367  0D15  00F0               	movwf	i1OpenUSART@spbrg
  6368  0D16  0830               	movf	i1InitUART@config,w
  6369  0D17  265C  3188         	fcall	i1_OpenUSART
  6370                           
  6371                           ;UART.c: 126: baudUSART(baudconfig);
  6372  0D19  0020               	movlb	0	; select bank0
  6373  0D1A  082F               	movf	i1InitUART@baudconfig,w
  6374  0D1B  2681  3188         	fcall	i1_baudUSART
  6375  0D1D  252A  3188         	fcall	i1_ReadUSART
  6376  0D1F  252A  3188         	fcall	i1_ReadUSART
  6377  0D21  252A  3188         	fcall	i1_ReadUSART
  6378  0D23  252A  3188         	fcall	i1_ReadUSART
  6379  0D25  252A  3188         	fcall	i1_ReadUSART
  6380                           
  6381                           ;UART.c: 133: PPSLOCK =0;
  6382                           
  6383                           ;UART.c: 134: RC2PPS = 0b00010100;
  6384                           
  6385                           ;UART.c: 135: CKPPS = 0b00010010;
  6386                           
  6387                           ;UART.c: 137: RXPPS = 0b00010101;
  6388                           
  6389                           ;UART.c: 139: PPSLOCK =1;
  6390  0D27  2366  3188         	fcall	PL4	;call to abstracted procedure
  6391                           
  6392                           ;UART.c: 141: PIR1bits.RCIF = 0;
  6393                           
  6394                           ;UART.c: 142: PIE1bits.RCIE = 1;
  6395                           
  6396                           ;UART.c: 143: INTCONbits.PEIE = 1;
  6397  0D29  2EA4               	ljmp	PL52	;call to abstracted procedure
  6398  0D2A                     __end_ofi1_InitUART:	
  6399  0D2A                     __ptext59:	
  6400 ;; *************** function i1_ReadUSART *****************
  6401 ;; Defined at:
  6402 ;;		line 307 in file "UART.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;		None
  6405 ;; Auto vars:     Size  Location     Type
  6406 ;;  ReadUSART       1    0[COMMON] unsigned char 
  6407 ;; Return value:  Size  Location     Type
  6408 ;;                  1    wreg      unsigned char 
  6409 ;; Registers used:
  6410 ;;		wreg
  6411 ;; Tracked objects:
  6412 ;;		On entry : 1E/3
  6413 ;;		On exit  : 1F/3
  6414 ;;		Unchanged: 0/0
  6415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6417 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6419 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;Total ram usage:        1 bytes
  6421 ;; Hardware stack levels used:    1
  6422 ;; This function calls:
  6423 ;;		Nothing
  6424 ;; This function is called by:
  6425 ;;		_isr
  6426 ;;		i1_InitUART
  6427 ;; This function uses a non-reentrant model
  6428 ;;
  6429                           
  6430                           
  6431                           ;psect for function i1_ReadUSART
  6432  0D2A                     i1_ReadUSART:	
  6433                           
  6434                           ;UART.c: 309: char data;
  6435                           ;UART.c: 311: if(RCSTAbits.OERR)
  6436                           
  6437                           ;incstack = 0
  6438                           ; Regs used in i1_ReadUSART: [wreg]
  6439  0D2A  0023               	movlb	3	; select bank3
  6440  0D2B  189D               	btfsc	29,1	;volatile
  6441                           
  6442                           ;UART.c: 312: {
  6443                           ;UART.c: 313: RCSTAbits.CREN = 0;
  6444  0D2C  121D               	bcf	29,4	;volatile
  6445                           
  6446                           ;UART.c: 314: }
  6447                           ;UART.c: 316: data = RCREG;
  6448  0D2D  0819               	movf	25,w	;volatile
  6449  0D2E  00F0               	movwf	i1ReadUSART@data
  6450                           
  6451                           ;UART.c: 318: return (data);
  6452  0D2F  0008               	return
  6453  0D30                     __end_ofi1_ReadUSART:	
  6454  0D30                     __ptext62:	
  6455 ;; *************** function _sprintf *****************
  6456 ;; Defined at:
  6457 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;  sp              2    8[BANK0 ] PTR unsigned char 
  6460 ;;		 -> Process_PS2_ScanCode@buf(60), SetBaud@buf(50), 
  6461 ;;  f               2   10[BANK0 ] PTR const unsigned char 
  6462 ;;		 -> STR_18(24), STR_11(12), 
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;  val             4   25[BANK0 ] unsigned long 
  6465 ;;  tmpval          4    0        struct .
  6466 ;;  prec            2   23[BANK0 ] int 
  6467 ;;  cp              2    0        PTR const unsigned char 
  6468 ;;  len             2    0        unsigned int 
  6469 ;;  c               1   30[BANK0 ] char 
  6470 ;;  ap              1   29[BANK0 ] PTR void [1]
  6471 ;;		 -> ?_sprintf(2), 
  6472 ;;  flag            1   22[BANK0 ] unsigned char 
  6473 ;; Return value:  Size  Location     Type
  6474 ;;                  2    8[BANK0 ] int 
  6475 ;; Registers used:
  6476 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6477 ;; Tracked objects:
  6478 ;;		On entry : 1F/0
  6479 ;;		On exit  : 1F/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6482 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;Total ram usage:       23 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    1
  6489 ;; This function calls:
  6490 ;;		___llmod
  6491 ;;		i1___lldiv
  6492 ;; This function is called by:
  6493 ;;		_SetBaud
  6494 ;;		_Process_PS2_ScanCode
  6495 ;; This function uses a non-reentrant model
  6496 ;;
  6497                           
  6498                           
  6499                           ;psect for function _sprintf
  6500  0D30                     _sprintf:	
  6501                           
  6502                           ;doprnt.c: 494: va_list ap;
  6503                           ;doprnt.c: 499: signed char c;
  6504                           ;doprnt.c: 504: int prec;
  6505                           ;doprnt.c: 508: unsigned char flag;
  6506                           ;doprnt.c: 523: union {
  6507                           ;doprnt.c: 524: unsigned long vd;
  6508                           ;doprnt.c: 525: double integ;
  6509                           ;doprnt.c: 526: } tmpval;
  6510                           ;doprnt.c: 528: unsigned long val;
  6511                           ;doprnt.c: 529: unsigned len;
  6512                           ;doprnt.c: 530: const char * cp;
  6513                           ;doprnt.c: 533: *ap = __va_start();
  6514                           
  6515                           ;incstack = 0
  6516                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6517  0D30  302C               	movlw	(low ((?_sprintf| 0+4)))& (0+255)
  6518  0D31  00BD               	movwf	sprintf@ap
  6519  0D32                     i1l4366:	
  6520                           ;doprnt.c: 536: while(c = *f++) {
  6521                           
  6522  0D32  2687  3188         	fcall	PL18	;call to abstracted procedure
  6523  0D34  083E               	movf	sprintf@c,w
  6524  0D35  1903               	btfsc	3,2
  6525  0D36  2DE0               	goto	i1l4368
  6526                           
  6527                           ;doprnt.c: 538: if(c != '%')
  6528  0D37  3025               	movlw	37
  6529  0D38  063E               	xorwf	sprintf@c,w
  6530  0D39  1903               	btfsc	3,2
  6531  0D3A  2D40               	goto	i1l4326
  6532                           
  6533                           ;doprnt.c: 540: {
  6534                           ;doprnt.c: 541: ((*sp++ = (c)));
  6535  0D3B  269C  3188         	fcall	PL38	;call to abstracted procedure
  6536  0D3D  1903               	skipnz
  6537  0D3E  0AA9               	incf	sprintf@sp+1,f
  6538                           
  6539                           ;doprnt.c: 542: continue;
  6540  0D3F  2D32               	goto	i1l4366
  6541  0D40                     i1l4326:	
  6542                           
  6543                           ;doprnt.c: 543: }
  6544                           ;doprnt.c: 548: flag = 0;
  6545  0D40  01B6               	clrf	sprintf@flag
  6546  0D41  2D47               	goto	i1l4332
  6547  0D42                     i1l1089:	
  6548                           ;doprnt.c: 641: case 'l':
  6549                           
  6550                           
  6551                           ;doprnt.c: 643: flag |= 0x10;
  6552  0D42  1636               	bsf	sprintf@flag,4
  6553                           
  6554                           ;doprnt.c: 644: goto loop;
  6555  0D43  2D47               	goto	i1l4332
  6556  0D44                     i1l4328:	
  6557                           
  6558                           ;doprnt.c: 818: flag |= 0xC0;
  6559  0D44  30C0               	movlw	192
  6560  0D45  04B6               	iorwf	sprintf@flag,f
  6561                           
  6562                           ;doprnt.c: 819: break;
  6563  0D46  2D53               	goto	i1l1092
  6564  0D47                     i1l4332:	
  6565  0D47  2687  3188         	fcall	PL18	;call to abstracted procedure
  6566                           
  6567                           ; Switch size 1, requested type "space"
  6568                           ; Number of cases is 3, Range of values is 0 to 117
  6569                           ; switch strategies available:
  6570                           ; Name         Instructions Cycles
  6571                           ; simple_byte           10     6 (average)
  6572                           ; direct_byte          242     6 (fixed)
  6573                           ; jumptable            260     6 (fixed)
  6574                           ;	Chosen strategy is simple_byte
  6575  0D49  3A00               	xorlw	0	; case 0
  6576  0D4A  1903               	skipnz
  6577  0D4B  2DE0               	goto	i1l4368
  6578  0D4C  3A6C               	xorlw	108	; case 108
  6579  0D4D  1903               	skipnz
  6580  0D4E  2D42               	goto	i1l1089
  6581  0D4F  3A19               	xorlw	25	; case 117
  6582  0D50  1903               	skipnz
  6583  0D51  2D44               	goto	i1l4328
  6584  0D52  2D32               	goto	i1l4366
  6585  0D53                     i1l1092:	
  6586                           
  6587                           ;doprnt.c: 1273: {
  6588                           ;doprnt.c: 1281: if(flag & 0x10)
  6589  0D53  1E36               	btfss	sprintf@flag,4
  6590  0D54  2D63               	goto	i1l4338
  6591                           
  6592                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  6593  0D55  083D               	movf	sprintf@ap,w
  6594  0D56  0086               	movwf	6
  6595  0D57  0187               	clrf	7
  6596  0D58  3F40               	moviw [0]fsr1
  6597  0D59  00B9               	movwf	sprintf@val
  6598  0D5A  3F41               	moviw [1]fsr1
  6599  0D5B  00BA               	movwf	sprintf@val+1
  6600  0D5C  3F42               	moviw [2]fsr1
  6601  0D5D  00BB               	movwf	sprintf@val+2
  6602  0D5E  3F43               	moviw [3]fsr1
  6603  0D5F  00BC               	movwf	sprintf@val+3
  6604  0D60  3004               	movlw	4
  6605  0D61  07BD               	addwf	sprintf@ap,f
  6606  0D62  2D72               	goto	i1l4342
  6607  0D63                     i1l4338:	
  6608                           
  6609                           ;doprnt.c: 1283: else
  6610                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6611  0D63  083D               	movf	sprintf@ap,w
  6612  0D64  0086               	movwf	6
  6613  0D65  0187               	clrf	7
  6614  0D66  3F40               	moviw [0]fsr1
  6615  0D67  00B0               	movwf	??_sprintf
  6616  0D68  3F41               	moviw [1]fsr1
  6617  0D69  00B1               	movwf	??_sprintf+1
  6618  0D6A  0830               	movf	??_sprintf,w
  6619  0D6B  00B9               	movwf	sprintf@val
  6620  0D6C  0831               	movf	??_sprintf+1,w
  6621  0D6D  00BA               	movwf	sprintf@val+1
  6622  0D6E  01BB               	clrf	sprintf@val+2
  6623  0D6F  01BC               	clrf	sprintf@val+3
  6624  0D70  0ABD               	incf	sprintf@ap,f
  6625  0D71  0ABD               	incf	sprintf@ap,f
  6626  0D72                     i1l4342:	
  6627                           
  6628                           ;doprnt.c: 1287: }
  6629                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6630  0D72  01BE               	clrf	sprintf@c
  6631  0D73  0ABE               	incf	sprintf@c,f
  6632  0D74                     i1l4348:	
  6633                           
  6634                           ;doprnt.c: 1306: if(val < dpowers[c])
  6635  0D74  083E               	movf	sprintf@c,w
  6636  0D75  00B0               	movwf	??_sprintf
  6637  0D76  30D3               	movlw	low (_dpowers| (0+32768))
  6638  0D77  01B1               	clrf	??_sprintf+1
  6639  0D78  35B0               	lslf	??_sprintf,f
  6640  0D79  0DB1               	rlf	??_sprintf+1,f
  6641  0D7A  35B0               	lslf	??_sprintf,f
  6642  0D7B  0DB1               	rlf	??_sprintf+1,f
  6643  0D7C  0730               	addwf	??_sprintf,w
  6644  0D7D  0084               	movwf	4
  6645  0D7E  3099               	movlw	high (_dpowers| (0+32768))
  6646  0D7F  3D31               	addwfc	??_sprintf+1,w
  6647  0D80  0085               	movwf	5
  6648  0D81  3F00               	moviw [0]fsr0
  6649  0D82  00B2               	movwf	??_sprintf+2
  6650  0D83  3F01               	moviw [1]fsr0
  6651  0D84  00B3               	movwf	??_sprintf+3
  6652  0D85  3F02               	moviw [2]fsr0
  6653  0D86  00B4               	movwf	??_sprintf+4
  6654  0D87  3F03               	moviw [3]fsr0
  6655  0D88  00B5               	movwf	??_sprintf+5
  6656  0D89  023C               	subwf	sprintf@val+3,w
  6657  0D8A  1D03               	skipz
  6658  0D8B  2D96               	goto	u422_25
  6659  0D8C  0834               	movf	??_sprintf+4,w
  6660  0D8D  023B               	subwf	sprintf@val+2,w
  6661  0D8E  1D03               	skipz
  6662  0D8F  2D96               	goto	u422_25
  6663  0D90  0833               	movf	??_sprintf+3,w
  6664  0D91  023A               	subwf	sprintf@val+1,w
  6665  0D92  1D03               	skipz
  6666  0D93  2D96               	goto	u422_25
  6667  0D94  0832               	movf	??_sprintf+2,w
  6668  0D95  0239               	subwf	sprintf@val,w
  6669  0D96                     u422_25:	
  6670  0D96  1C03               	btfss	3,0
  6671  0D97  2D9D               	goto	i1l4356
  6672  0D98  300A               	movlw	10
  6673  0D99  0ABE               	incf	sprintf@c,f
  6674  0D9A  063E               	xorwf	sprintf@c,w
  6675  0D9B  1D03               	btfss	3,2
  6676  0D9C  2D74               	goto	i1l4348
  6677  0D9D                     i1l4356:	
  6678                           
  6679                           ;doprnt.c: 1422: {
  6680                           ;doprnt.c: 1469: }
  6681                           ;doprnt.c: 1472: prec = c;
  6682  0D9D  083E               	movf	sprintf@c,w
  6683  0D9E  00B7               	movwf	sprintf@prec
  6684  0D9F  01B8               	clrf	sprintf@prec+1
  6685  0DA0  1BB7               	btfsc	sprintf@prec,7
  6686  0DA1  03B8               	decf	sprintf@prec+1,f
  6687  0DA2                     i1l4364:	
  6688                           ;doprnt.c: 1474: while(prec--) {
  6689                           
  6690  0DA2  30FF               	movlw	-1
  6691  0DA3  07B7               	addwf	sprintf@prec,f
  6692  0DA4  1C03               	skipc
  6693  0DA5  03B8               	decf	sprintf@prec+1,f
  6694  0DA6  0F37               	incfsz	sprintf@prec,w
  6695  0DA7  2DAB               	goto	i1l4358
  6696  0DA8  0A38               	incf	sprintf@prec+1,w
  6697  0DA9  1903               	btfsc	3,2
  6698  0DAA  2D32               	goto	i1l4366
  6699  0DAB                     i1l4358:	
  6700                           
  6701                           ;doprnt.c: 1478: {
  6702                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6703  0DAB  300A               	movlw	10
  6704  0DAC  00A0               	movwf	___llmod@divisor
  6705  0DAD  01A1               	clrf	___llmod@divisor+1
  6706  0DAE  01A2               	clrf	___llmod@divisor+2
  6707  0DAF  01A3               	clrf	___llmod@divisor+3
  6708  0DB0  0838               	movf	sprintf@prec+1,w
  6709  0DB1  0085               	movwf	5
  6710  0DB2  0837               	movf	sprintf@prec,w
  6711  0DB3  0084               	movwf	4
  6712  0DB4  30D3               	movlw	low (_dpowers| (0+32768))
  6713  0DB5  3584               	lslf	4,f
  6714  0DB6  0D85               	rlf	5,f
  6715  0DB7  3584               	lslf	4,f
  6716  0DB8  0D85               	rlf	5,f
  6717  0DB9  0784               	addwf	4,f
  6718  0DBA  3099               	movlw	high (_dpowers| (0+32768))
  6719  0DBB  3D85               	addwfc	5,f
  6720  0DBC  3F00               	moviw [0]fsr0
  6721  0DBD  00F0               	movwf	i1___lldiv@divisor
  6722  0DBE  3F01               	moviw [1]fsr0
  6723  0DBF  00F1               	movwf	i1___lldiv@divisor+1
  6724  0DC0  3F02               	moviw [2]fsr0
  6725  0DC1  00F2               	movwf	i1___lldiv@divisor+2
  6726  0DC2  3F03               	moviw [3]fsr0
  6727  0DC3  00F3               	movwf	i1___lldiv@divisor+3
  6728  0DC4  083C               	movf	sprintf@val+3,w
  6729  0DC5  00F7               	movwf	i1___lldiv@dividend+3
  6730  0DC6  083B               	movf	sprintf@val+2,w
  6731  0DC7  00F6               	movwf	i1___lldiv@dividend+2
  6732  0DC8  083A               	movf	sprintf@val+1,w
  6733  0DC9  00F5               	movwf	i1___lldiv@dividend+1
  6734  0DCA  0839               	movf	sprintf@val,w
  6735  0DCB  00F4               	movwf	i1___lldiv@dividend
  6736  0DCC  261C  3188         	fcall	i1___lldiv
  6737  0DCE  0873               	movf	?i1___lldiv+3,w
  6738  0DCF  00A7               	movwf	___llmod@dividend+3
  6739  0DD0  0872               	movf	?i1___lldiv+2,w
  6740  0DD1  00A6               	movwf	___llmod@dividend+2
  6741  0DD2  0871               	movf	?i1___lldiv+1,w
  6742  0DD3  00A5               	movwf	___llmod@dividend+1
  6743  0DD4  0870               	movf	?i1___lldiv,w
  6744  0DD5  00A4               	movwf	___llmod@dividend
  6745  0DD6  25E6  3188         	fcall	___llmod
  6746  0DD8  0820               	movf	?___llmod,w
  6747  0DD9  3E30               	addlw	48
  6748  0DDA  00BE               	movwf	sprintf@c
  6749                           
  6750                           ;doprnt.c: 1523: }
  6751                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6752  0DDB  269C  3188         	fcall	PL38	;call to abstracted procedure
  6753  0DDD  1903               	skipnz
  6754  0DDE  0AA9               	incf	sprintf@sp+1,f
  6755  0DDF  2DA2               	goto	i1l4364
  6756  0DE0                     i1l4368:	
  6757                           
  6758                           ;doprnt.c: 1538: *sp = 0;
  6759  0DE0  0828               	movf	sprintf@sp,w
  6760  0DE1  0086               	movwf	6
  6761  0DE2  0829               	movf	sprintf@sp+1,w
  6762  0DE3  0087               	movwf	7
  6763  0DE4  0181               	clrf	1
  6764  0DE5  0008               	return
  6765  0DE6                     __end_of_sprintf:	
  6766  0DE6                     __ptext64:	
  6767 ;; *************** function ___llmod *****************
  6768 ;; Defined at:
  6769 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  6770 ;; Parameters:    Size  Location     Type
  6771 ;;  divisor         4    0[BANK0 ] unsigned long 
  6772 ;;  dividend        4    4[BANK0 ] unsigned long 
  6773 ;; Auto vars:     Size  Location     Type
  6774 ;;  counter         1   13[COMMON] unsigned char 
  6775 ;; Return value:  Size  Location     Type
  6776 ;;                  4    0[BANK0 ] unsigned long 
  6777 ;; Registers used:
  6778 ;;		wreg, status,2, status,0
  6779 ;; Tracked objects:
  6780 ;;		On entry : 1F/0
  6781 ;;		On exit  : 1F/0
  6782 ;;		Unchanged: 0/0
  6783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6784 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6785 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;Total ram usage:        9 bytes
  6789 ;; Hardware stack levels used:    1
  6790 ;; This function calls:
  6791 ;;		Nothing
  6792 ;; This function is called by:
  6793 ;;		_sprintf
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           
  6798                           ;psect for function ___llmod
  6799  0DE6                     ___llmod:	
  6800                           
  6801                           ;incstack = 0
  6802                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6803  0DE6  0823               	movf	___llmod@divisor+3,w
  6804  0DE7  0422               	iorwf	___llmod@divisor+2,w
  6805  0DE8  0421               	iorwf	___llmod@divisor+1,w
  6806  0DE9  0420               	iorwf	___llmod@divisor,w
  6807  0DEA  1903               	skipnz
  6808  0DEB  2E13               	goto	i1l4104
  6809  0DEC  01FD               	clrf	___llmod@counter
  6810  0DED                     L18:	
  6811  0DED  0AFD               	incf	___llmod@counter,f
  6812  0DEE  1BA3               	btfsc	___llmod@divisor+3,7
  6813  0DEF  2DF5               	goto	i1l4096
  6814  0DF0  35A0               	lslf	___llmod@divisor,f
  6815  0DF1  0DA1               	rlf	___llmod@divisor+1,f
  6816  0DF2  0DA2               	rlf	___llmod@divisor+2,f
  6817  0DF3  0DA3               	rlf	___llmod@divisor+3,f
  6818  0DF4  2DED               	goto	L18
  6819  0DF5                     i1l4096:	
  6820  0DF5  0823               	movf	___llmod@divisor+3,w
  6821  0DF6  0227               	subwf	___llmod@dividend+3,w
  6822  0DF7  1D03               	skipz
  6823  0DF8  2E03               	goto	u381_25
  6824  0DF9  0822               	movf	___llmod@divisor+2,w
  6825  0DFA  0226               	subwf	___llmod@dividend+2,w
  6826  0DFB  1D03               	skipz
  6827  0DFC  2E03               	goto	u381_25
  6828  0DFD  0821               	movf	___llmod@divisor+1,w
  6829  0DFE  0225               	subwf	___llmod@dividend+1,w
  6830  0DFF  1D03               	skipz
  6831  0E00  2E03               	goto	u381_25
  6832  0E01  0820               	movf	___llmod@divisor,w
  6833  0E02  0224               	subwf	___llmod@dividend,w
  6834  0E03                     u381_25:	
  6835  0E03  1C03               	skipc
  6836  0E04  2E0D               	goto	i1l4100
  6837  0E05  0820               	movf	___llmod@divisor,w
  6838  0E06  02A4               	subwf	___llmod@dividend,f
  6839  0E07  0821               	movf	___llmod@divisor+1,w
  6840  0E08  3BA5               	subwfb	___llmod@dividend+1,f
  6841  0E09  0822               	movf	___llmod@divisor+2,w
  6842  0E0A  3BA6               	subwfb	___llmod@dividend+2,f
  6843  0E0B  0823               	movf	___llmod@divisor+3,w
  6844  0E0C  3BA7               	subwfb	___llmod@dividend+3,f
  6845  0E0D                     i1l4100:	
  6846  0E0D  36A3               	lsrf	___llmod@divisor+3,f
  6847  0E0E  0CA2               	rrf	___llmod@divisor+2,f
  6848  0E0F  0CA1               	rrf	___llmod@divisor+1,f
  6849  0E10  0CA0               	rrf	___llmod@divisor,f
  6850  0E11  0BFD               	decfsz	___llmod@counter,f
  6851  0E12  2DF5               	goto	i1l4096
  6852  0E13                     i1l4104:	
  6853  0E13  0827               	movf	___llmod@dividend+3,w
  6854  0E14  00A3               	movwf	?___llmod+3
  6855  0E15  0826               	movf	___llmod@dividend+2,w
  6856  0E16  00A2               	movwf	?___llmod+2
  6857  0E17  0825               	movf	___llmod@dividend+1,w
  6858  0E18  00A1               	movwf	?___llmod+1
  6859  0E19  0824               	movf	___llmod@dividend,w
  6860  0E1A  00A0               	movwf	?___llmod
  6861  0E1B  0008               	return
  6862  0E1C                     __end_of___llmod:	
  6863  0E1C                     __ptext63:	
  6864 ;; *************** function i1___lldiv *****************
  6865 ;; Defined at:
  6866 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;  divisor         4    0[COMMON] unsigned long 
  6869 ;;  dividend        4    4[COMMON] unsigned long 
  6870 ;; Auto vars:     Size  Location     Type
  6871 ;;  __lldiv         4    8[COMMON] unsigned long 
  6872 ;;  __lldiv         1   12[COMMON] unsigned char 
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  4    0[COMMON] unsigned long 
  6875 ;; Registers used:
  6876 ;;		wreg, status,2, status,0
  6877 ;; Tracked objects:
  6878 ;;		On entry : 1F/0
  6879 ;;		On exit  : 1F/0
  6880 ;;		Unchanged: 1F/0
  6881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6882 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6883 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6885 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6886 ;;Total ram usage:       13 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; This function calls:
  6889 ;;		Nothing
  6890 ;; This function is called by:
  6891 ;;		_sprintf
  6892 ;;		i1_InitUART
  6893 ;; This function uses a non-reentrant model
  6894 ;;
  6895                           
  6896                           
  6897                           ;psect for function i1___lldiv
  6898  0E1C                     i1___lldiv:	
  6899                           
  6900                           ;incstack = 0
  6901                           ; Regs used in i1___lldiv: [wreg+status,2+status,0]
  6902  0E1C  01F8               	clrf	i1___lldiv@quotient
  6903  0E1D  01F9               	clrf	i1___lldiv@quotient+1
  6904  0E1E  01FA               	clrf	i1___lldiv@quotient+2
  6905  0E1F  01FB               	clrf	i1___lldiv@quotient+3
  6906  0E20  0873               	movf	i1___lldiv@divisor+3,w
  6907  0E21  0472               	iorwf	i1___lldiv@divisor+2,w
  6908  0E22  0471               	iorwf	i1___lldiv@divisor+1,w
  6909  0E23  0470               	iorwf	i1___lldiv@divisor,w
  6910  0E24  1903               	skipnz
  6911  0E25  2E52               	goto	i1l4218
  6912  0E26  01FC               	clrf	i1___lldiv@counter
  6913  0E27                     L17:	
  6914  0E27  0AFC               	incf	i1___lldiv@counter,f
  6915  0E28  1BF3               	btfsc	i1___lldiv@divisor+3,7
  6916  0E29  2E2F               	goto	i1l4206
  6917  0E2A  35F0               	lslf	i1___lldiv@divisor,f
  6918  0E2B  0DF1               	rlf	i1___lldiv@divisor+1,f
  6919  0E2C  0DF2               	rlf	i1___lldiv@divisor+2,f
  6920  0E2D  0DF3               	rlf	i1___lldiv@divisor+3,f
  6921  0E2E  2E27               	goto	L17
  6922  0E2F                     i1l4206:	
  6923  0E2F  35F8               	lslf	i1___lldiv@quotient,f
  6924  0E30  0DF9               	rlf	i1___lldiv@quotient+1,f
  6925  0E31  0DFA               	rlf	i1___lldiv@quotient+2,f
  6926  0E32  0DFB               	rlf	i1___lldiv@quotient+3,f
  6927  0E33  0873               	movf	i1___lldiv@divisor+3,w
  6928  0E34  0277               	subwf	i1___lldiv@dividend+3,w
  6929  0E35  1D03               	skipz
  6930  0E36  2E41               	goto	u400_25
  6931  0E37  0872               	movf	i1___lldiv@divisor+2,w
  6932  0E38  0276               	subwf	i1___lldiv@dividend+2,w
  6933  0E39  1D03               	skipz
  6934  0E3A  2E41               	goto	u400_25
  6935  0E3B  0871               	movf	i1___lldiv@divisor+1,w
  6936  0E3C  0275               	subwf	i1___lldiv@dividend+1,w
  6937  0E3D  1D03               	skipz
  6938  0E3E  2E41               	goto	u400_25
  6939  0E3F  0870               	movf	i1___lldiv@divisor,w
  6940  0E40  0274               	subwf	i1___lldiv@dividend,w
  6941  0E41                     u400_25:	
  6942  0E41  1C03               	skipc
  6943  0E42  2E4C               	goto	i1l4214
  6944  0E43  0870               	movf	i1___lldiv@divisor,w
  6945  0E44  02F4               	subwf	i1___lldiv@dividend,f
  6946  0E45  0871               	movf	i1___lldiv@divisor+1,w
  6947  0E46  3BF5               	subwfb	i1___lldiv@dividend+1,f
  6948  0E47  0872               	movf	i1___lldiv@divisor+2,w
  6949  0E48  3BF6               	subwfb	i1___lldiv@dividend+2,f
  6950  0E49  0873               	movf	i1___lldiv@divisor+3,w
  6951  0E4A  3BF7               	subwfb	i1___lldiv@dividend+3,f
  6952  0E4B  1478               	bsf	i1___lldiv@quotient,0
  6953  0E4C                     i1l4214:	
  6954  0E4C  36F3               	lsrf	i1___lldiv@divisor+3,f
  6955  0E4D  0CF2               	rrf	i1___lldiv@divisor+2,f
  6956  0E4E  0CF1               	rrf	i1___lldiv@divisor+1,f
  6957  0E4F  0CF0               	rrf	i1___lldiv@divisor,f
  6958  0E50  0BFC               	decfsz	i1___lldiv@counter,f
  6959  0E51  2E2F               	goto	i1l4206
  6960  0E52                     i1l4218:	
  6961  0E52  087B               	movf	i1___lldiv@quotient+3,w
  6962  0E53  00F3               	movwf	?i1___lldiv+3
  6963  0E54  087A               	movf	i1___lldiv@quotient+2,w
  6964  0E55  00F2               	movwf	?i1___lldiv+2
  6965  0E56  0879               	movf	i1___lldiv@quotient+1,w
  6966  0E57  00F1               	movwf	?i1___lldiv+1
  6967  0E58  0878               	movf	i1___lldiv@quotient,w
  6968  0E59  00F0               	movwf	?i1___lldiv
  6969  0E5A  0008               	return
  6970  0E5B                     __end_ofi1___lldiv:	
  6971  0E5B                     __ptext61:	
  6972 ;; *************** function i1_CloseUSART *****************
  6973 ;; Defined at:
  6974 ;;		line 65 in file "UART.c"
  6975 ;; Parameters:    Size  Location     Type
  6976 ;;		None
  6977 ;; Auto vars:     Size  Location     Type
  6978 ;;		None
  6979 ;; Return value:  Size  Location     Type
  6980 ;;		None               void
  6981 ;; Registers used:
  6982 ;;		wreg, status,2, status,0
  6983 ;; Tracked objects:
  6984 ;;		On entry : 1F/1C
  6985 ;;		On exit  : 1F/1
  6986 ;;		Unchanged: 0/0
  6987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;Total ram usage:        0 bytes
  6993 ;; Hardware stack levels used:    1
  6994 ;; This function calls:
  6995 ;;		Nothing
  6996 ;; This function is called by:
  6997 ;;		i1_InitUART
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001                           
  7002                           ;psect for function i1_CloseUSART
  7003  0E5B                     i1_CloseUSART:	
  7004                           
  7005                           ;UART.c: 67: RCSTA&=0b01001111;
  7006                           
  7007                           ;incstack = 0
  7008                           ; Regs used in i1_CloseUSART: [wreg+status,2+status,0]
  7009                           
  7010                           ;UART.c: 68: TX1STAbits.TXEN=0;
  7011                           
  7012                           ;UART.c: 69: PIE1&=0b11001111;
  7013  0E5B  2E94               	ljmp	PL32	;call to abstracted procedure
  7014  0E5C                     __end_ofi1_CloseUSART:	
  7015  0E5C                     __ptext60:	
  7016 ;; *************** function i1_OpenUSART *****************
  7017 ;; Defined at:
  7018 ;;		line 162 in file "UART.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;  config          1    wreg     unsigned char 
  7021 ;;  spbrg           2    0[COMMON] unsigned int 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;  config          1    2[COMMON] unsigned char 
  7024 ;; Return value:  Size  Location     Type
  7025 ;;		None               void
  7026 ;; Registers used:
  7027 ;;		wreg, status,2
  7028 ;; Tracked objects:
  7029 ;;		On entry : 1F/0
  7030 ;;		On exit  : 1F/3
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7033 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7036 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;Total ram usage:        3 bytes
  7038 ;; Hardware stack levels used:    1
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		i1_InitUART
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           
  7047                           ;psect for function i1_OpenUSART
  7048  0E5C                     i1_OpenUSART:	
  7049                           
  7050                           ;incstack = 0
  7051                           ; Regs used in i1_OpenUSART: [wreg+status,2]
  7052                           ;i1OpenUSART@config stored from wreg
  7053  0E5C  00F2               	movwf	i1OpenUSART@config
  7054                           
  7055                           ;UART.c: 164: TX1STA = 0;
  7056  0E5D  0023               	movlb	3	; select bank3
  7057  0E5E  019E               	clrf	30	;volatile
  7058                           
  7059                           ;UART.c: 165: RC1STA = 0;
  7060  0E5F  019D               	clrf	29	;volatile
  7061                           
  7062                           ;UART.c: 167: if(config&0x01)
  7063  0E60  1872               	btfsc	i1OpenUSART@config,0
  7064                           
  7065                           ;UART.c: 168: {
  7066                           ;UART.c: 169: TX1STAbits.SYNC = 1;
  7067  0E61  161E               	bsf	30,4	;volatile
  7068                           
  7069                           ;UART.c: 170: }
  7070                           ;UART.c: 172: if(config&0x02)
  7071  0E62  1CF2               	btfss	i1OpenUSART@config,1
  7072  0E63  2E66               	goto	i1l4126
  7073                           
  7074                           ;UART.c: 173: {
  7075                           ;UART.c: 174: TX1STAbits.TX9 = 1;
  7076  0E64  171E               	bsf	30,6	;volatile
  7077                           
  7078                           ;UART.c: 175: RC1STAbits.RX9 = 1;
  7079  0E65  171D               	bsf	29,6	;volatile
  7080  0E66                     i1l4126:	
  7081                           
  7082                           ;UART.c: 176: }
  7083                           ;UART.c: 178: if(config&0x04)
  7084  0E66  1972               	btfsc	i1OpenUSART@config,2
  7085                           
  7086                           ;UART.c: 179: {
  7087                           ;UART.c: 180: TX1STAbits.CSRC = 1;
  7088  0E67  179E               	bsf	30,7	;volatile
  7089                           
  7090                           ;UART.c: 181: }
  7091                           ;UART.c: 183: if(config&0x08)
  7092  0E68  1DF2               	btfss	i1OpenUSART@config,3
  7093  0E69  2E6C               	goto	i1l421
  7094                           
  7095                           ;UART.c: 184: {
  7096                           ;UART.c: 185: RC1STAbits.CREN = 1;
  7097  0E6A  161D               	bsf	29,4	;volatile
  7098                           
  7099                           ;UART.c: 186: }
  7100  0E6B  2E6D               	goto	i1l4134
  7101  0E6C                     i1l421:	
  7102                           
  7103                           ;UART.c: 187: else
  7104                           ;UART.c: 188: {
  7105                           ;UART.c: 189: RC1STAbits.SREN = 1;
  7106  0E6C  169D               	bsf	29,5	;volatile
  7107  0E6D                     i1l4134:	
  7108                           
  7109                           ;UART.c: 190: }
  7110                           ;UART.c: 192: if(config&0x10)
  7111  0E6D  1A72               	btfsc	i1OpenUSART@config,4
  7112                           
  7113                           ;UART.c: 193: {
  7114                           ;UART.c: 194: TX1STAbits.BRGH = 1;
  7115  0E6E  151E               	bsf	30,2	;volatile
  7116                           
  7117                           ;UART.c: 200: }
  7118                           ;UART.c: 202: if(config&0x40)
  7119  0E6F  1F72               	btfss	i1OpenUSART@config,6
  7120  0E70  2E74               	goto	i1l425
  7121                           
  7122                           ;UART.c: 203: {
  7123                           ;UART.c: 204: PIR1bits.RCIF = 0;
  7124                           
  7125                           ;UART.c: 205: PIE1bits.RCIE = 1;
  7126  0E71  26AE  3188         	fcall	PL74	;call to abstracted procedure
  7127                           
  7128                           ;UART.c: 207: }
  7129  0E73  2E76               	goto	i1l4144
  7130  0E74                     i1l425:	
  7131                           
  7132                           ;UART.c: 208: else
  7133                           ;UART.c: 209: {
  7134                           ;UART.c: 210: PIE1bits.RCIE = 0;
  7135  0E74  0021               	movlb	1	; select bank1
  7136  0E75  1291               	bcf	17,5	;volatile
  7137  0E76                     i1l4144:	
  7138                           
  7139                           ;UART.c: 211: }
  7140                           ;UART.c: 213: if(config&0x80)
  7141  0E76  1FF2               	btfss	i1OpenUSART@config,7
  7142  0E77  2E7B               	goto	i1l427
  7143                           
  7144                           ;UART.c: 214: {
  7145                           ;UART.c: 215: PIR1bits.TXIF = 0;
  7146                           
  7147                           ;UART.c: 216: PIE1bits.TXIE = 1;
  7148  0E78  26B3  3188         	fcall	PL78	;call to abstracted procedure
  7149                           
  7150                           ;UART.c: 217: }
  7151  0E7A  2E7C               	goto	i1l4148
  7152  0E7B                     i1l427:	
  7153                           
  7154                           ;UART.c: 218: else
  7155                           ;UART.c: 219: {
  7156                           ;UART.c: 220: PIE1bits.TXIE = 0;
  7157  0E7B  1211               	bcf	17,4	;volatile
  7158  0E7C                     i1l4148:	
  7159                           
  7160                           ;UART.c: 221: }
  7161                           ;UART.c: 223: SPBRG = spbrg;
  7162  0E7C  0870               	movf	i1OpenUSART@spbrg,w
  7163  0E7D  0023               	movlb	3	; select bank3
  7164  0E7E  009B               	movwf	27	;volatile
  7165                           
  7166                           ;UART.c: 224: SPBRGH = spbrg >> 8;
  7167  0E7F  0871               	movf	i1OpenUSART@spbrg+1,w
  7168                           
  7169                           ;UART.c: 226: TX1STAbits.TXEN = 1;
  7170                           
  7171                           ;UART.c: 227: RC1STAbits.SPEN = 1;
  7172  0E80  2EAA               	ljmp	PL72	;call to abstracted procedure
  7173  0E81                     __end_ofi1_OpenUSART:	
  7174  0E81                     __ptext58:	
  7175 ;; *************** function i1_baudUSART *****************
  7176 ;; Defined at:
  7177 ;;		line 151 in file "UART.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;  baudconfig      1    wreg     unsigned char 
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;  baudconfig      1    0[COMMON] unsigned char 
  7182 ;; Return value:  Size  Location     Type
  7183 ;;		None               void
  7184 ;; Registers used:
  7185 ;;		wreg, status,2
  7186 ;; Tracked objects:
  7187 ;;		On entry : 1F/0
  7188 ;;		On exit  : 1F/3
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7192 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7194 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7195 ;;Total ram usage:        1 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; This function calls:
  7198 ;;		Nothing
  7199 ;; This function is called by:
  7200 ;;		i1_InitUART
  7201 ;; This function uses a non-reentrant model
  7202 ;;
  7203                           
  7204                           
  7205                           ;psect for function i1_baudUSART
  7206  0E81                     i1_baudUSART:	
  7207                           
  7208                           ;incstack = 0
  7209                           ; Regs used in i1_baudUSART: [wreg+status,2]
  7210                           ;i1baudUSART@baudconfig stored from wreg
  7211  0E81  00F0               	movwf	i1baudUSART@baudconfig
  7212                           
  7213                           ;UART.c: 153: BAUD1CON =0;
  7214  0E82  0023               	movlb	3	; select bank3
  7215  0E83  019F               	clrf	31	;volatile
  7216                           
  7217                           ;UART.c: 154: BAUD1CON = baudconfig;
  7218  0E84  0870               	movf	i1baudUSART@baudconfig,w
  7219  0E85  009F               	movwf	31	;volatile
  7220  0E86  0008               	return
  7221  0E87                     __end_ofi1_baudUSART:	
  7222  0E87                     PL18:	
  7223  0E87  082B               	movf	sprintf@f+1,w
  7224  0E88  00B1               	movwf	??_sprintf+1
  7225  0E89  082A               	movf	sprintf@f,w
  7226  0E8A  00B0               	movwf	??_sprintf
  7227  0E8B  0AAA               	incf	sprintf@f,f
  7228  0E8C  1903               	skipnz
  7229  0E8D  0AAB               	incf	sprintf@f+1,f
  7230  0E8E  0084               	movwf	4
  7231  0E8F  0831               	movf	??_sprintf+1,w
  7232  0E90  0085               	movwf	5
  7233  0E91  0800               	movf	0,w	;code access
  7234  0E92  00BE               	movwf	sprintf@c
  7235  0E93  0008               	return
  7236  0E94                     __end_ofPL18:	
  7237  0E94                     PL32:	
  7238  0E94  304F               	movlw	79
  7239  0E95  0023               	movlb	3	; select bank3
  7240  0E96  059D               	andwf	29,f	;volatile
  7241  0E97  129E               	bcf	30,5	;volatile
  7242  0E98  30CF               	movlw	207
  7243  0E99  0021               	movlb	1	; select bank1
  7244  0E9A  0591               	andwf	17,f	;volatile
  7245  0E9B  0008               	return
  7246  0E9C                     __end_ofPL32:	
  7247  0E9C                     PL38:	
  7248  0E9C  0828               	movf	sprintf@sp,w
  7249  0E9D  0086               	movwf	6
  7250  0E9E  0829               	movf	sprintf@sp+1,w
  7251  0E9F  0087               	movwf	7
  7252  0EA0  083E               	movf	sprintf@c,w
  7253  0EA1  0081               	movwf	1
  7254  0EA2  0AA8               	incf	sprintf@sp,f
  7255  0EA3  0008               	return
  7256  0EA4                     __end_ofPL38:	
  7257  0EA4                     PL52:	
  7258  0EA4  0020               	movlb	0	; select bank0
  7259  0EA5  1291               	bcf	17,5	;volatile
  7260  0EA6  0021               	movlb	1	; select bank1
  7261  0EA7  1691               	bsf	17,5	;volatile
  7262  0EA8  170B               	bsf	11,6	;volatile
  7263  0EA9  0008               	return
  7264  0EAA                     __end_ofPL52:	
  7265  0EAA                     PL72:	
  7266  0EAA  009C               	movwf	28	;volatile
  7267  0EAB  169E               	bsf	30,5	;volatile
  7268  0EAC  179D               	bsf	29,7	;volatile
  7269  0EAD  0008               	return
  7270  0EAE                     __end_ofPL72:	
  7271  0EAE                     PL74:	
  7272  0EAE  0020               	movlb	0	; select bank0
  7273  0EAF  1291               	bcf	17,5	;volatile
  7274  0EB0  0021               	movlb	1	; select bank1
  7275  0EB1  1691               	bsf	17,5	;volatile
  7276  0EB2  0008               	return
  7277  0EB3                     __end_ofPL74:	
  7278  0EB3                     PL78:	
  7279  0EB3  0020               	movlb	0	; select bank0
  7280  0EB4  1211               	bcf	17,4	;volatile
  7281  0EB5  0021               	movlb	1	; select bank1
  7282  0EB6  1611               	bsf	17,4	;volatile
  7283  0EB7  0008               	return
  7284  0EB8                     __end_ofPL78:	
  7285  0EB8                     __ptext22:	
  7286 ;; *************** function _UARTchar *****************
  7287 ;; Defined at:
  7288 ;;		line 235 in file "UART.c"
  7289 ;; Parameters:    Size  Location     Type
  7290 ;;  data            1    wreg     unsigned char 
  7291 ;;  override        1    7[BANK3 ] unsigned char 
  7292 ;;  NinethBit_ov    1    8[BANK3 ] unsigned char 
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;  data            1   10[BANK3 ] unsigned char 
  7295 ;; Return value:  Size  Location     Type
  7296 ;;		None               void
  7297 ;; Registers used:
  7298 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7299 ;; Tracked objects:
  7300 ;;		On entry : 1F/3
  7301 ;;		On exit  : 1F/3
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7304 ;;      Params:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  7305 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  7306 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  7307 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  7308 ;;Total ram usage:        4 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; Hardware stack levels required when called:    8
  7311 ;; This function calls:
  7312 ;;		_CheckSum_byte
  7313 ;; This function is called by:
  7314 ;;		_UARTstringWAIT
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           
  7319                           ;psect for function _UARTchar
  7320  0EB8                     _UARTchar:	
  7321                           
  7322                           ;incstack = 0
  7323                           ; Regs used in _UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7324                           ;UARTchar@data stored from wreg
  7325  0EB8  00AA               	movwf	UARTchar@data^(0+384)
  7326                           
  7327                           ;UART.c: 237: if(TXSTAbits.TX9)
  7328  0EB9  1F1E               	btfss	30,6	;volatile
  7329  0EBA  2EE4               	goto	l432
  7330                           
  7331                           ;UART.c: 238: {
  7332                           ;UART.c: 240: if(!override)
  7333  0EBB  0827               	movf	UARTchar@override^(0+384),w
  7334  0EBC  1903               	btfsc	3,2
  7335  0EBD  2ED1               	goto	l4248
  7336  0EBE  2EDC               	goto	l4250
  7337  0EBF                     l4242:	
  7338                           
  7339                           ;UART.c: 246: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
  7340  0EBF  082A               	movf	UARTchar@data^(0+384),w
  7341  0EC0  2711  3188         	fcall	PL82	;call to abstracted procedure
  7342  0EC2  26F8  3188         	fcall	_CheckSum_byte
  7343  0EC4  2EDE               	goto	L4
  7344  0EC5                     l4244:	
  7345                           ;UART.c: 247: break;
  7346                           
  7347                           
  7348                           ;UART.c: 249: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
  7349  0EC5  082A               	movf	UARTchar@data^(0+384),w
  7350  0EC6  00A0               	movwf	CheckSum_byte@This^(0+384)
  7351  0EC7  3002               	movlw	2
  7352  0EC8  01A1               	clrf	(CheckSum_byte@This+1)^(0+384)
  7353  0EC9  00A2               	movwf	CheckSum_byte@Odd_Even^(0+384)
  7354  0ECA  26F8  3188         	fcall	_CheckSum_byte
  7355  0ECC  2EDE               	goto	L4
  7356  0ECD                     l438:	
  7357                           ;UART.c: 251: case 3:
  7358                           
  7359                           ;UART.c: 250: break;
  7360                           
  7361                           
  7362                           ;UART.c: 252: TXSTAbits.TX9D = 1;
  7363  0ECD  141E               	bsf	30,0	;volatile
  7364                           
  7365                           ;UART.c: 253: break;
  7366  0ECE  2EE4               	goto	l432
  7367  0ECF                     l439:	
  7368                           ;UART.c: 254: default:
  7369                           
  7370                           
  7371                           ;UART.c: 255: TXSTAbits.TX9D = 0;
  7372  0ECF  101E               	bcf	30,0	;volatile
  7373                           
  7374                           ;UART.c: 256: break;
  7375  0ED0  2EE4               	goto	l432
  7376  0ED1                     l4248:	
  7377  0ED1  0866               	movf	_PARITY^(0+384),w
  7378                           
  7379                           ; Switch size 1, requested type "space"
  7380                           ; Number of cases is 3, Range of values is 1 to 3
  7381                           ; switch strategies available:
  7382                           ; Name         Instructions Cycles
  7383                           ; simple_byte           10     6 (average)
  7384                           ; direct_byte           15     9 (fixed)
  7385                           ; jumptable            263     9 (fixed)
  7386                           ;	Chosen strategy is simple_byte
  7387  0ED2  3A01               	xorlw	1	; case 1
  7388  0ED3  1903               	skipnz
  7389  0ED4  2EBF               	goto	l4242
  7390  0ED5  3A03               	xorlw	3	; case 2
  7391  0ED6  1903               	skipnz
  7392  0ED7  2EC5               	goto	l4244
  7393  0ED8  3A01               	xorlw	1	; case 3
  7394  0ED9  1903               	skipnz
  7395  0EDA  2ECD               	goto	l438
  7396  0EDB  2ECF               	goto	l439
  7397  0EDC                     l4250:	
  7398                           
  7399                           ;UART.c: 259: else
  7400                           ;UART.c: 260: {
  7401                           ;UART.c: 261: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
  7402  0EDC  3001               	movlw	1
  7403  0EDD  0528               	andwf	UARTchar@NinethBit_override_data^(0+384),w
  7404  0EDE                     L4:	
  7405  0EDE  00A9               	movwf	??_UARTchar^(0+384)
  7406  0EDF  081E               	movf	30,w	;volatile
  7407  0EE0  0629               	xorwf	??_UARTchar^(0+384),w
  7408  0EE1  39FE               	andlw	-2
  7409  0EE2  0629               	xorwf	??_UARTchar^(0+384),w
  7410  0EE3  009E               	movwf	30	;volatile
  7411  0EE4                     l432:	
  7412                           
  7413                           ;UART.c: 262: }
  7414                           ;UART.c: 263: }
  7415                           ;UART.c: 265: if(data == '\n')
  7416  0EE4  300A               	movlw	10
  7417  0EE5  062A               	xorwf	UARTchar@data^(0+384),w
  7418  0EE6  1D03               	btfss	3,2
  7419  0EE7  2EF3               	goto	l449
  7420                           
  7421                           ;UART.c: 266: {
  7422                           ;UART.c: 267: if(override || LineOverride)
  7423  0EE8  0827               	movf	UARTchar@override^(0+384),w
  7424  0EE9  1903               	btfsc	3,2
  7425  0EEA  0865               	movf	_LineOverride^(0+384),w
  7426  0EEB  1903               	btfsc	3,2
  7427  0EEC  0008               	return
  7428  0EED                     l445:	
  7429  0EED  1C9E               	btfss	30,1	;volatile
  7430  0EEE  2EED               	goto	l445
  7431                           
  7432                           ;UART.c: 270: TXREG = data;
  7433  0EEF  082A               	movf	UARTchar@data^(0+384),w
  7434  0EF0  009A               	movwf	26	;volatile
  7435                           
  7436                           ;UART.c: 271: LineOverride = 0;
  7437  0EF1  01E5               	clrf	_LineOverride^(0+384)
  7438  0EF2  0008               	return
  7439  0EF3                     l449:	
  7440  0EF3  1C9E               	btfss	30,1	;volatile
  7441  0EF4  2EF3               	goto	l449
  7442                           
  7443                           ;UART.c: 277: TXREG = data;
  7444  0EF5  082A               	movf	UARTchar@data^(0+384),w
  7445  0EF6  009A               	movwf	26	;volatile
  7446  0EF7  0008               	return
  7447  0EF8                     __end_of_UARTchar:	
  7448  0EF8                     __ptext23:	
  7449 ;; *************** function _CheckSum_byte *****************
  7450 ;; Defined at:
  7451 ;;		line 71 in file "MISC.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;  This            2    0[BANK3 ] unsigned int 
  7454 ;;  Odd_Even        1    2[BANK3 ] unsigned char 
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;  ThisTemp        2    3[BANK3 ] unsigned int 
  7457 ;;  i               1    6[BANK3 ] unsigned char 
  7458 ;;  Parity          1    5[BANK3 ] unsigned char 
  7459 ;; Return value:  Size  Location     Type
  7460 ;;                  1    wreg      unsigned char 
  7461 ;; Registers used:
  7462 ;;		wreg, status,2, status,0
  7463 ;; Tracked objects:
  7464 ;;		On entry : 1F/3
  7465 ;;		On exit  : 1F/3
  7466 ;;		Unchanged: 0/0
  7467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7468 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  7469 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;      Totals:         0       0       0       0       7       0       0       0       0       0       0       0       
      +0       0
  7472 ;;Total ram usage:        7 bytes
  7473 ;; Hardware stack levels used:    1
  7474 ;; Hardware stack levels required when called:    7
  7475 ;; This function calls:
  7476 ;;		Nothing
  7477 ;; This function is called by:
  7478 ;;		_UARTchar
  7479 ;;		_Send_PS2
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           
  7484                           ;psect for function _CheckSum_byte
  7485  0EF8                     _CheckSum_byte:	
  7486                           
  7487                           ;MISC.c: 74: unsigned char Parity = 0;
  7488                           
  7489                           ;incstack = 0
  7490                           ; Regs used in _CheckSum_byte: [wreg+status,2+status,0]
  7491  0EF8  01A5               	clrf	CheckSum_byte@Parity^(0+384)
  7492                           
  7493                           ;MISC.c: 75: unsigned int ThisTemp = This;
  7494  0EF9  0821               	movf	(CheckSum_byte@This+1)^(0+384),w
  7495  0EFA  00A4               	movwf	(CheckSum_byte@ThisTemp+1)^(0+384)
  7496  0EFB  0820               	movf	CheckSum_byte@This^(0+384),w
  7497  0EFC  00A3               	movwf	CheckSum_byte@ThisTemp^(0+384)
  7498                           
  7499                           ;MISC.c: 77: for (i =0; i<8; i++)
  7500  0EFD  01A6               	clrf	CheckSum_byte@i^(0+384)
  7501  0EFE                     l294:	
  7502                           
  7503                           ;MISC.c: 78: {
  7504                           ;MISC.c: 79: if((ThisTemp & 0x01) == 1)
  7505  0EFE  1823               	btfsc	CheckSum_byte@ThisTemp^(0+384),0
  7506                           
  7507                           ;MISC.c: 80: {
  7508                           ;MISC.c: 81: Parity++;
  7509  0EFF  0AA5               	incf	CheckSum_byte@Parity^(0+384),f
  7510  0F00  3008               	movlw	8
  7511                           
  7512                           ;MISC.c: 82: }
  7513                           ;MISC.c: 83: ThisTemp >>= 1;
  7514  0F01  36A4               	lsrf	(CheckSum_byte@ThisTemp+1)^(0+384),f
  7515  0F02  0CA3               	rrf	CheckSum_byte@ThisTemp^(0+384),f
  7516  0F03  0AA6               	incf	CheckSum_byte@i^(0+384),f
  7517  0F04  0226               	subwf	CheckSum_byte@i^(0+384),w
  7518  0F05  1C03               	skipc
  7519  0F06  2EFE               	goto	l294
  7520                           
  7521                           ;MISC.c: 84: }
  7522                           ;MISC.c: 85: if(Odd_Even == 3)
  7523  0F07  3003               	movlw	3
  7524  0F08  0622               	xorwf	CheckSum_byte@Odd_Even^(0+384),w
  7525  0F09  1D03               	btfss	3,2
  7526  0F0A  2F0E               	goto	l297
  7527                           
  7528                           ;MISC.c: 86: {
  7529                           ;MISC.c: 87: if(Parity % 2 == 0)
  7530  0F0B  1C25               	btfss	CheckSum_byte@Parity^(0+384),0
  7531                           
  7532                           ;MISC.c: 88: {
  7533                           ;MISC.c: 89: return 1;
  7534  0F0C  3401               	retlw	1
  7535                           
  7536                           ;MISC.c: 90: }
  7537                           ;MISC.c: 91: return 0;
  7538  0F0D  3400               	retlw	0
  7539  0F0E                     l297:	
  7540                           
  7541                           ;MISC.c: 93: else
  7542                           ;MISC.c: 94: {
  7543                           ;MISC.c: 95: if(Parity % 2 == 1)
  7544  0F0E  1825               	btfsc	CheckSum_byte@Parity^(0+384),0
  7545  0F0F  3401               	retlw	1
  7546  0F10  3400               	retlw	0
  7547  0F11                     __end_of_CheckSum_byte:	
  7548  0F11                     PL82:	
  7549  0F11  00A0               	movwf	CheckSum_byte@This^(0+384)
  7550  0F12  3003               	movlw	3
  7551  0F13  01A1               	clrf	(CheckSum_byte@This+1)^(0+384)
  7552  0F14  00A2               	movwf	CheckSum_byte@Odd_Even^(0+384)
  7553  0F15  0008               	return
  7554  0F16                     __end_ofPL82:	
  7555  0F16                     __ptext24:	
  7556 ;; *************** function _ReadBaud *****************
  7557 ;; Defined at:
  7558 ;;		line 187 in file "FLASH.c"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;  row             2   18[BANK3 ] unsigned int 
  7561 ;;  column          1   20[BANK3 ] unsigned char 
  7562 ;; Auto vars:     Size  Location     Type
  7563 ;;  temp            4   30[BANK3 ] unsigned long 
  7564 ;; Return value:  Size  Location     Type
  7565 ;;                  4   18[BANK3 ] unsigned long 
  7566 ;; Registers used:
  7567 ;;		wreg, status,2, status,0, pclath, cstack
  7568 ;; Tracked objects:
  7569 ;;		On entry : B1F/3
  7570 ;;		On exit  : 1F/3
  7571 ;;		Unchanged: 0/0
  7572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7573 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  7574 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  7575 ;;      Temps:          0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0
  7576 ;;      Totals:         0       0       0       0      16       0       0       0       0       0       0       0       
      +0       0
  7577 ;;Total ram usage:       16 bytes
  7578 ;; Hardware stack levels used:    1
  7579 ;; Hardware stack levels required when called:    9
  7580 ;; This function calls:
  7581 ;;		_ReadFlash_4Byte
  7582 ;; This function is called by:
  7583 ;;		_Init_System
  7584 ;; This function uses a non-reentrant model
  7585 ;;
  7586                           
  7587                           
  7588                           ;psect for function _ReadBaud
  7589  0F16                     _ReadBaud:	
  7590                           
  7591                           ;FLASH.c: 189: unsigned long temp;
  7592                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
  7593                           
  7594                           ;incstack = 0
  7595                           ; Regs used in _ReadBaud: [wreg+status,2+status,0+pclath+cstack]
  7596  0F16  0833               	movf	(ReadBaud@row+1)^(0+384),w
  7597  0F17  00A7               	movwf	(ReadFlash_4Byte@row+1)^(0+384)
  7598  0F18  0832               	movf	ReadBaud@row^(0+384),w
  7599  0F19  00A6               	movwf	ReadFlash_4Byte@row^(0+384)
  7600  0F1A  0834               	movf	ReadBaud@column^(0+384),w
  7601  0F1B  00A8               	movwf	ReadFlash_4Byte@column^(0+384)
  7602  0F1C  276F  3188         	fcall	_ReadFlash_4Byte
  7603  0F1E  0829               	movf	(?_ReadFlash_4Byte+3)^(0+384),w
  7604  0F1F  00C1               	movwf	(ReadBaud@temp+3)^(0+384)
  7605  0F20  0828               	movf	(?_ReadFlash_4Byte+2)^(0+384),w
  7606  0F21  00C0               	movwf	(ReadBaud@temp+2)^(0+384)
  7607  0F22  0827               	movf	(?_ReadFlash_4Byte+1)^(0+384),w
  7608  0F23  00BF               	movwf	(ReadBaud@temp+1)^(0+384)
  7609  0F24  0826               	movf	?_ReadFlash_4Byte^(0+384),w
  7610  0F25  00BE               	movwf	ReadBaud@temp^(0+384)
  7611                           
  7612                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
  7613  0F26  0024               	movlb	4	; select bank4
  7614  0F27  00BA               	movwf	(_MEM^(0+512)+2)
  7615  0F28  303F               	movlw	63
  7616  0F29  0023               	movlb	3	; select bank3
  7617  0F2A  053F               	andwf	(ReadBaud@temp+1)^(0+384),w
  7618  0F2B  0024               	movlb	4	; select bank4
  7619  0F2C  00BB               	movwf	((_MEM+1)^(0+512)+2)
  7620                           
  7621                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
  7622  0F2D  0023               	movlb	3	; select bank3
  7623  0F2E  083E               	movf	ReadBaud@temp^(0+384),w
  7624  0F2F  00B6               	movwf	??_ReadBaud^(0+384)
  7625  0F30  083F               	movf	(ReadBaud@temp+1)^(0+384),w
  7626  0F31  00B7               	movwf	(??_ReadBaud^(0+384)+1)
  7627  0F32  0840               	movf	(ReadBaud@temp+2)^(0+384),w
  7628  0F33  00B8               	movwf	(??_ReadBaud^(0+384)+2)
  7629  0F34  0841               	movf	(ReadBaud@temp+3)^(0+384),w
  7630  0F35  00B9               	movwf	(??_ReadBaud^(0+384)+3)
  7631  0F36  300E               	movlw	14
  7632  0F37                     u4745:	
  7633  0F37  36B9               	lsrf	(??_ReadBaud^(0+384)+3),f
  7634  0F38  0CB8               	rrf	(??_ReadBaud^(0+384)+2),f
  7635  0F39  0CB7               	rrf	(??_ReadBaud^(0+384)+1),f
  7636  0F3A  0CB6               	rrf	??_ReadBaud^(0+384),f
  7637  0F3B  0B89               	decfsz	9,f
  7638  0F3C  2F37               	goto	u4745
  7639  0F3D  0837               	movf	(??_ReadBaud+1)^(0+384),w
  7640  0F3E  0024               	movlb	4	; select bank4
  7641  0F3F  00B9               	movwf	(_MEM+1)^(0+512)
  7642  0F40  0023               	movlb	3	; select bank3
  7643  0F41  0836               	movf	??_ReadBaud^(0+384),w
  7644                           
  7645                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
  7646  0F42  3182  229A  3188   	fcall	PL34	;call to abstracted procedure
  7647  0F45  0023               	movlb	3	; select bank3
  7648  0F46  00B6               	movwf	??_ReadBaud^(0+384)
  7649  0F47  0024               	movlb	4	; select bank4
  7650  0F48  083B               	movf	((_MEM+1)^(0+512)+2),w
  7651  0F49  0023               	movlb	3	; select bank3
  7652  0F4A  00B7               	movwf	(??_ReadBaud^(0+384)+1)
  7653  0F4B  01B8               	clrf	(??_ReadBaud^(0+384)+2)
  7654  0F4C  01B9               	clrf	(??_ReadBaud^(0+384)+3)
  7655  0F4D  0024               	movlb	4	; select bank4
  7656  0F4E  0838               	movf	_MEM^(0+512),w
  7657  0F4F  0023               	movlb	3	; select bank3
  7658  0F50  00BA               	movwf	(??_ReadBaud+4)^(0+384)
  7659  0F51  0024               	movlb	4	; select bank4
  7660  0F52  0839               	movf	(_MEM+1)^(0+512),w
  7661  0F53  0023               	movlb	3	; select bank3
  7662  0F54  00BB               	movwf	((??_ReadBaud+4)^(0+384)+1)
  7663  0F55  300C               	movlw	12
  7664  0F56  01BC               	clrf	((??_ReadBaud+4)^(0+384)+2)
  7665  0F57  01BD               	clrf	((??_ReadBaud+4)^(0+384)+3)
  7666  0F58                     u4755:	
  7667  0F58  35BA               	lslf	(??_ReadBaud+4)^(0+384),f
  7668  0F59  0DBB               	rlf	((??_ReadBaud+4)^(0+384)+1),f
  7669  0F5A  0DBC               	rlf	((??_ReadBaud+4)^(0+384)+2),f
  7670  0F5B  0DBD               	rlf	((??_ReadBaud+4)^(0+384)+3),f
  7671  0F5C  0B89               	decfsz	9,f
  7672  0F5D  2F58               	goto	u4755
  7673  0F5E  083A               	movf	(??_ReadBaud+4)^(0+384),w
  7674  0F5F  07B6               	addwf	??_ReadBaud^(0+384),f
  7675  0F60  083B               	movf	(??_ReadBaud+5)^(0+384),w
  7676  0F61  3DB7               	addwfc	(??_ReadBaud^(0+384)+1),f
  7677  0F62  083C               	movf	(??_ReadBaud+6)^(0+384),w
  7678  0F63  3DB8               	addwfc	(??_ReadBaud^(0+384)+2),f
  7679  0F64  083D               	movf	(??_ReadBaud+7)^(0+384),w
  7680  0F65  3DB9               	addwfc	(??_ReadBaud^(0+384)+3),f
  7681  0F66  0839               	movf	(??_ReadBaud+3)^(0+384),w
  7682  0F67  00B5               	movwf	(?_ReadBaud+3)^(0+384)
  7683  0F68  0838               	movf	(??_ReadBaud+2)^(0+384),w
  7684  0F69  00B4               	movwf	(?_ReadBaud+2)^(0+384)
  7685  0F6A  0837               	movf	(??_ReadBaud+1)^(0+384),w
  7686  0F6B  00B3               	movwf	(?_ReadBaud+1)^(0+384)
  7687  0F6C  0836               	movf	??_ReadBaud^(0+384),w
  7688  0F6D  00B2               	movwf	?_ReadBaud^(0+384)
  7689  0F6E  0008               	return
  7690  0F6F                     __end_of_ReadBaud:	
  7691  0F6F                     __ptext25:	
  7692 ;; *************** function _ReadFlash_4Byte *****************
  7693 ;; Defined at:
  7694 ;;		line 62 in file "FLASH.c"
  7695 ;; Parameters:    Size  Location     Type
  7696 ;;  row             2    6[BANK3 ] unsigned int 
  7697 ;;  column          1    8[BANK3 ] unsigned char 
  7698 ;; Auto vars:     Size  Location     Type
  7699 ;;  temp            4   14[BANK3 ] unsigned long 
  7700 ;; Return value:  Size  Location     Type
  7701 ;;                  4    6[BANK3 ] unsigned long 
  7702 ;; Registers used:
  7703 ;;		wreg, status,2, status,0, pclath, cstack
  7704 ;; Tracked objects:
  7705 ;;		On entry : B1F/3
  7706 ;;		On exit  : 1F/3
  7707 ;;		Unchanged: 0/0
  7708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7709 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  7710 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  7711 ;;      Temps:          0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  7712 ;;      Totals:         0       0       0       0      12       0       0       0       0       0       0       0       
      +0       0
  7713 ;;Total ram usage:       12 bytes
  7714 ;; Hardware stack levels used:    1
  7715 ;; Hardware stack levels required when called:    8
  7716 ;; This function calls:
  7717 ;;		_ReadFlash_2Byte
  7718 ;; This function is called by:
  7719 ;;		_ReadBaud
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           
  7724                           ;psect for function _ReadFlash_4Byte
  7725  0F6F                     _ReadFlash_4Byte:	
  7726                           
  7727                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
  7728                           
  7729                           ;incstack = 0
  7730                           ; Regs used in _ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
  7731  0F6F  27CE  3188         	fcall	PL60	;call to abstracted procedure
  7732  0F71  00A2               	movwf	ReadFlash_2Byte@column^(0+384)
  7733  0F72  279B  3188         	fcall	_ReadFlash_2Byte
  7734  0F74  27C7  3188         	fcall	PL50	;call to abstracted procedure
  7735  0F76  00AD               	movwf	(??_ReadFlash_4Byte^(0+384)+3)
  7736  0F77  082A               	movf	??_ReadFlash_4Byte^(0+384),w
  7737  0F78  00AC               	movwf	(??_ReadFlash_4Byte^(0+384)+2)
  7738  0F79  01AB               	clrf	(??_ReadFlash_4Byte^(0+384)+1)
  7739  0F7A  01AA               	clrf	??_ReadFlash_4Byte^(0+384)
  7740  0F7B  082D               	movf	(??_ReadFlash_4Byte+3)^(0+384),w
  7741  0F7C  00B1               	movwf	(ReadFlash_4Byte@temp+3)^(0+384)
  7742  0F7D  082C               	movf	(??_ReadFlash_4Byte+2)^(0+384),w
  7743  0F7E  00B0               	movwf	(ReadFlash_4Byte@temp+2)^(0+384)
  7744  0F7F  082B               	movf	(??_ReadFlash_4Byte+1)^(0+384),w
  7745  0F80  00AF               	movwf	(ReadFlash_4Byte@temp+1)^(0+384)
  7746  0F81  082A               	movf	??_ReadFlash_4Byte^(0+384),w
  7747  0F82  00AE               	movwf	ReadFlash_4Byte@temp^(0+384)
  7748                           
  7749                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
  7750  0F83  27CE  3188         	fcall	PL60	;call to abstracted procedure
  7751  0F85  3E01               	addlw	1
  7752  0F86  00A2               	movwf	ReadFlash_2Byte@column^(0+384)
  7753  0F87  279B  3188         	fcall	_ReadFlash_2Byte
  7754  0F89  27C7               	fcall	PL50	;call to abstracted procedure
  7755  0F8A  082A               	movf	??_ReadFlash_4Byte^(0+384),w
  7756  0F8B  04AE               	iorwf	ReadFlash_4Byte@temp^(0+384),f
  7757  0F8C  082B               	movf	(??_ReadFlash_4Byte+1)^(0+384),w
  7758  0F8D  04AF               	iorwf	(ReadFlash_4Byte@temp+1)^(0+384),f
  7759  0F8E  082C               	movf	(??_ReadFlash_4Byte+2)^(0+384),w
  7760  0F8F  04B0               	iorwf	(ReadFlash_4Byte@temp+2)^(0+384),f
  7761  0F90  082D               	movf	(??_ReadFlash_4Byte+3)^(0+384),w
  7762  0F91  04B1               	iorwf	(ReadFlash_4Byte@temp+3)^(0+384),f
  7763                           
  7764                           ;FLASH.c: 67: return temp;
  7765  0F92  0831               	movf	(ReadFlash_4Byte@temp+3)^(0+384),w
  7766  0F93  00A9               	movwf	(?_ReadFlash_4Byte+3)^(0+384)
  7767  0F94  0830               	movf	(ReadFlash_4Byte@temp+2)^(0+384),w
  7768  0F95  00A8               	movwf	(?_ReadFlash_4Byte+2)^(0+384)
  7769  0F96  082F               	movf	(ReadFlash_4Byte@temp+1)^(0+384),w
  7770  0F97  00A7               	movwf	(?_ReadFlash_4Byte+1)^(0+384)
  7771  0F98  082E               	movf	ReadFlash_4Byte@temp^(0+384),w
  7772  0F99  00A6               	movwf	?_ReadFlash_4Byte^(0+384)
  7773  0F9A  0008               	return
  7774  0F9B                     __end_of_ReadFlash_4Byte:	
  7775  0F9B                     __ptext26:	
  7776 ;; *************** function _ReadFlash_2Byte *****************
  7777 ;; Defined at:
  7778 ;;		line 43 in file "FLASH.c"
  7779 ;; Parameters:    Size  Location     Type
  7780 ;;  row             2    0[BANK3 ] unsigned int 
  7781 ;;  column          1    2[BANK3 ] unsigned char 
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;		None
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  2    0[BANK3 ] unsigned int 
  7786 ;; Registers used:
  7787 ;;		wreg, status,2, status,0
  7788 ;; Tracked objects:
  7789 ;;		On entry : 1F/3
  7790 ;;		On exit  : 1F/3
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7793 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  7794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7795 ;;      Temps:          0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  7796 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  7797 ;;Total ram usage:        6 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; Hardware stack levels required when called:    7
  7800 ;; This function calls:
  7801 ;;		Nothing
  7802 ;; This function is called by:
  7803 ;;		_ReadFlash_4Byte
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           
  7808                           ;psect for function _ReadFlash_2Byte
  7809  0F9B                     _ReadFlash_2Byte:	
  7810                           
  7811                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
  7812                           
  7813                           ;incstack = 0
  7814                           ; Regs used in _ReadFlash_2Byte: [wreg+status,2+status,0]
  7815  0F9B  1315               	bcf	21,6	;volatile
  7816                           
  7817                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
  7818  0F9C  0821               	movf	(ReadFlash_2Byte@row+1)^(0+384),w
  7819  0F9D  00A4               	movwf	(??_ReadFlash_2Byte^(0+384)+1)
  7820  0F9E  0820               	movf	ReadFlash_2Byte@row^(0+384),w
  7821  0F9F  00A3               	movwf	??_ReadFlash_2Byte^(0+384)
  7822  0FA0  36A4               	lsrf	(??_ReadFlash_2Byte^(0+384)+1),f
  7823  0FA1  0CA3               	rrf	??_ReadFlash_2Byte^(0+384),f
  7824  0FA2  36A4               	lsrf	(??_ReadFlash_2Byte^(0+384)+1),f
  7825  0FA3  0CA3               	rrf	??_ReadFlash_2Byte^(0+384),f
  7826  0FA4  36A4               	lsrf	(??_ReadFlash_2Byte^(0+384)+1),f
  7827  0FA5  0CA3               	rrf	??_ReadFlash_2Byte^(0+384),f
  7828  0FA6  0823               	movf	??_ReadFlash_2Byte^(0+384),w
  7829  0FA7  397F               	andlw	127
  7830  0FA8  0092               	movwf	18	;volatile
  7831                           
  7832                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
  7833  0FA9  0820               	movf	ReadFlash_2Byte@row^(0+384),w
  7834  0FAA  3907               	andlw	7
  7835  0FAB  00A3               	movwf	??_ReadFlash_2Byte^(0+384)
  7836  0FAC  3004               	movlw	4
  7837  0FAD                     u3735:	
  7838  0FAD  35A3               	lslf	??_ReadFlash_2Byte^(0+384),f
  7839  0FAE  3EFF               	addlw	-1
  7840  0FAF  1D03               	skipz
  7841  0FB0  2FAD               	goto	u3735
  7842  0FB1  3523               	lslf	??_ReadFlash_2Byte^(0+384),w
  7843  0FB2  0722               	addwf	ReadFlash_2Byte@column^(0+384),w
  7844  0FB3  0091               	movwf	17	;volatile
  7845                           
  7846                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
  7847  0FB4  1415               	bsf	21,0	;volatile
  7848  0FB5                     l958:	
  7849                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
  7850                           
  7851  0FB5  1815               	btfsc	21,0	;volatile
  7852  0FB6  2FB5               	goto	l958
  7853                           
  7854                           ;FLASH.c: 50: __nop();
  7855  0FB7  0000               	nop
  7856                           
  7857                           ;FLASH.c: 51: __nop();
  7858  0FB8  0000               	nop
  7859                           
  7860                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
  7861  0FB9  0023               	movlb	3	; select bank3
  7862  0FBA  0813               	movf	19,w	;volatile
  7863  0FBB  00A0               	movwf	?_ReadFlash_2Byte^(0+384)
  7864  0FBC  01A1               	clrf	(?_ReadFlash_2Byte+1)^(0+384)
  7865  0FBD  0814               	movf	20,w	;volatile
  7866  0FBE  00A3               	movwf	??_ReadFlash_2Byte^(0+384)
  7867  0FBF  01A4               	clrf	(??_ReadFlash_2Byte^(0+384)+1)
  7868  0FC0  00A4               	movwf	(??_ReadFlash_2Byte^(0+384)+1)
  7869  0FC1  01A3               	clrf	??_ReadFlash_2Byte^(0+384)
  7870  0FC2  0823               	movf	??_ReadFlash_2Byte^(0+384),w
  7871  0FC3  04A0               	iorwf	?_ReadFlash_2Byte^(0+384),f
  7872  0FC4  0824               	movf	(??_ReadFlash_2Byte+1)^(0+384),w
  7873  0FC5  04A1               	iorwf	(?_ReadFlash_2Byte+1)^(0+384),f
  7874  0FC6  0008               	return
  7875  0FC7                     __end_of_ReadFlash_2Byte:	
  7876  0FC7                     PL50:	
  7877  0FC7  0820               	movf	?_ReadFlash_2Byte^(0+384),w
  7878  0FC8  00AA               	movwf	??_ReadFlash_4Byte^(0+384)
  7879  0FC9  0821               	movf	(?_ReadFlash_2Byte+1)^(0+384),w
  7880  0FCA  00AB               	movwf	(??_ReadFlash_4Byte^(0+384)+1)
  7881  0FCB  01AC               	clrf	(??_ReadFlash_4Byte^(0+384)+2)
  7882  0FCC  01AD               	clrf	(??_ReadFlash_4Byte^(0+384)+3)
  7883  0FCD  0008               	return
  7884  0FCE                     __end_ofPL50:	
  7885  0FCE                     PL60:	
  7886  0FCE  0827               	movf	(ReadFlash_4Byte@row+1)^(0+384),w
  7887  0FCF  00A1               	movwf	(ReadFlash_2Byte@row+1)^(0+384)
  7888  0FD0  0826               	movf	ReadFlash_4Byte@row^(0+384),w
  7889  0FD1  00A0               	movwf	ReadFlash_2Byte@row^(0+384)
  7890  0FD2  0828               	movf	ReadFlash_4Byte@column^(0+384),w
  7891  0FD3  0008               	return
  7892  0FD4                     __end_ofPL60:	
  7893  0FD4                     __ptext18:	
  7894 ;; *************** function _PS_2_ENABLE_INTERRUPT *****************
  7895 ;; Defined at:
  7896 ;;		line 199 in file "PS_2.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;  DATA_CLK        1    wreg     unsigned char 
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;  DATA_CLK        1    0[BANK3 ] unsigned char 
  7901 ;; Return value:  Size  Location     Type
  7902 ;;		None               void
  7903 ;; Registers used:
  7904 ;;		wreg, status,2, status,0
  7905 ;; Tracked objects:
  7906 ;;		On entry : 1F/3
  7907 ;;		On exit  : 1F/7
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7911 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  7912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7913 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  7914 ;;Total ram usage:        1 bytes
  7915 ;; Hardware stack levels used:    1
  7916 ;; Hardware stack levels required when called:    7
  7917 ;; This function calls:
  7918 ;;		Nothing
  7919 ;; This function is called by:
  7920 ;;		_main
  7921 ;; This function uses a non-reentrant model
  7922 ;;
  7923                           
  7924                           
  7925                           ;psect for function _PS_2_ENABLE_INTERRUPT
  7926  0FD4                     _PS_2_ENABLE_INTERRUPT:	
  7927                           
  7928                           ;incstack = 0
  7929                           ; Regs used in _PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
  7930                           ;PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
  7931  0FD4  00A0               	movwf	PS_2_ENABLE_INTERRUPT@DATA_CLK^(0+384)
  7932                           
  7933                           ;PS_2.c: 201: if(DATA_CLK == 0b00100000)
  7934  0FD5  3A20               	xorlw	32
  7935  0FD6  1D03               	btfss	3,2
  7936  0FD7  2FDB               	goto	l652
  7937                           
  7938                           ;PS_2.c: 202: {
  7939                           ;PS_2.c: 205: IOCAN |= 0b00100000;
  7940  0FD8  0027               	movlb	7	; select bank7
  7941  0FD9  1692               	bsf	18,5	;volatile
  7942                           
  7943                           ;PS_2.c: 207: }
  7944  0FDA  0008               	return
  7945  0FDB                     l652:	
  7946                           
  7947                           ;PS_2.c: 208: else
  7948                           ;PS_2.c: 209: {
  7949                           ;PS_2.c: 212: IOCAN |= 0b00010000;
  7950  0FDB  0027               	movlb	7	; select bank7
  7951  0FDC  1612               	bsf	18,4	;volatile
  7952  0FDD  0008               	return
  7953  0FDE                     __end_of_PS_2_ENABLE_INTERRUPT:	
  7954  0FDE                     __ptext17:	
  7955 ;; *************** function _PS_2_DISABLE_INTERRUPT *****************
  7956 ;; Defined at:
  7957 ;;		line 178 in file "PS_2.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;  DATA_CLK        1    wreg     unsigned char 
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;  DATA_CLK        1    0[BANK3 ] unsigned char 
  7962 ;; Return value:  Size  Location     Type
  7963 ;;		None               void
  7964 ;; Registers used:
  7965 ;;		wreg, status,2, status,0
  7966 ;; Tracked objects:
  7967 ;;		On entry : 1F/1
  7968 ;;		On exit  : 1F/7
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  7973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7974 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  7975 ;;Total ram usage:        1 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:    7
  7978 ;; This function calls:
  7979 ;;		Nothing
  7980 ;; This function is called by:
  7981 ;;		_Init_PS_2_Send
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           
  7986                           ;psect for function _PS_2_DISABLE_INTERRUPT
  7987  0FDE                     _PS_2_DISABLE_INTERRUPT:	
  7988                           
  7989                           ;incstack = 0
  7990                           ; Regs used in _PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
  7991                           ;PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
  7992  0FDE  0023               	movlb	3	; select bank3
  7993  0FDF  00A0               	movwf	PS_2_DISABLE_INTERRUPT@DATA_CLK^(0+384)
  7994                           
  7995                           ;PS_2.c: 180: if(DATA_CLK == 0b00100000)
  7996  0FE0  3A20               	xorlw	32
  7997  0FE1  1D03               	btfss	3,2
  7998  0FE2  2FE6               	goto	l647
  7999                           
  8000                           ;PS_2.c: 181: {
  8001                           ;PS_2.c: 184: IOCAN &= ~0b00100000;
  8002  0FE3  0027               	movlb	7	; select bank7
  8003  0FE4  1292               	bcf	18,5	;volatile
  8004                           
  8005                           ;PS_2.c: 185: }
  8006  0FE5  0008               	return
  8007  0FE6                     l647:	
  8008                           
  8009                           ;PS_2.c: 186: else
  8010                           ;PS_2.c: 187: {
  8011                           ;PS_2.c: 190: IOCAN &= ~0b00010000;
  8012  0FE6  0027               	movlb	7	; select bank7
  8013  0FE7  1212               	bcf	18,4	;volatile
  8014  0FE8  0008               	return
  8015  0FE9                     __end_of_PS_2_DISABLE_INTERRUPT:	
  8016  0FE9                     __ptext10:	
  8017 ;; *************** function _Timer2Init *****************
  8018 ;; Defined at:
  8019 ;;		line 41 in file "Timer.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;  time            1    wreg     unsigned char 
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;  time            1    0[BANK3 ] unsigned char 
  8024 ;;  prescaler       1    2[BANK3 ] unsigned char 
  8025 ;;  postscaler      1    0        unsigned char 
  8026 ;; Return value:  Size  Location     Type
  8027 ;;		None               void
  8028 ;; Registers used:
  8029 ;;		wreg, status,2, status,0, pclath, cstack
  8030 ;; Tracked objects:
  8031 ;;		On entry : 1F/1
  8032 ;;		On exit  : 1F/1
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8036 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  8037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;      Totals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  8039 ;;Total ram usage:        3 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; Hardware stack levels required when called:    8
  8042 ;; This function calls:
  8043 ;;		_Timer2ON
  8044 ;; This function is called by:
  8045 ;;		_PS_2_INIT
  8046 ;; This function uses a non-reentrant model
  8047 ;;
  8048                           
  8049                           
  8050                           ;psect for function _Timer2Init
  8051  0FE9                     _Timer2Init:	
  8052                           
  8053                           ;incstack = 0
  8054                           ; Regs used in _Timer2Init: [wreg+status,2+status,0+pclath+cstack]
  8055                           ;Timer2Init@time stored from wreg
  8056  0FE9  0023               	movlb	3	; select bank3
  8057  0FEA  00A0               	movwf	Timer2Init@time^(0+384)
  8058                           
  8059                           ;Timer.c: 44: unsigned char prescaler =3;
  8060  0FEB  3003               	movlw	3
  8061  0FEC  00A2               	movwf	Timer2Init@prescaler^(0+384)
  8062                           
  8063                           ;Timer.c: 45: CCP2CONbits.CCP2M = 0b1010;
  8064  0FED  0025               	movlb	5	; select bank5
  8065  0FEE  081A               	movf	26,w	;volatile
  8066  0FEF  39F0               	andlw	-16
  8067  0FF0  380A               	iorlw	10
  8068  0FF1  009A               	movwf	26	;volatile
  8069                           
  8070                           ;Timer.c: 46: PR2 = time;
  8071  0FF2  0023               	movlb	3	; select bank3
  8072  0FF3  0820               	movf	Timer2Init@time^(0+384),w
  8073  0FF4  0020               	movlb	0	; select bank0
  8074  0FF5  009B               	movwf	27	;volatile
  8075                           
  8076                           ;Timer.c: 47: T2CON |= postscaler << 3;
  8077  0FF6  3078               	movlw	120
  8078  0FF7  049C               	iorwf	28,f	;volatile
  8079                           
  8080                           ;Timer.c: 48: T2CON |= prescaler;
  8081  0FF8  3003               	movlw	3
  8082  0FF9  049C               	iorwf	28,f	;volatile
  8083                           
  8084                           ;Timer.c: 50: Timer2ON();
  8085  0FFA  27FE               	fcall	_Timer2ON
  8086                           
  8087                           ;Timer.c: 51: PIE1bits.TMR2IE = 0;
  8088  0FFB  0021               	movlb	1	; select bank1
  8089  0FFC  1091               	bcf	17,1	;volatile
  8090  0FFD  0008               	return
  8091  0FFE                     __end_of_Timer2Init:	
  8092  0FFE                     __ptext11:	
  8093 ;; *************** function _Timer2ON *****************
  8094 ;; Defined at:
  8095 ;;		line 59 in file "Timer.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;		None
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;		None
  8100 ;; Return value:  Size  Location     Type
  8101 ;;		None               void
  8102 ;; Registers used:
  8103 ;;		None
  8104 ;; Tracked objects:
  8105 ;;		On entry : 1F/0
  8106 ;;		On exit  : 1F/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;Total ram usage:        0 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    7
  8116 ;; This function calls:
  8117 ;;		Nothing
  8118 ;; This function is called by:
  8119 ;;		_Timer2Init
  8120 ;; This function uses a non-reentrant model
  8121 ;;
  8122                           
  8123                           
  8124                           ;psect for function _Timer2ON
  8125  0FFE                     _Timer2ON:	
  8126                           
  8127                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
  8128                           
  8129                           ;incstack = 0
  8130                           ; Regs used in _Timer2ON: []
  8131  0FFE  151C               	bsf	28,2	;volatile
  8132  0FFF  0008               	return
  8133  1000                     __end_of_Timer2ON:	
  8134                           
  8135                           	psect	bssBANK3
  8136  01D3                     __pbssBANK3:	
  8137  01D3                     _BaudTyped:	
  8138  01D3                     	ds	4
  8139  01D7                     _PS_2_Read_Data_First:	
  8140  01D7                     	ds	2
  8141  01D9                     _PS_2_Read_Data_Second:	
  8142  01D9                     	ds	2
  8143  01DB                     _PS_2_Read_Data_Third:	
  8144  01DB                     	ds	2
  8145  01DD                     _Alarm:	
  8146  01DD                     	ds	1
  8147  01DE                     _BAUDMODE:	
  8148  01DE                     	ds	1
  8149  01DF                     _CapsCount:	
  8150  01DF                     	ds	1
  8151  01E0                     _Caps_Lock:	
  8152  01E0                     	ds	1
  8153  01E1                     _Delete:	
  8154  01E1                     	ds	1
  8155  01E2                     _LALT:	
  8156  01E2                     	ds	1
  8157  01E3                     _LControl:	
  8158  01E3                     	ds	1
  8159  01E4                     _Left_Shift_Key:	
  8160  01E4                     	ds	1
  8161  01E5                     _LineOverride:	
  8162  01E5                     	ds	1
  8163  01E6                     _PARITY:	
  8164  01E6                     	ds	1
  8165  01E7                     _PS_2_Buffer_items:	
  8166  01E7                     	ds	1
  8167  01E8                     _PS_2_bits:	
  8168  01E8                     	ds	1
  8169  01E9                     _ParityTyped:	
  8170  01E9                     	ds	1
  8171  01EA                     _RALT:	
  8172  01EA                     	ds	1
  8173  01EB                     _RControl:	
  8174  01EB                     	ds	1
  8175  01EC                     _ResendLastFlag:	
  8176  01EC                     	ds	1
  8177  01ED                     _Right_Shift_Key:	
  8178  01ED                     	ds	1
  8179  01EE                     _Right_Shift_Key_old:	
  8180  01EE                     	ds	1
  8181  01EF                     _Shift_Key:	
  8182  01EF                     	ds	1
  8183                           
  8184                           	psect	bssBANK4
  8185  0220                     __pbssBANK4:	
  8186  0220                     _BatteryVoltage:	
  8187  0220                     	ds	3
  8188  0223                     _PS_2_Read_Data_TEMP:	
  8189  0223                     	ds	2
  8190  0225                     _SinLEDtimer:	
  8191  0225                     	ds	2
  8192  0227                     _pwrLEDtoggle:	
  8193  0227                     	ds	2
  8194  0229                     _Caps_Lock_Key:	
  8195  0229                     	ds	1
  8196  022A                     _Caps_Lock_Key_old:	
  8197  022A                     	ds	1
  8198  022B                     _Left_Shift_Key_old:	
  8199  022B                     	ds	1
  8200  022C                     _PS_2_ScanCodes:	
  8201  022C                     	ds	12
  8202                           
  8203                           	psect	dataBANK4
  8204  0238                     __pdataBANK4:	
  8205  0238                     _MEM:	
  8206  0238                     	ds	4
  8207                           
  8208                           	psect	clrtext
  8209  04D5                     clear_ram0:	
  8210                           ;	Called with FSR0 containing the base address, and
  8211                           ;	WREG with the size to clear
  8212                           
  8213  04D5  0064               	clrwdt	;clear the watchdog before getting into this loop
  8214  04D6                     clrloop0:	
  8215  04D6  0180               	clrf	0	;clear RAM location pointed to by FSR
  8216  04D7  3101               	addfsr 0,1
  8217  04D8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8218  04D9  2CD6               	goto	clrloop0	;have we reached the end yet?
  8219  04DA  3400               	retlw	0	;all done for this memory range, return
  8220                           
  8221                           	psect	cstackBANK3
  8222  01A0                     __pcstackBANK3:	
  8223  01A0                     ??_PS_2_DISABLE_INTERRUPT:	
  8224  01A0                     ??_READ_PS_2_PIN:	
  8225                           ; 0 bytes @ 0x0
  8226                           
  8227  01A0                     ??_Timer2ON:	
  8228                           ; 0 bytes @ 0x0
  8229                           
  8230  01A0                     ??_PS_2_ENABLE_INTERRUPT:	
  8231                           ; 0 bytes @ 0x0
  8232                           
  8233  01A0                     ??_ReadUSART:	
  8234                           ; 0 bytes @ 0x0
  8235                           
  8236  01A0                     ??_ConfigureOscillator:	
  8237                           ; 0 bytes @ 0x0
  8238                           
  8239  01A0                     ??_InitApp:	
  8240                           ; 0 bytes @ 0x0
  8241                           
  8242  01A0                     ?_delayUS:	
  8243                           ; 0 bytes @ 0x0
  8244                           
  8245  01A0                     ?_OpenUSART:	
  8246                           ; 0 bytes @ 0x0
  8247                           
  8248  01A0                     ??_baudUSART:	
  8249                           ; 0 bytes @ 0x0
  8250                           
  8251  01A0                     ??_Clock_TRIS:	
  8252                           ; 0 bytes @ 0x0
  8253                           
  8254  01A0                     ??_Data_TRIS:	
  8255                           ; 0 bytes @ 0x0
  8256                           
  8257  01A0                     ??_Timer2Init:	
  8258                           ; 0 bytes @ 0x0
  8259                           
  8260  01A0                     ??_DisableInternalADC:	
  8261                           ; 0 bytes @ 0x0
  8262                           
  8263  01A0                     ??_CloseUSART:	
  8264                           ; 0 bytes @ 0x0
  8265                           
  8266  01A0                     ?___ftge:	
  8267                           ; 0 bytes @ 0x0
  8268                           
  8269  01A0                     ?_CheckSum_byte:	
  8270                           ; 1 bit 
  8271                           
  8272  01A0                     ?_ReadFlash_2Byte:	
  8273                           ; 1 bytes @ 0x0
  8274                           
  8275  01A0                     ?___ftpack:	
  8276                           ; 2 bytes @ 0x0
  8277                           
  8278  01A0                     ?___lldiv:	
  8279                           ; 3 bytes @ 0x0
  8280                           
  8281  01A0                     baudUSART@baudconfig:	
  8282                           ; 4 bytes @ 0x0
  8283                           
  8284  01A0                     ReadUSART@data:	
  8285                           ; 1 bytes @ 0x0
  8286                           
  8287  01A0                     Clock_TRIS@direction:	
  8288                           ; 1 bytes @ 0x0
  8289                           
  8290  01A0                     Data_TRIS@direction:	
  8291                           ; 1 bytes @ 0x0
  8292                           
  8293  01A0                     PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  8294                           ; 1 bytes @ 0x0
  8295                           
  8296  01A0                     PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  8297                           ; 1 bytes @ 0x0
  8298                           
  8299  01A0                     READ_PS_2_PIN@DATA_CLK:	
  8300                           ; 1 bytes @ 0x0
  8301                           
  8302  01A0                     Timer2Init@time:	
  8303                           ; 1 bytes @ 0x0
  8304                           
  8305  01A0                     CheckSum_byte@This:	
  8306                           ; 1 bytes @ 0x0
  8307                           
  8308  01A0                     OpenUSART@spbrg:	
  8309                           ; 2 bytes @ 0x0
  8310                           
  8311  01A0                     ReadFlash_2Byte@row:	
  8312                           ; 2 bytes @ 0x0
  8313                           
  8314  01A0                     ___ftpack@arg:	
  8315                           ; 2 bytes @ 0x0
  8316                           
  8317  01A0                     ___ftge@ff1:	
  8318                           ; 3 bytes @ 0x0
  8319                           
  8320  01A0                     delayUS@US:	
  8321                           ; 3 bytes @ 0x0
  8322                           
  8323  01A0                     ___lldiv@divisor:	
  8324                           ; 4 bytes @ 0x0
  8325                           
  8326                           
  8327                           ; 4 bytes @ 0x0
  8328  01A0                     	ds	2
  8329  01A2                     ??_OpenUSART:	
  8330  01A2                     CheckSum_byte@Odd_Even:	
  8331                           ; 0 bytes @ 0x2
  8332                           
  8333  01A2                     OpenUSART@config:	
  8334                           ; 1 bytes @ 0x2
  8335                           
  8336  01A2                     ReadFlash_2Byte@column:	
  8337                           ; 1 bytes @ 0x2
  8338                           
  8339  01A2                     Timer2Init@prescaler:	
  8340                           ; 1 bytes @ 0x2
  8341                           
  8342                           
  8343                           ; 1 bytes @ 0x2
  8344  01A2                     	ds	1
  8345  01A3                     ??_CheckSum_byte:	
  8346  01A3                     ??_ReadFlash_2Byte:	
  8347                           ; 0 bytes @ 0x3
  8348                           
  8349  01A3                     ___ftpack@exp:	
  8350                           ; 0 bytes @ 0x3
  8351                           
  8352  01A3                     CheckSum_byte@ThisTemp:	
  8353                           ; 1 bytes @ 0x3
  8354                           
  8355  01A3                     ___ftge@ff2:	
  8356                           ; 2 bytes @ 0x3
  8357                           
  8358                           
  8359                           ; 3 bytes @ 0x3
  8360  01A3                     	ds	1
  8361  01A4                     ??_delayUS:	
  8362  01A4                     ___ftpack@sign:	
  8363                           ; 0 bytes @ 0x4
  8364                           
  8365  01A4                     ___lldiv@dividend:	
  8366                           ; 1 bytes @ 0x4
  8367                           
  8368                           
  8369                           ; 4 bytes @ 0x4
  8370  01A4                     	ds	1
  8371  01A5                     ??___ftpack:	
  8372  01A5                     CheckSum_byte@Parity:	
  8373                           ; 0 bytes @ 0x5
  8374                           
  8375  01A5                     delayUS@i:	
  8376                           ; 1 bytes @ 0x5
  8377                           
  8378                           
  8379                           ; 4 bytes @ 0x5
  8380  01A5                     	ds	1
  8381  01A6                     ??___ftge:	
  8382  01A6                     ?_ReadFlash_4Byte:	
  8383                           ; 0 bytes @ 0x6
  8384                           
  8385  01A6                     CheckSum_byte@i:	
  8386                           ; 4 bytes @ 0x6
  8387                           
  8388  01A6                     ReadFlash_4Byte@row:	
  8389                           ; 1 bytes @ 0x6
  8390                           
  8391                           
  8392                           ; 2 bytes @ 0x6
  8393  01A6                     	ds	1
  8394  01A7                     ?_UARTchar:	
  8395  01A7                     UARTchar@override:	
  8396                           ; 0 bytes @ 0x7
  8397                           
  8398                           
  8399                           ; 1 bytes @ 0x7
  8400  01A7                     	ds	1
  8401  01A8                     ??___lldiv:	
  8402  01A8                     ?___lwtoft:	
  8403                           ; 0 bytes @ 0x8
  8404                           
  8405  01A8                     UARTchar@NinethBit_override_data:	
  8406                           ; 3 bytes @ 0x8
  8407                           
  8408  01A8                     ReadFlash_4Byte@column:	
  8409                           ; 1 bytes @ 0x8
  8410                           
  8411  01A8                     ___lwtoft@c:	
  8412                           ; 1 bytes @ 0x8
  8413                           
  8414  01A8                     ___lldiv@quotient:	
  8415                           ; 2 bytes @ 0x8
  8416                           
  8417                           
  8418                           ; 4 bytes @ 0x8
  8419  01A8                     	ds	1
  8420  01A9                     ??_UARTchar:	
  8421  01A9                     delayUS@j:	
  8422                           ; 0 bytes @ 0x9
  8423                           
  8424                           
  8425                           ; 1 bytes @ 0x9
  8426  01A9                     	ds	1
  8427  01AA                     ??_Send_PS2:	
  8428  01AA                     ??_ReadFlash_4Byte:	
  8429                           ; 0 bytes @ 0xA
  8430                           
  8431  01AA                     ?_InternalADC_Read:	
  8432                           ; 0 bytes @ 0xA
  8433                           
  8434  01AA                     UARTchar@data:	
  8435                           ; 2 bytes @ 0xA
  8436                           
  8437  01AA                     Send_PS2@oddparity:	
  8438                           ; 1 bytes @ 0xA
  8439                           
  8440                           
  8441                           ; 1 bytes @ 0xA
  8442  01AA                     	ds	1
  8443  01AB                     ?_UARTstringWAIT:	
  8444  01AB                     ??___lwtoft:	
  8445                           ; 0 bytes @ 0xB
  8446                           
  8447  01AB                     ?___ftdiv:	
  8448                           ; 0 bytes @ 0xB
  8449                           
  8450  01AB                     Send_PS2@command:	
  8451                           ; 3 bytes @ 0xB
  8452                           
  8453  01AB                     UARTstringWAIT@data:	
  8454                           ; 1 bytes @ 0xB
  8455                           
  8456  01AB                     ___ftdiv@f2:	
  8457                           ; 2 bytes @ 0xB
  8458                           
  8459                           
  8460                           ; 3 bytes @ 0xB
  8461  01AB                     	ds	1
  8462  01AC                     Send_PS2@i:	
  8463  01AC                     ___lldiv@counter:	
  8464                           ; 1 bytes @ 0xC
  8465                           
  8466                           
  8467                           ; 1 bytes @ 0xC
  8468  01AC                     	ds	1
  8469  01AD                     ??_UARTstringWAIT:	
  8470  01AD                     ?_InitUART:	
  8471                           ; 0 bytes @ 0xD
  8472                           
  8473  01AD                     ??_InternalADC_Read:	
  8474                           ; 0 bytes @ 0xD
  8475                           
  8476  01AD                     InternalADC_Read@channel:	
  8477                           ; 0 bytes @ 0xD
  8478                           
  8479  01AD                     Send_PS2@timeout:	
  8480                           ; 1 bytes @ 0xD
  8481                           
  8482  01AD                     InitUART@Baud:	
  8483                           ; 2 bytes @ 0xD
  8484                           
  8485                           
  8486                           ; 4 bytes @ 0xD
  8487  01AD                     	ds	1
  8488  01AE                     ___ftdiv@f1:	
  8489  01AE                     ReadFlash_4Byte@temp:	
  8490                           ; 3 bytes @ 0xE
  8491                           
  8492                           
  8493                           ; 4 bytes @ 0xE
  8494  01AE                     	ds	1
  8495  01AF                     ??_PS_2_INIT:	
  8496  01AF                     ??_Init_PS_2_Send:	
  8497                           ; 0 bytes @ 0xF
  8498                           
  8499                           
  8500                           ; 0 bytes @ 0xF
  8501  01AF                     	ds	2
  8502  01B1                     ??___ftdiv:	
  8503  01B1                     InitUART@parity:	
  8504                           ; 0 bytes @ 0x11
  8505                           
  8506                           
  8507                           ; 1 bytes @ 0x11
  8508  01B1                     	ds	1
  8509  01B2                     ??_InitUART:	
  8510  01B2                     ?_ReadBaud:	
  8511                           ; 0 bytes @ 0x12
  8512                           
  8513  01B2                     ReadBaud@row:	
  8514                           ; 4 bytes @ 0x12
  8515                           
  8516                           
  8517                           ; 2 bytes @ 0x12
  8518  01B2                     	ds	2
  8519  01B4                     ReadBaud@column:	
  8520  01B4                     ___ftdiv@cntr:	
  8521                           ; 1 bytes @ 0x14
  8522                           
  8523                           
  8524                           ; 1 bytes @ 0x14
  8525  01B4                     	ds	1
  8526  01B5                     ___ftdiv@f3:	
  8527                           
  8528                           ; 3 bytes @ 0x15
  8529  01B5                     	ds	1
  8530  01B6                     ??_ReadBaud:	
  8531                           
  8532                           ; 0 bytes @ 0x16
  8533  01B6                     	ds	2
  8534  01B8                     ___ftdiv@exp:	
  8535                           
  8536                           ; 1 bytes @ 0x18
  8537  01B8                     	ds	1
  8538  01B9                     ___ftdiv@sign:	
  8539                           
  8540                           ; 1 bytes @ 0x19
  8541  01B9                     	ds	1
  8542  01BA                     ?___ftmul:	
  8543  01BA                     InitUART@spbrg:	
  8544                           ; 3 bytes @ 0x1A
  8545                           
  8546  01BA                     ___ftmul@f1:	
  8547                           ; 2 bytes @ 0x1A
  8548                           
  8549                           
  8550                           ; 3 bytes @ 0x1A
  8551  01BA                     	ds	2
  8552  01BC                     InitUART@baudconfig:	
  8553                           
  8554                           ; 1 bytes @ 0x1C
  8555  01BC                     	ds	1
  8556  01BD                     InitUART@config:	
  8557  01BD                     ___ftmul@f2:	
  8558                           ; 1 bytes @ 0x1D
  8559                           
  8560                           
  8561                           ; 3 bytes @ 0x1D
  8562  01BD                     	ds	1
  8563  01BE                     InitUART@temp:	
  8564  01BE                     ReadBaud@temp:	
  8565                           ; 4 bytes @ 0x1E
  8566                           
  8567                           
  8568                           ; 4 bytes @ 0x1E
  8569  01BE                     	ds	2
  8570  01C0                     ??___ftmul:	
  8571                           
  8572                           ; 0 bytes @ 0x20
  8573  01C0                     	ds	2
  8574  01C2                     ??_Init_System:	
  8575                           
  8576                           ; 0 bytes @ 0x22
  8577  01C2                     	ds	1
  8578  01C3                     ___ftmul@exp:	
  8579                           
  8580                           ; 1 bytes @ 0x23
  8581  01C3                     	ds	1
  8582  01C4                     ___ftmul@f3_as_product:	
  8583                           
  8584                           ; 3 bytes @ 0x24
  8585  01C4                     	ds	2
  8586  01C6                     Init_System@temp:	
  8587                           
  8588                           ; 4 bytes @ 0x26
  8589  01C6                     	ds	1
  8590  01C7                     ___ftmul@cntr:	
  8591                           
  8592                           ; 1 bytes @ 0x27
  8593  01C7                     	ds	1
  8594  01C8                     ___ftmul@sign:	
  8595                           
  8596                           ; 1 bytes @ 0x28
  8597  01C8                     	ds	1
  8598  01C9                     ?_ReadVoltage:	
  8599                           
  8600                           ; 3 bytes @ 0x29
  8601  01C9                     	ds	1
  8602  01CA                     Init_System@Baud:	
  8603                           
  8604                           ; 4 bytes @ 0x2A
  8605  01CA                     	ds	2
  8606  01CC                     ??_ReadVoltage:	
  8607                           
  8608                           ; 0 bytes @ 0x2C
  8609  01CC                     	ds	1
  8610  01CD                     ReadVoltage@voltage:	
  8611                           
  8612                           ; 3 bytes @ 0x2D
  8613  01CD                     	ds	1
  8614  01CE                     Init_System@Parity:	
  8615                           
  8616                           ; 1 bytes @ 0x2E
  8617  01CE                     	ds	2
  8618  01D0                     ReadVoltage@temp:	
  8619                           
  8620                           ; 2 bytes @ 0x30
  8621  01D0                     	ds	2
  8622  01D2                     ??_main:	
  8623  01D2                     main@i:	
  8624                           ; 0 bytes @ 0x32
  8625                           
  8626                           
  8627                           ; 1 bytes @ 0x32
  8628  01D2                     	ds	1
  8629                           
  8630                           	psect	cstackBANK2
  8631  0120                     __pcstackBANK2:	
  8632  0120                     ??_Process_PS2_ScanCode:	
  8633                           
  8634                           ; 0 bytes @ 0x0
  8635  0120                     	ds	6
  8636  0126                     Process_PS2_ScanCode@buf:	
  8637                           
  8638                           ; 60 bytes @ 0x6
  8639  0126                     	ds	60
  8640  0162                     _Process_PS2_ScanCode$856:	
  8641                           
  8642                           ; 2 bytes @ 0x42
  8643  0162                     	ds	2
  8644  0164                     _Process_PS2_ScanCode$857:	
  8645                           
  8646                           ; 2 bytes @ 0x44
  8647  0164                     	ds	2
  8648  0166                     _Process_PS2_ScanCode$858:	
  8649                           
  8650                           ; 2 bytes @ 0x46
  8651  0166                     	ds	2
  8652  0168                     _Process_PS2_ScanCode$859:	
  8653                           
  8654                           ; 2 bytes @ 0x48
  8655  0168                     	ds	2
  8656  016A                     Process_PS2_ScanCode@shortbreak:	
  8657                           
  8658                           ; 1 bytes @ 0x4A
  8659  016A                     	ds	1
  8660  016B                     Process_PS2_ScanCode@temp:	
  8661                           
  8662                           ; 1 bytes @ 0x4B
  8663  016B                     	ds	1
  8664  016C                     isr@Rx_fault:	
  8665                           
  8666                           ; 1 bytes @ 0x4C
  8667  016C                     	ds	1
  8668  016D                     isr@Rx_Overun:	
  8669                           
  8670                           ; 1 bytes @ 0x4D
  8671  016D                     	ds	1
  8672  016E                     isr@rx:	
  8673                           
  8674                           ; 1 bytes @ 0x4E
  8675  016E                     	ds	1
  8676  016F                     isr@ScanTemp:	
  8677                           
  8678                           ; 1 bytes @ 0x4F
  8679  016F                     	ds	1
  8680                           
  8681                           	psect	cstackBANK1
  8682  00A0                     __pcstackBANK1:	
  8683  00A0                     ??_WriteBaud:	
  8684                           
  8685                           ; 0 bytes @ 0x0
  8686  00A0                     	ds	4
  8687  00A4                     WriteBaud@temp:	
  8688                           
  8689                           ; 4 bytes @ 0x4
  8690  00A4                     	ds	4
  8691  00A8                     ?_SetBaud:	
  8692  00A8                     SetBaud@Baud:	
  8693                           ; 0 bytes @ 0x8
  8694                           
  8695                           
  8696                           ; 4 bytes @ 0x8
  8697  00A8                     	ds	4
  8698  00AC                     SetBaud@Parity:	
  8699                           
  8700                           ; 1 bytes @ 0xC
  8701  00AC                     	ds	1
  8702  00AD                     ??_SetBaud:	
  8703                           
  8704                           ; 0 bytes @ 0xD
  8705  00AD                     	ds	4
  8706  00B1                     SetBaud@buf:	
  8707                           
  8708                           ; 50 bytes @ 0x11
  8709  00B1                     	ds	50
  8710  00E3                     SetBaud@Paritytemp:	
  8711                           
  8712                           ; 4 bytes @ 0x43
  8713  00E3                     	ds	4
  8714  00E7                     SetBaud@Baudtemp:	
  8715                           
  8716                           ; 4 bytes @ 0x47
  8717  00E7                     	ds	4
  8718  00EB                     SetBaud@temp:	
  8719                           
  8720                           ; 4 bytes @ 0x4B
  8721  00EB                     	ds	4
  8722  00EF                     SetBaud@i:	
  8723                           
  8724                           ; 1 bytes @ 0x4F
  8725  00EF                     	ds	1
  8726                           
  8727                           	psect	cstackCOMMON
  8728  0070                     __pcstackCOMMON:	
  8729  0070                     ?_PS_2_DISABLE_INTERRUPT:	
  8730  0070                     ?_Timer2Reset:	
  8731                           ; 0 bytes @ 0x0
  8732                           
  8733  0070                     ??_Timer2Reset:	
  8734                           ; 0 bytes @ 0x0
  8735                           
  8736  0070                     ?_Timer2ON:	
  8737                           ; 0 bytes @ 0x0
  8738                           
  8739  0070                     ?_PS_2_ENABLE_INTERRUPT:	
  8740                           ; 0 bytes @ 0x0
  8741                           
  8742  0070                     ??_READ_CONFIG_PIN:	
  8743                           ; 0 bytes @ 0x0
  8744                           
  8745  0070                     ?_Timer2OFF:	
  8746                           ; 0 bytes @ 0x0
  8747                           
  8748  0070                     ??_Timer2OFF:	
  8749                           ; 0 bytes @ 0x0
  8750                           
  8751  0070                     ?_ResendLast:	
  8752                           ; 0 bytes @ 0x0
  8753                           
  8754  0070                     ?_Process_PS2_ScanCode:	
  8755                           ; 0 bytes @ 0x0
  8756                           
  8757  0070                     ?_ConfigureOscillator:	
  8758                           ; 0 bytes @ 0x0
  8759                           
  8760  0070                     ?_InitApp:	
  8761                           ; 0 bytes @ 0x0
  8762                           
  8763  0070                     ?_Init_System:	
  8764                           ; 0 bytes @ 0x0
  8765                           
  8766  0070                     ?_PS_2_INIT:	
  8767                           ; 0 bytes @ 0x0
  8768                           
  8769  0070                     ?_baudUSART:	
  8770                           ; 0 bytes @ 0x0
  8771                           
  8772  0070                     ?_Clock_TRIS:	
  8773                           ; 0 bytes @ 0x0
  8774                           
  8775  0070                     ?_Data_TRIS:	
  8776                           ; 0 bytes @ 0x0
  8777                           
  8778  0070                     ?_Timer2Init:	
  8779                           ; 0 bytes @ 0x0
  8780                           
  8781  0070                     ??_Decode_Scan_Code_FunctionE0:	
  8782                           ; 0 bytes @ 0x0
  8783                           
  8784  0070                     ??_Decode_Scan_Code_Shift:	
  8785                           ; 0 bytes @ 0x0
  8786                           
  8787  0070                     ??_Decode_Scan_Code:	
  8788                           ; 0 bytes @ 0x0
  8789                           
  8790  0070                     ??_Decode_Scan_Code_Function:	
  8791                           ; 0 bytes @ 0x0
  8792                           
  8793  0070                     ?_DisableInternalADC:	
  8794                           ; 0 bytes @ 0x0
  8795                           
  8796  0070                     ?_isr:	
  8797                           ; 0 bytes @ 0x0
  8798                           
  8799  0070                     ?_main:	
  8800                           ; 0 bytes @ 0x0
  8801                           
  8802  0070                     ??_Reverse_Byte:	
  8803                           ; 0 bytes @ 0x0
  8804                           
  8805  0070                     ??_ISNUMBER:	
  8806                           ; 0 bytes @ 0x0
  8807                           
  8808  0070                     ?_cleanBuffer:	
  8809                           ; 0 bytes @ 0x0
  8810                           
  8811  0070                     ?_CloseUSART:	
  8812                           ; 0 bytes @ 0x0
  8813                           
  8814  0070                     ?_UART_send_break:	
  8815                           ; 0 bytes @ 0x0
  8816                           
  8817  0070                     ??_UART_send_break:	
  8818                           ; 0 bytes @ 0x0
  8819                           
  8820  0070                     ?_UNLOCK:	
  8821                           ; 0 bytes @ 0x0
  8822                           
  8823  0070                     ??_UNLOCK:	
  8824                           ; 0 bytes @ 0x0
  8825                           
  8826  0070                     ?_BlockErase:	
  8827                           ; 0 bytes @ 0x0
  8828                           
  8829  0070                     ?i1_delayUS:	
  8830                           ; 0 bytes @ 0x0
  8831                           
  8832  0070                     ?i1_CloseUSART:	
  8833                           ; 0 bytes @ 0x0
  8834                           
  8835  0070                     ??i1_CloseUSART:	
  8836                           ; 0 bytes @ 0x0
  8837                           
  8838  0070                     ?i1_baudUSART:	
  8839                           ; 0 bytes @ 0x0
  8840                           
  8841  0070                     ??i1_baudUSART:	
  8842                           ; 0 bytes @ 0x0
  8843                           
  8844  0070                     ?i1_OpenUSART:	
  8845                           ; 0 bytes @ 0x0
  8846                           
  8847  0070                     ??i1_ReadUSART:	
  8848                           ; 0 bytes @ 0x0
  8849                           
  8850  0070                     ?i1_Clock_TRIS:	
  8851                           ; 0 bytes @ 0x0
  8852                           
  8853  0070                     ??i1_Clock_TRIS:	
  8854                           ; 0 bytes @ 0x0
  8855                           
  8856  0070                     ?i1_Data_TRIS:	
  8857                           ; 0 bytes @ 0x0
  8858                           
  8859  0070                     ??i1_Data_TRIS:	
  8860                           ; 0 bytes @ 0x0
  8861                           
  8862  0070                     ?i1_PS_2_DISABLE_INTERRUPT:	
  8863                           ; 0 bytes @ 0x0
  8864                           
  8865  0070                     ??i1_PS_2_DISABLE_INTERRUPT:	
  8866                           ; 0 bytes @ 0x0
  8867                           
  8868  0070                     ?i1_PS_2_ENABLE_INTERRUPT:	
  8869                           ; 0 bytes @ 0x0
  8870                           
  8871  0070                     ??i1_PS_2_ENABLE_INTERRUPT:	
  8872                           ; 0 bytes @ 0x0
  8873                           
  8874  0070                     ??i1_READ_PS_2_PIN:	
  8875                           ; 0 bytes @ 0x0
  8876                           
  8877  0070                     ?i1_Timer2ON:	
  8878                           ; 0 bytes @ 0x0
  8879                           
  8880  0070                     ??i1_Timer2ON:	
  8881                           ; 0 bytes @ 0x0
  8882                           
  8883  0070                     ?_READ_PS_2_PIN:	
  8884                           ; 0 bytes @ 0x0
  8885                           
  8886  0070                     ?_ReadUSART:	
  8887                           ; 1 bytes @ 0x0
  8888                           
  8889  0070                     ?_READ_CONFIG_PIN:	
  8890                           ; 1 bytes @ 0x0
  8891                           
  8892  0070                     ?_Init_PS_2_Send:	
  8893                           ; 1 bytes @ 0x0
  8894                           
  8895  0070                     ?_Send_PS2:	
  8896                           ; 1 bytes @ 0x0
  8897                           
  8898  0070                     ?_Decode_Scan_Code_FunctionE0:	
  8899                           ; 1 bytes @ 0x0
  8900                           
  8901  0070                     ?_Decode_Scan_Code_Shift:	
  8902                           ; 1 bytes @ 0x0
  8903                           
  8904  0070                     ?_Decode_Scan_Code:	
  8905                           ; 1 bytes @ 0x0
  8906                           
  8907  0070                     ?_Decode_Scan_Code_Function:	
  8908                           ; 1 bytes @ 0x0
  8909                           
  8910  0070                     ?_Reverse_Byte:	
  8911                           ; 1 bytes @ 0x0
  8912                           
  8913  0070                     ?_ISNUMBER:	
  8914                           ; 1 bytes @ 0x0
  8915                           
  8916  0070                     ?_BufferShiftBack:	
  8917                           ; 1 bytes @ 0x0
  8918                           
  8919  0070                     ?i1_CheckSum_byte:	
  8920                           ; 1 bytes @ 0x0
  8921                           
  8922  0070                     ?i1_ReadUSART:	
  8923                           ; 1 bytes @ 0x0
  8924                           
  8925  0070                     ?i1_READ_PS_2_PIN:	
  8926                           ; 1 bytes @ 0x0
  8927                           
  8928  0070                     ?i1_Send_PS2:	
  8929                           ; 1 bytes @ 0x0
  8930                           
  8931  0070                     ?i1_ReadFlash_2Byte:	
  8932                           ; 1 bytes @ 0x0
  8933                           
  8934  0070                     ?___lmul:	
  8935                           ; 2 bytes @ 0x0
  8936                           
  8937  0070                     ?i1___lldiv:	
  8938                           ; 4 bytes @ 0x0
  8939                           
  8940  0070                     ISNUMBER@ascii:	
  8941                           ; 4 bytes @ 0x0
  8942                           
  8943  0070                     BufferShiftBack@shift:	
  8944                           ; 1 bytes @ 0x0
  8945                           
  8946  0070                     Decode_Scan_Code@Code:	
  8947                           ; 1 bytes @ 0x0
  8948                           
  8949  0070                     Decode_Scan_Code_Shift@Code:	
  8950                           ; 1 bytes @ 0x0
  8951                           
  8952  0070                     Decode_Scan_Code_FunctionE0@Code:	
  8953                           ; 1 bytes @ 0x0
  8954                           
  8955  0070                     Decode_Scan_Code_Function@Code:	
  8956                           ; 1 bytes @ 0x0
  8957                           
  8958  0070                     i1baudUSART@baudconfig:	
  8959                           ; 1 bytes @ 0x0
  8960                           
  8961  0070                     i1ReadUSART@data:	
  8962                           ; 1 bytes @ 0x0
  8963                           
  8964  0070                     i1Clock_TRIS@direction:	
  8965                           ; 1 bytes @ 0x0
  8966                           
  8967  0070                     i1Data_TRIS@direction:	
  8968                           ; 1 bytes @ 0x0
  8969                           
  8970  0070                     i1PS_2_DISABLE_INTERRUPT@DATA_CLK:	
  8971                           ; 1 bytes @ 0x0
  8972                           
  8973  0070                     i1PS_2_ENABLE_INTERRUPT@DATA_CLK:	
  8974                           ; 1 bytes @ 0x0
  8975                           
  8976  0070                     i1READ_PS_2_PIN@DATA_CLK:	
  8977                           ; 1 bytes @ 0x0
  8978                           
  8979  0070                     cleanBuffer@count:	
  8980                           ; 1 bytes @ 0x0
  8981                           
  8982  0070                     BlockErase@row:	
  8983                           ; 2 bytes @ 0x0
  8984                           
  8985  0070                     i1CheckSum_byte@This:	
  8986                           ; 2 bytes @ 0x0
  8987                           
  8988  0070                     i1OpenUSART@spbrg:	
  8989                           ; 2 bytes @ 0x0
  8990                           
  8991  0070                     i1ReadFlash_2Byte@row:	
  8992                           ; 2 bytes @ 0x0
  8993                           
  8994  0070                     ___lmul@multiplier:	
  8995                           ; 2 bytes @ 0x0
  8996                           
  8997  0070                     i1delayUS@US:	
  8998                           ; 4 bytes @ 0x0
  8999                           
  9000  0070                     i1___lldiv@divisor:	
  9001                           ; 4 bytes @ 0x0
  9002                           
  9003                           
  9004                           ; 4 bytes @ 0x0
  9005  0070                     	ds	1
  9006  0071                     Reverse_Byte@temp:	
  9007  0071                     BufferShiftBack@size:	
  9008                           ; 1 bytes @ 0x1
  9009                           
  9010                           
  9011                           ; 1 bytes @ 0x1
  9012  0071                     	ds	1
  9013  0072                     ??_cleanBuffer:	
  9014  0072                     ??_BufferShiftBack:	
  9015                           ; 0 bytes @ 0x2
  9016                           
  9017  0072                     ??_BlockErase:	
  9018                           ; 0 bytes @ 0x2
  9019                           
  9020  0072                     ??i1_OpenUSART:	
  9021                           ; 0 bytes @ 0x2
  9022                           
  9023  0072                     Reverse_Byte@This:	
  9024                           ; 0 bytes @ 0x2
  9025                           
  9026  0072                     i1CheckSum_byte@Odd_Even:	
  9027                           ; 1 bytes @ 0x2
  9028                           
  9029  0072                     i1OpenUSART@config:	
  9030                           ; 1 bytes @ 0x2
  9031                           
  9032  0072                     i1ReadFlash_2Byte@column:	
  9033                           ; 1 bytes @ 0x2
  9034                           
  9035                           
  9036                           ; 1 bytes @ 0x2
  9037  0072                     	ds	1
  9038  0073                     ??i1_CheckSum_byte:	
  9039  0073                     ??i1_ReadFlash_2Byte:	
  9040                           ; 0 bytes @ 0x3
  9041                           
  9042  0073                     cleanBuffer@data:	
  9043                           ; 0 bytes @ 0x3
  9044                           
  9045  0073                     i1CheckSum_byte@ThisTemp:	
  9046                           ; 1 bytes @ 0x3
  9047                           
  9048                           
  9049                           ; 2 bytes @ 0x3
  9050  0073                     	ds	1
  9051  0074                     ??i1_delayUS:	
  9052  0074                     cleanBuffer@i:	
  9053                           ; 0 bytes @ 0x4
  9054                           
  9055  0074                     ___lmul@multiplicand:	
  9056                           ; 1 bytes @ 0x4
  9057                           
  9058  0074                     i1___lldiv@dividend:	
  9059                           ; 4 bytes @ 0x4
  9060                           
  9061                           
  9062                           ; 4 bytes @ 0x4
  9063  0074                     	ds	1
  9064  0075                     i1CheckSum_byte@Parity:	
  9065  0075                     i1delayUS@i:	
  9066                           ; 1 bytes @ 0x5
  9067                           
  9068                           
  9069                           ; 4 bytes @ 0x5
  9070  0075                     	ds	1
  9071  0076                     ?i1_ReadFlash_4Byte:	
  9072  0076                     BufferShiftBack@i:	
  9073                           ; 4 bytes @ 0x6
  9074                           
  9075  0076                     i1CheckSum_byte@i:	
  9076                           ; 1 bytes @ 0x6
  9077                           
  9078  0076                     i1ReadFlash_4Byte@row:	
  9079                           ; 1 bytes @ 0x6
  9080                           
  9081                           
  9082                           ; 2 bytes @ 0x6
  9083  0076                     	ds	1
  9084  0077                     ?i1_UARTchar:	
  9085  0077                     ?_PS2RawToScan:	
  9086                           ; 0 bytes @ 0x7
  9087                           
  9088  0077                     BufferShiftBack@buffer:	
  9089                           ; 2 bytes @ 0x7
  9090                           
  9091  0077                     i1UARTchar@override:	
  9092                           ; 1 bytes @ 0x7
  9093                           
  9094  0077                     PS2RawToScan@Raw:	
  9095                           ; 1 bytes @ 0x7
  9096                           
  9097                           
  9098                           ; 2 bytes @ 0x7
  9099  0077                     	ds	1
  9100  0078                     ??___lmul:	
  9101  0078                     ??i1___lldiv:	
  9102                           ; 0 bytes @ 0x8
  9103                           
  9104  0078                     i1UARTchar@NinethBit_override_data:	
  9105                           ; 0 bytes @ 0x8
  9106                           
  9107  0078                     i1ReadFlash_4Byte@column:	
  9108                           ; 1 bytes @ 0x8
  9109                           
  9110  0078                     ___lmul@product:	
  9111                           ; 1 bytes @ 0x8
  9112                           
  9113  0078                     i1___lldiv@quotient:	
  9114                           ; 4 bytes @ 0x8
  9115                           
  9116                           
  9117                           ; 4 bytes @ 0x8
  9118  0078                     	ds	1
  9119  0079                     ??_PS2RawToScan:	
  9120  0079                     ??i1_UARTchar:	
  9121                           ; 0 bytes @ 0x9
  9122                           
  9123  0079                     i1delayUS@j:	
  9124                           ; 0 bytes @ 0x9
  9125                           
  9126                           
  9127                           ; 1 bytes @ 0x9
  9128  0079                     	ds	1
  9129  007A                     ?_UART_send_break_timed:	
  9130  007A                     ??_ResendLast:	
  9131                           ; 0 bytes @ 0xA
  9132                           
  9133  007A                     ?_WriteFlash_Sequential:	
  9134                           ; 0 bytes @ 0xA
  9135                           
  9136  007A                     ??i1_Send_PS2:	
  9137                           ; 0 bytes @ 0xA
  9138                           
  9139  007A                     ??i1_ReadFlash_4Byte:	
  9140                           ; 0 bytes @ 0xA
  9141                           
  9142  007A                     i1UARTchar@data:	
  9143                           ; 0 bytes @ 0xA
  9144                           
  9145  007A                     UART_send_break_timed@US:	
  9146                           ; 1 bytes @ 0xA
  9147                           
  9148  007A                     WriteFlash_Sequential@row:	
  9149                           ; 2 bytes @ 0xA
  9150                           
  9151                           
  9152                           ; 2 bytes @ 0xA
  9153  007A                     	ds	1
  9154  007B                     ?i1_UARTstringWAIT:	
  9155  007B                     i1UARTstringWAIT@data:	
  9156                           ; 0 bytes @ 0xB
  9157                           
  9158                           
  9159                           ; 2 bytes @ 0xB
  9160  007B                     	ds	1
  9161  007C                     ??_UART_send_break_timed:	
  9162  007C                     WriteFlash_Sequential@buffer:	
  9163                           ; 0 bytes @ 0xC
  9164                           
  9165  007C                     i1___lldiv@counter:	
  9166                           ; 1 bytes @ 0xC
  9167                           
  9168                           
  9169                           ; 1 bytes @ 0xC
  9170  007C                     	ds	1
  9171  007D                     ??___llmod:	
  9172  007D                     WriteFlash_Sequential@amount:	
  9173                           ; 0 bytes @ 0xD
  9174                           
  9175  007D                     ___llmod@counter:	
  9176                           ; 1 bytes @ 0xD
  9177                           
  9178                           
  9179                           ; 1 bytes @ 0xD
  9180  007D                     	ds	1
  9181  007E                     ??_isr:	
  9182                           
  9183                           	psect	cstackBANK0
  9184  0020                     __pcstackBANK0:	
  9185                           ; 0 bytes @ 0xE
  9186                           
  9187  0020                     ??_WriteFlash_Sequential:	
  9188  0020                     ?i1_InitUART:	
  9189                           ; 0 bytes @ 0x0
  9190                           
  9191  0020                     ??i1_UARTstringWAIT:	
  9192                           ; 0 bytes @ 0x0
  9193                           
  9194  0020                     ?___llmod:	
  9195                           ; 0 bytes @ 0x0
  9196                           
  9197  0020                     i1Send_PS2@oddparity:	
  9198                           ; 4 bytes @ 0x0
  9199                           
  9200  0020                     PS2RawToScan@temp:	
  9201                           ; 1 bytes @ 0x0
  9202                           
  9203  0020                     ___llmod@divisor:	
  9204                           ; 2 bytes @ 0x0
  9205                           
  9206  0020                     i1InitUART@Baud:	
  9207                           ; 4 bytes @ 0x0
  9208                           
  9209  0020                     i1ReadFlash_4Byte@temp:	
  9210                           ; 4 bytes @ 0x0
  9211                           
  9212                           
  9213                           ; 4 bytes @ 0x0
  9214  0020                     	ds	1
  9215  0021                     i1Send_PS2@command:	
  9216                           
  9217                           ; 1 bytes @ 0x1
  9218  0021                     	ds	1
  9219  0022                     i1Send_PS2@i:	
  9220  0022                     WriteFlash_Sequential@TempBufH:	
  9221                           ; 1 bytes @ 0x2
  9222                           
  9223                           
  9224                           ; 32 bytes @ 0x2
  9225  0022                     	ds	1
  9226  0023                     i1Send_PS2@timeout:	
  9227                           
  9228                           ; 2 bytes @ 0x3
  9229  0023                     	ds	1
  9230  0024                     ?i1_ReadBaud:	
  9231  0024                     i1InitUART@parity:	
  9232                           ; 4 bytes @ 0x4
  9233                           
  9234  0024                     i1ReadBaud@row:	
  9235                           ; 1 bytes @ 0x4
  9236                           
  9237  0024                     ___llmod@dividend:	
  9238                           ; 2 bytes @ 0x4
  9239                           
  9240                           
  9241                           ; 4 bytes @ 0x4
  9242  0024                     	ds	1
  9243  0025                     ??i1_InitUART:	
  9244                           
  9245                           ; 0 bytes @ 0x5
  9246  0025                     	ds	1
  9247  0026                     i1ReadBaud@column:	
  9248                           
  9249                           ; 1 bytes @ 0x6
  9250  0026                     	ds	2
  9251  0028                     ??i1_ReadBaud:	
  9252  0028                     ?_sprintf:	
  9253                           ; 0 bytes @ 0x8
  9254                           
  9255  0028                     sprintf@sp:	
  9256                           ; 2 bytes @ 0x8
  9257                           
  9258                           
  9259                           ; 2 bytes @ 0x8
  9260  0028                     	ds	2
  9261  002A                     sprintf@f:	
  9262                           
  9263                           ; 2 bytes @ 0xA
  9264  002A                     	ds	3
  9265  002D                     i1InitUART@spbrg:	
  9266                           
  9267                           ; 2 bytes @ 0xD
  9268  002D                     	ds	2
  9269  002F                     i1InitUART@baudconfig:	
  9270                           
  9271                           ; 1 bytes @ 0xF
  9272  002F                     	ds	1
  9273  0030                     ??_sprintf:	
  9274  0030                     i1InitUART@config:	
  9275                           ; 0 bytes @ 0x10
  9276                           
  9277  0030                     i1ReadBaud@temp:	
  9278                           ; 1 bytes @ 0x10
  9279                           
  9280                           
  9281                           ; 4 bytes @ 0x10
  9282  0030                     	ds	1
  9283  0031                     i1InitUART@temp:	
  9284                           
  9285                           ; 4 bytes @ 0x11
  9286  0031                     	ds	5
  9287  0036                     sprintf@flag:	
  9288                           
  9289                           ; 1 bytes @ 0x16
  9290  0036                     	ds	1
  9291  0037                     sprintf@prec:	
  9292                           
  9293                           ; 2 bytes @ 0x17
  9294  0037                     	ds	2
  9295  0039                     sprintf@val:	
  9296                           
  9297                           ; 4 bytes @ 0x19
  9298  0039                     	ds	4
  9299  003D                     sprintf@ap:	
  9300                           
  9301                           ; 1 bytes @ 0x1D
  9302  003D                     	ds	1
  9303  003E                     sprintf@c:	
  9304                           
  9305                           ; 1 bytes @ 0x1E
  9306  003E                     	ds	4
  9307  0042                     WriteFlash_Sequential@TempBufL:	
  9308                           
  9309                           ; 32 bytes @ 0x22
  9310  0042                     	ds	32
  9311  0062                     WriteFlash_Sequential@tempL:	
  9312                           
  9313                           ; 1 bytes @ 0x42
  9314  0062                     	ds	1
  9315  0063                     WriteFlash_Sequential@amountTemp:	
  9316                           
  9317                           ; 1 bytes @ 0x43
  9318  0063                     	ds	1
  9319  0064                     WriteFlash_Sequential@tempH:	
  9320                           
  9321                           ; 1 bytes @ 0x44
  9322  0064                     	ds	1
  9323  0065                     WriteFlash_Sequential@temp:	
  9324                           
  9325                           ; 2 bytes @ 0x45
  9326  0065                     	ds	2
  9327  0067                     WriteFlash_Sequential@spaces:	
  9328                           
  9329                           ; 1 bytes @ 0x47
  9330  0067                     	ds	1
  9331  0068                     WriteFlash_Sequential@i:	
  9332                           
  9333                           ; 1 bytes @ 0x48
  9334  0068                     	ds	1
  9335  0069                     ?_WriteBaud:	
  9336  0069                     WriteBaud@row:	
  9337                           ; 0 bytes @ 0x49
  9338                           
  9339                           
  9340                           ; 2 bytes @ 0x49
  9341  0069                     	ds	2
  9342  006B                     WriteBaud@Baud:	
  9343                           
  9344                           ; 4 bytes @ 0x4B
  9345  006B                     	ds	4
  9346  006F                     WriteBaud@Parity:	
  9347                           
  9348                           ; 1 bytes @ 0x4F
  9349  006F                     	ds	1
  9350                           
  9351                           	psect	text2
  9352  02B3                     __ptext2:	
  9353 ;; *************** function _ReadVoltage *****************
  9354 ;; Defined at:
  9355 ;;		line 62 in file "ADC.c"
  9356 ;; Parameters:    Size  Location     Type
  9357 ;;		None
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;  voltage         3   45[BANK3 ] float 
  9360 ;;  temp            2   48[BANK3 ] unsigned int 
  9361 ;; Return value:  Size  Location     Type
  9362 ;;                  3   41[BANK3 ] unsigned int 
  9363 ;; Registers used:
  9364 ;;		wreg, status,2, status,0, pclath, cstack
  9365 ;; Tracked objects:
  9366 ;;		On entry : 18/3
  9367 ;;		On exit  : 1F/3
  9368 ;;		Unchanged: 0/0
  9369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9370 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  9371 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  9372 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  9373 ;;      Totals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
  9374 ;;Total ram usage:        9 bytes
  9375 ;; Hardware stack levels used:    1
  9376 ;; Hardware stack levels required when called:    9
  9377 ;; This function calls:
  9378 ;;		_DisableInternalADC
  9379 ;;		_InternalADC_Read
  9380 ;;		___ftdiv
  9381 ;;		___ftmul
  9382 ;;		___lwtoft
  9383 ;; This function is called by:
  9384 ;;		_main
  9385 ;; This function uses a non-reentrant model
  9386 ;;
  9387                           
  9388                           
  9389                           ;psect for function _ReadVoltage
  9390  02B3                     _ReadVoltage:	
  9391                           
  9392                           ;ADC.c: 64: unsigned int temp;
  9393                           ;ADC.c: 65: double voltage;
  9394                           ;ADC.c: 70: temp = InternalADC_Read(2);
  9395                           
  9396                           ;incstack = 0
  9397                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  9398  02B3  3002               	movlw	2
  9399  02B4  22FB  3182         	fcall	_InternalADC_Read
  9400  02B6  082B               	movf	(?_InternalADC_Read+1)^(0+384),w
  9401  02B7  00D1               	movwf	(ReadVoltage@temp+1)^(0+384)
  9402  02B8  082A               	movf	?_InternalADC_Read^(0+384),w
  9403  02B9  00D0               	movwf	ReadVoltage@temp^(0+384)
  9404                           
  9405                           ;ADC.c: 71: DisableInternalADC();
  9406  02BA  22F8  3182         	fcall	_DisableInternalADC
  9407                           
  9408                           ;ADC.c: 78: if((FVRCON & 0x03) == 0x03)
  9409  02BC  2435  3182         	fcall	PL58	;call to abstracted procedure
  9410  02BE  3A03               	xorlw	3
  9411  02BF  1D03               	btfss	3,2
  9412  02C0  2AC4               	goto	l5992
  9413                           
  9414                           ;ADC.c: 79: {
  9415                           ;ADC.c: 81: temp <<= 2;
  9416  02C1  35D0               	lslf	ReadVoltage@temp^(0+384),f
  9417  02C2  0DD1               	rlf	(ReadVoltage@temp+1)^(0+384),f
  9418  02C3  2AC9               	goto	l5994
  9419  02C4                     l5992:	
  9420                           ;ADC.c: 82: }
  9421                           
  9422                           
  9423                           ;ADC.c: 83: else if((FVRCON & 0x03) == 0x02)
  9424  02C4  2435  3182         	fcall	PL58	;call to abstracted procedure
  9425  02C6  3A02               	xorlw	2
  9426  02C7  1D03               	btfss	3,2
  9427  02C8  2ACB               	goto	l5996
  9428  02C9                     l5994:	
  9429                           
  9430                           ;ADC.c: 84: {
  9431                           ;ADC.c: 86: temp <<= 1;
  9432  02C9  35D0               	lslf	ReadVoltage@temp^(0+384),f
  9433  02CA  0DD1               	rlf	(ReadVoltage@temp+1)^(0+384),f
  9434  02CB                     l5996:	
  9435                           
  9436                           ;ADC.c: 87: }
  9437                           ;ADC.c: 88: voltage = ((double)temp / 1000) * 5.7;
  9438  02CB  3066               	movlw	102
  9439  02CC  00BA               	movwf	___ftmul@f1^(0+384)
  9440  02CD  30B6               	movlw	182
  9441  02CE  00BB               	movwf	(___ftmul@f1+1)^(0+384)
  9442  02CF  3040               	movlw	64
  9443  02D0  00BC               	movwf	(___ftmul@f1+2)^(0+384)
  9444  02D1  307A               	movlw	122
  9445  02D2  01AB               	clrf	___ftdiv@f2^(0+384)
  9446  02D3  00AC               	movwf	(___ftdiv@f2+1)^(0+384)
  9447  02D4  3044               	movlw	68
  9448  02D5  00AD               	movwf	(___ftdiv@f2+2)^(0+384)
  9449  02D6  0851               	movf	(ReadVoltage@temp+1)^(0+384),w
  9450  02D7  00A9               	movwf	(___lwtoft@c+1)^(0+384)
  9451  02D8  0850               	movf	ReadVoltage@temp^(0+384),w
  9452  02D9  00A8               	movwf	___lwtoft@c^(0+384)
  9453  02DA  2384  3182         	fcall	___lwtoft
  9454  02DC  0828               	movf	?___lwtoft^(0+384),w
  9455  02DD  00AE               	movwf	___ftdiv@f1^(0+384)
  9456  02DE  0829               	movf	(?___lwtoft+1)^(0+384),w
  9457  02DF  00AF               	movwf	(___ftdiv@f1+1)^(0+384)
  9458  02E0  082A               	movf	(?___lwtoft+2)^(0+384),w
  9459  02E1  00B0               	movwf	(___ftdiv@f1+2)^(0+384)
  9460  02E2  2328  3182         	fcall	___ftdiv
  9461  02E4  082B               	movf	?___ftdiv^(0+384),w
  9462  02E5  00BD               	movwf	___ftmul@f2^(0+384)
  9463  02E6  082C               	movf	(?___ftdiv+1)^(0+384),w
  9464  02E7  00BE               	movwf	(___ftmul@f2+1)^(0+384)
  9465  02E8  082D               	movf	(?___ftdiv+2)^(0+384),w
  9466  02E9  00BF               	movwf	(___ftmul@f2+2)^(0+384)
  9467  02EA  23D2               	fcall	___ftmul
  9468  02EB  083A               	movf	?___ftmul^(0+384),w
  9469  02EC  00CD               	movwf	ReadVoltage@voltage^(0+384)
  9470  02ED  083B               	movf	(?___ftmul+1)^(0+384),w
  9471  02EE  00CE               	movwf	(ReadVoltage@voltage+1)^(0+384)
  9472  02EF  083C               	movf	(?___ftmul+2)^(0+384),w
  9473  02F0  00CF               	movwf	(ReadVoltage@voltage+2)^(0+384)
  9474                           
  9475                           ;ADC.c: 89: return voltage;
  9476  02F1  084D               	movf	ReadVoltage@voltage^(0+384),w
  9477  02F2  00C9               	movwf	?_ReadVoltage^(0+384)
  9478  02F3  084E               	movf	(ReadVoltage@voltage+1)^(0+384),w
  9479  02F4  00CA               	movwf	(?_ReadVoltage+1)^(0+384)
  9480  02F5  084F               	movf	(ReadVoltage@voltage+2)^(0+384),w
  9481  02F6  00CB               	movwf	(?_ReadVoltage+2)^(0+384)
  9482  02F7  0008               	return
  9483  02F8                     __end_of_ReadVoltage:	
  9484  02F8                     __ptext8:	
  9485 ;; *************** function _DisableInternalADC *****************
  9486 ;; Defined at:
  9487 ;;		line 120 in file "ADC.c"
  9488 ;; Parameters:    Size  Location     Type
  9489 ;;		None
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;		None
  9492 ;; Return value:  Size  Location     Type
  9493 ;;		None               void
  9494 ;; Registers used:
  9495 ;;		None
  9496 ;; Tracked objects:
  9497 ;;		On entry : 1F/3
  9498 ;;		On exit  : 1F/1
  9499 ;;		Unchanged: 0/0
  9500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;Total ram usage:        0 bytes
  9506 ;; Hardware stack levels used:    1
  9507 ;; Hardware stack levels required when called:    7
  9508 ;; This function calls:
  9509 ;;		Nothing
  9510 ;; This function is called by:
  9511 ;;		_ReadVoltage
  9512 ;; This function uses a non-reentrant model
  9513 ;;
  9514                           
  9515                           
  9516                           ;psect for function _DisableInternalADC
  9517  02F8                     _DisableInternalADC:	
  9518                           
  9519                           ;ADC.c: 122: ADCON0 &= ~0b00000001;
  9520                           
  9521                           ;incstack = 0
  9522                           ; Regs used in _DisableInternalADC: []
  9523  02F8  0021               	movlb	1	; select bank1
  9524  02F9  101D               	bcf	29,0	;volatile
  9525  02FA  0008               	return
  9526  02FB                     __end_of_DisableInternalADC:	
  9527  02FB                     __ptext7:	
  9528 ;; *************** function _InternalADC_Read *****************
  9529 ;; Defined at:
  9530 ;;		line 97 in file "ADC.c"
  9531 ;; Parameters:    Size  Location     Type
  9532 ;;  channel         1    wreg     unsigned char 
  9533 ;; Auto vars:     Size  Location     Type
  9534 ;;  channel         1   13[BANK3 ] unsigned char 
  9535 ;; Return value:  Size  Location     Type
  9536 ;;                  2   10[BANK3 ] unsigned int 
  9537 ;; Registers used:
  9538 ;;		wreg, status,2, status,0, pclath, cstack
  9539 ;; Tracked objects:
  9540 ;;		On entry : 18/3
  9541 ;;		On exit  : 1F/3
  9542 ;;		Unchanged: 0/0
  9543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9544 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  9545 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  9546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  9548 ;;Total ram usage:        4 bytes
  9549 ;; Hardware stack levels used:    1
  9550 ;; Hardware stack levels required when called:    8
  9551 ;; This function calls:
  9552 ;;		_delayUS
  9553 ;; This function is called by:
  9554 ;;		_ReadVoltage
  9555 ;; This function uses a non-reentrant model
  9556 ;;
  9557                           
  9558                           
  9559                           ;psect for function _InternalADC_Read
  9560  02FB                     _InternalADC_Read:	
  9561                           
  9562                           ;incstack = 0
  9563                           ; Regs used in _InternalADC_Read: [wreg+status,2+status,0+pclath+cstack]
  9564                           ;InternalADC_Read@channel stored from wreg
  9565  02FB  0023               	movlb	3	; select bank3
  9566  02FC  00AD               	movwf	InternalADC_Read@channel^(0+384)
  9567                           
  9568                           ;ADC.c: 99: ADCON0 =0;
  9569  02FD  0021               	movlb	1	; select bank1
  9570  02FE  019D               	clrf	29	;volatile
  9571                           
  9572                           ;ADC.c: 100: ADCON1 =0;
  9573  02FF  019E               	clrf	30	;volatile
  9574                           
  9575                           ;ADC.c: 101: ADCON1 |= 0b01010000;
  9576  0300  3050               	movlw	80
  9577  0301  049E               	iorwf	30,f	;volatile
  9578                           
  9579                           ;ADC.c: 102: FVRCON |= 0b10000000;
  9580  0302  0022               	movlb	2	; select bank2
  9581  0303  1797               	bsf	23,7	;volatile
  9582                           
  9583                           ;ADC.c: 103: FVRCON |= 0b00000011;
  9584  0304  3003               	movlw	3
  9585  0305  0497               	iorwf	23,f	;volatile
  9586  0306                     l1035:	
  9587                           ;ADC.c: 104: while(!(FVRCON & 0b01000000));
  9588                           
  9589  0306  1F17               	btfss	23,6	;volatile
  9590  0307  2B06               	goto	l1035
  9591                           
  9592                           ;ADC.c: 105: ADCON0 |= (channel << 2);
  9593  0308  0023               	movlb	3	; select bank3
  9594  0309  082D               	movf	InternalADC_Read@channel^(0+384),w
  9595  030A  0709               	addwf	9,w
  9596  030B  0709               	addwf	9,w
  9597  030C  0021               	movlb	1	; select bank1
  9598  030D  049D               	iorwf	29,f	;volatile
  9599                           
  9600                           ;ADC.c: 106: ADCON1 |= 0b10000011;
  9601  030E  3083               	movlw	131
  9602  030F  049E               	iorwf	30,f	;volatile
  9603                           
  9604                           ;ADC.c: 107: ADCON0 |= 0b00000001;
  9605  0310  141D               	bsf	29,0	;volatile
  9606                           
  9607                           ;ADC.c: 108: (PIE1bits.ADIE=0);
  9608  0311  1311               	bcf	17,6	;volatile
  9609                           
  9610                           ;ADC.c: 109: delayUS(5);
  9611  0312  3005               	movlw	5
  9612  0313  318B  23A3  3182   	fcall	PL22	;call to abstracted procedure
  9613  0316  318A  22CF  3182   	fcall	_delayUS
  9614                           
  9615                           ;ADC.c: 110: ADCON0 |= 0b00000010;
  9616  0319  0021               	movlb	1	; select bank1
  9617  031A  149D               	bsf	29,1	;volatile
  9618  031B                     l1038:	
  9619                           ;ADC.c: 111: while(ADCON0 & 0b00000010);
  9620                           
  9621  031B  189D               	btfsc	29,1	;volatile
  9622  031C  2B1B               	goto	l1038
  9623                           
  9624                           ;ADC.c: 112: return ((ADRESH << 8) + ADRESL);
  9625  031D  081C               	movf	28,w	;volatile
  9626  031E  0023               	movlb	3	; select bank3
  9627  031F  00AB               	movwf	(?_InternalADC_Read+1)^(0+384)
  9628  0320  01AA               	clrf	?_InternalADC_Read^(0+384)
  9629  0321  0021               	movlb	1	; select bank1
  9630  0322  081B               	movf	27,w	;volatile
  9631  0323  0023               	movlb	3	; select bank3
  9632  0324  07AA               	addwf	?_InternalADC_Read^(0+384),f
  9633  0325  1803               	skipnc
  9634  0326  0AAB               	incf	(?_InternalADC_Read+1)^(0+384),f
  9635  0327  0008               	return
  9636  0328                     __end_of_InternalADC_Read:	
  9637  0328                     __ptext5:	
  9638 ;; *************** function ___ftdiv *****************
  9639 ;; Defined at:
  9640 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  9641 ;; Parameters:    Size  Location     Type
  9642 ;;  f2              3   11[BANK3 ] float 
  9643 ;;  f1              3   14[BANK3 ] float 
  9644 ;; Auto vars:     Size  Location     Type
  9645 ;;  f3              3   21[BANK3 ] float 
  9646 ;;  sign            1   25[BANK3 ] unsigned char 
  9647 ;;  exp             1   24[BANK3 ] unsigned char 
  9648 ;;  cntr            1   20[BANK3 ] unsigned char 
  9649 ;; Return value:  Size  Location     Type
  9650 ;;                  3   11[BANK3 ] float 
  9651 ;; Registers used:
  9652 ;;		wreg, status,2, status,0, pclath, cstack
  9653 ;; Tracked objects:
  9654 ;;		On entry : 1F/3
  9655 ;;		On exit  : 1F/3
  9656 ;;		Unchanged: 0/0
  9657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9658 ;;      Params:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Temps:          0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Totals:         0       0       0       0      15       0       0       0       0       0       0       0       
      +0       0
  9662 ;;Total ram usage:       15 bytes
  9663 ;; Hardware stack levels used:    1
  9664 ;; Hardware stack levels required when called:    8
  9665 ;; This function calls:
  9666 ;;		___ftpack
  9667 ;; This function is called by:
  9668 ;;		_ReadVoltage
  9669 ;; This function uses a non-reentrant model
  9670 ;;
  9671                           
  9672                           
  9673                           ;psect for function ___ftdiv
  9674  0328                     ___ftdiv:	
  9675                           
  9676                           ;incstack = 0
  9677                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9678  0328  082E               	movf	___ftdiv@f1^(0+384),w
  9679  0329  00B1               	movwf	??___ftdiv^(0+384)
  9680  032A  082F               	movf	(___ftdiv@f1+1)^(0+384),w
  9681  032B  00B2               	movwf	(??___ftdiv^(0+384)+1)
  9682  032C  0830               	movf	(___ftdiv@f1+2)^(0+384),w
  9683  032D  00B3               	movwf	(??___ftdiv^(0+384)+2)
  9684  032E  1003               	clrc
  9685  032F  0D32               	rlf	(??___ftdiv^(0+384)+1),w
  9686  0330  0D33               	rlf	(??___ftdiv^(0+384)+2),w
  9687  0331  00B8               	movwf	___ftdiv@exp^(0+384)
  9688  0332  0838               	movf	___ftdiv@exp^(0+384),w
  9689  0333  1D03               	btfss	3,2
  9690  0334  2B36               	goto	l5072
  9691  0335  2C3B               	ljmp	PL76	;call to abstracted procedure
  9692  0336                     l5072:	
  9693  0336  082B               	movf	___ftdiv@f2^(0+384),w
  9694  0337  00B1               	movwf	??___ftdiv^(0+384)
  9695  0338  082C               	movf	(___ftdiv@f2+1)^(0+384),w
  9696  0339  00B2               	movwf	(??___ftdiv^(0+384)+1)
  9697  033A  082D               	movf	(___ftdiv@f2+2)^(0+384),w
  9698  033B  00B3               	movwf	(??___ftdiv^(0+384)+2)
  9699  033C  1003               	clrc
  9700  033D  0D32               	rlf	(??___ftdiv^(0+384)+1),w
  9701  033E  0D33               	rlf	(??___ftdiv^(0+384)+2),w
  9702  033F  00B9               	movwf	___ftdiv@sign^(0+384)
  9703  0340  0839               	movf	___ftdiv@sign^(0+384),w
  9704  0341  1D03               	btfss	3,2
  9705  0342  2B44               	goto	l1316
  9706  0343  2C3B               	ljmp	PL76	;call to abstracted procedure
  9707  0344                     l1316:	
  9708  0344  3089               	movlw	137
  9709  0345  01B5               	clrf	___ftdiv@f3^(0+384)
  9710  0346  01B6               	clrf	(___ftdiv@f3+1)^(0+384)
  9711  0347  01B7               	clrf	(___ftdiv@f3+2)^(0+384)
  9712  0348  0739               	addwf	___ftdiv@sign^(0+384),w
  9713  0349  00B1               	movwf	??___ftdiv^(0+384)
  9714  034A  02B8               	subwf	___ftdiv@exp^(0+384),f
  9715  034B  0830               	movf	(___ftdiv@f1^(0+384)+2),w
  9716  034C  00B9               	movwf	___ftdiv@sign^(0+384)
  9717  034D  082D               	movf	(___ftdiv@f2^(0+384)+2),w
  9718  034E  06B9               	xorwf	___ftdiv@sign^(0+384),f
  9719  034F  3080               	movlw	128
  9720  0350  05B9               	andwf	___ftdiv@sign^(0+384),f
  9721  0351  3018               	movlw	24
  9722  0352  17AF               	bsf	(___ftdiv@f1^(0+384)+1),7
  9723  0353  01B0               	clrf	(___ftdiv@f1+2)^(0+384)
  9724  0354  17AC               	bsf	(___ftdiv@f2^(0+384)+1),7
  9725  0355  01AD               	clrf	(___ftdiv@f2+2)^(0+384)
  9726  0356  00B4               	movwf	___ftdiv@cntr^(0+384)
  9727  0357                     l5094:	
  9728  0357  35B5               	lslf	___ftdiv@f3^(0+384),f
  9729  0358  0DB6               	rlf	(___ftdiv@f3+1)^(0+384),f
  9730  0359  0DB7               	rlf	(___ftdiv@f3+2)^(0+384),f
  9731  035A  082D               	movf	(___ftdiv@f2+2)^(0+384),w
  9732  035B  0230               	subwf	(___ftdiv@f1+2)^(0+384),w
  9733  035C  1D03               	skipz
  9734  035D  2B64               	goto	u5115
  9735  035E  082C               	movf	(___ftdiv@f2+1)^(0+384),w
  9736  035F  022F               	subwf	(___ftdiv@f1+1)^(0+384),w
  9737  0360  1D03               	skipz
  9738  0361  2B64               	goto	u5115
  9739  0362  082B               	movf	___ftdiv@f2^(0+384),w
  9740  0363  022E               	subwf	___ftdiv@f1^(0+384),w
  9741  0364                     u5115:	
  9742  0364  1C03               	skipc
  9743  0365  2B6D               	goto	l5100
  9744  0366  082B               	movf	___ftdiv@f2^(0+384),w
  9745  0367  02AE               	subwf	___ftdiv@f1^(0+384),f
  9746  0368  082C               	movf	(___ftdiv@f2+1)^(0+384),w
  9747  0369  3BAF               	subwfb	(___ftdiv@f1+1)^(0+384),f
  9748  036A  082D               	movf	(___ftdiv@f2+2)^(0+384),w
  9749  036B  3BB0               	subwfb	(___ftdiv@f1+2)^(0+384),f
  9750  036C  1435               	bsf	___ftdiv@f3^(0+384),0
  9751  036D                     l5100:	
  9752  036D  35AE               	lslf	___ftdiv@f1^(0+384),f
  9753  036E  0DAF               	rlf	(___ftdiv@f1+1)^(0+384),f
  9754  036F  0DB0               	rlf	(___ftdiv@f1+2)^(0+384),f
  9755  0370  0BB4               	decfsz	___ftdiv@cntr^(0+384),f
  9756  0371  2B57               	goto	l5094
  9757  0372  0835               	movf	___ftdiv@f3^(0+384),w
  9758  0373  00A0               	movwf	___ftpack@arg^(0+384)
  9759  0374  0836               	movf	(___ftdiv@f3+1)^(0+384),w
  9760  0375  00A1               	movwf	(___ftpack@arg+1)^(0+384)
  9761  0376  0837               	movf	(___ftdiv@f3+2)^(0+384),w
  9762  0377  00A2               	movwf	(___ftpack@arg+2)^(0+384)
  9763  0378  0838               	movf	___ftdiv@exp^(0+384),w
  9764  0379  00A3               	movwf	___ftpack@exp^(0+384)
  9765  037A  0839               	movf	___ftdiv@sign^(0+384),w
  9766  037B  00A4               	movwf	___ftpack@sign^(0+384)
  9767  037C  2394               	fcall	___ftpack
  9768  037D  0820               	movf	?___ftpack^(0+384),w
  9769  037E  00AB               	movwf	?___ftdiv^(0+384)
  9770  037F  0821               	movf	(?___ftpack+1)^(0+384),w
  9771  0380  00AC               	movwf	(?___ftdiv+1)^(0+384)
  9772  0381  0822               	movf	(?___ftpack+2)^(0+384),w
  9773  0382  00AD               	movwf	(?___ftdiv+2)^(0+384)
  9774  0383  0008               	return
  9775  0384                     __end_of___ftdiv:	
  9776  0384                     __ptext3:	
  9777 ;; *************** function ___lwtoft *****************
  9778 ;; Defined at:
  9779 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  9780 ;; Parameters:    Size  Location     Type
  9781 ;;  c               2    8[BANK3 ] unsigned int 
  9782 ;; Auto vars:     Size  Location     Type
  9783 ;;		None
  9784 ;; Return value:  Size  Location     Type
  9785 ;;                  3    8[BANK3 ] float 
  9786 ;; Registers used:
  9787 ;;		wreg, status,2, status,0, pclath, cstack
  9788 ;; Tracked objects:
  9789 ;;		On entry : 1F/3
  9790 ;;		On exit  : 1F/3
  9791 ;;		Unchanged: 0/0
  9792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9793 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9796 ;;      Totals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  9797 ;;Total ram usage:        3 bytes
  9798 ;; Hardware stack levels used:    1
  9799 ;; Hardware stack levels required when called:    8
  9800 ;; This function calls:
  9801 ;;		___ftpack
  9802 ;; This function is called by:
  9803 ;;		_ReadVoltage
  9804 ;; This function uses a non-reentrant model
  9805 ;;
  9806                           
  9807                           
  9808                           ;psect for function ___lwtoft
  9809  0384                     ___lwtoft:	
  9810                           
  9811                           ;incstack = 0
  9812                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  9813  0384  0828               	movf	___lwtoft@c^(0+384),w
  9814  0385  00A0               	movwf	___ftpack@arg^(0+384)
  9815  0386  0829               	movf	(___lwtoft@c+1)^(0+384),w
  9816  0387  00A1               	movwf	(___ftpack@arg+1)^(0+384)
  9817  0388  308E               	movlw	142
  9818  0389  01A2               	clrf	(___ftpack@arg+2)^(0+384)
  9819  038A  00A3               	movwf	___ftpack@exp^(0+384)
  9820  038B  01A4               	clrf	___ftpack@sign^(0+384)
  9821  038C  2394               	fcall	___ftpack
  9822  038D  0820               	movf	?___ftpack^(0+384),w
  9823  038E  00A8               	movwf	?___lwtoft^(0+384)
  9824  038F  0821               	movf	(?___ftpack+1)^(0+384),w
  9825  0390  00A9               	movwf	(?___lwtoft+1)^(0+384)
  9826  0391  0822               	movf	(?___ftpack+2)^(0+384),w
  9827  0392  00AA               	movwf	(?___lwtoft+2)^(0+384)
  9828  0393  0008               	return
  9829  0394                     __end_of___lwtoft:	
  9830  0394                     __ptext6:	
  9831 ;; *************** function ___ftpack *****************
  9832 ;; Defined at:
  9833 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  9834 ;; Parameters:    Size  Location     Type
  9835 ;;  arg             3    0[BANK3 ] unsigned um
  9836 ;;  exp             1    3[BANK3 ] unsigned char 
  9837 ;;  sign            1    4[BANK3 ] unsigned char 
  9838 ;; Auto vars:     Size  Location     Type
  9839 ;;		None
  9840 ;; Return value:  Size  Location     Type
  9841 ;;                  3    0[BANK3 ] float 
  9842 ;; Registers used:
  9843 ;;		wreg, status,2, status,0
  9844 ;; Tracked objects:
  9845 ;;		On entry : 1F/3
  9846 ;;		On exit  : 1F/3
  9847 ;;		Unchanged: 0/0
  9848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9849 ;;      Params:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  9850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Temps:          0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  9852 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0
  9853 ;;Total ram usage:        8 bytes
  9854 ;; Hardware stack levels used:    1
  9855 ;; Hardware stack levels required when called:    7
  9856 ;; This function calls:
  9857 ;;		Nothing
  9858 ;; This function is called by:
  9859 ;;		___ftdiv
  9860 ;;		___ftmul
  9861 ;;		___lwtoft
  9862 ;; This function uses a non-reentrant model
  9863 ;;
  9864                           
  9865                           
  9866                           ;psect for function ___ftpack
  9867  0394                     ___ftpack:	
  9868                           
  9869                           ;incstack = 0
  9870                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9871  0394  0823               	movf	___ftpack@exp^(0+384),w
  9872  0395  1903               	btfsc	3,2
  9873  0396  2B9C               	goto	l1262
  9874  0397  0822               	movf	(___ftpack@arg+2)^(0+384),w
  9875  0398  0421               	iorwf	(___ftpack@arg+1)^(0+384),w
  9876  0399  0420               	iorwf	___ftpack@arg^(0+384),w
  9877  039A  1D03               	skipz
  9878  039B  2BA4               	goto	l4544
  9879  039C                     l1262:	
  9880  039C  01A0               	clrf	?___ftpack^(0+384)
  9881  039D  01A1               	clrf	(?___ftpack+1)^(0+384)
  9882  039E  01A2               	clrf	(?___ftpack+2)^(0+384)
  9883  039F  0008               	return
  9884  03A0                     l4542:	
  9885  03A0  0AA3               	incf	___ftpack@exp^(0+384),f
  9886  03A1  36A2               	lsrf	(___ftpack@arg+2)^(0+384),f
  9887  03A2  0CA1               	rrf	(___ftpack@arg+1)^(0+384),f
  9888  03A3  0CA0               	rrf	___ftpack@arg^(0+384),f
  9889  03A4                     l4544:	
  9890  03A4  30FE               	movlw	254
  9891  03A5  0522               	andwf	(___ftpack@arg+2)^(0+384),w
  9892  03A6  1903               	btfsc	3,2
  9893  03A7  2BB2               	goto	l4548
  9894  03A8  2BA0               	goto	l4542
  9895  03A9                     l4546:	
  9896  03A9  0AA3               	incf	___ftpack@exp^(0+384),f
  9897  03AA  0AA0               	incf	___ftpack@arg^(0+384),f
  9898  03AB  1903               	skipnz
  9899  03AC  0AA1               	incf	(___ftpack@arg+1)^(0+384),f
  9900  03AD  1903               	skipnz
  9901  03AE  0AA2               	incf	(___ftpack@arg+2)^(0+384),f
  9902  03AF  36A2               	lsrf	(___ftpack@arg+2)^(0+384),f
  9903  03B0  0CA1               	rrf	(___ftpack@arg+1)^(0+384),f
  9904  03B1  0CA0               	rrf	___ftpack@arg^(0+384),f
  9905  03B2                     l4548:	
  9906  03B2  30FF               	movlw	255
  9907  03B3  0522               	andwf	(___ftpack@arg+2)^(0+384),w
  9908  03B4  1903               	btfsc	3,2
  9909  03B5  2BBF               	goto	l4552
  9910  03B6  2BA9               	goto	l4546
  9911  03B7                     l4554:	
  9912  03B7  3002               	movlw	2
  9913  03B8  0223               	subwf	___ftpack@exp^(0+384),w
  9914  03B9  1C03               	btfss	3,0
  9915  03BA  2BC1               	goto	l1274
  9916  03BB  03A3               	decf	___ftpack@exp^(0+384),f
  9917  03BC  35A0               	lslf	___ftpack@arg^(0+384),f
  9918  03BD  0DA1               	rlf	(___ftpack@arg+1)^(0+384),f
  9919  03BE  0DA2               	rlf	(___ftpack@arg+2)^(0+384),f
  9920  03BF                     l4552:	
  9921  03BF  1FA1               	btfss	(___ftpack@arg+1)^(0+384),7
  9922  03C0  2BB7               	goto	l4554
  9923  03C1                     l1274:	
  9924  03C1  1C23               	btfss	___ftpack@exp^(0+384),0
  9925  03C2  13A1               	bcf	(___ftpack@arg^(0+384)+1),7
  9926  03C3  36A3               	lsrf	___ftpack@exp^(0+384),f
  9927  03C4  0823               	movf	___ftpack@exp^(0+384),w
  9928  03C5  00A7               	movwf	(??___ftpack^(0+384)+2)
  9929  03C6  01A6               	clrf	(??___ftpack^(0+384)+1)
  9930  03C7  01A5               	clrf	??___ftpack^(0+384)
  9931  03C8  0825               	movf	??___ftpack^(0+384),w
  9932  03C9  04A0               	iorwf	___ftpack@arg^(0+384),f
  9933  03CA  0826               	movf	(??___ftpack+1)^(0+384),w
  9934  03CB  04A1               	iorwf	(___ftpack@arg+1)^(0+384),f
  9935  03CC  0827               	movf	(??___ftpack+2)^(0+384),w
  9936  03CD  04A2               	iorwf	(___ftpack@arg+2)^(0+384),f
  9937  03CE  0824               	movf	___ftpack@sign^(0+384),w
  9938  03CF  1D03               	btfss	3,2
  9939  03D0  17A2               	bsf	(___ftpack@arg^(0+384)+2),7
  9940  03D1  0008               	return
  9941  03D2                     __end_of___ftpack:	
  9942  03D2                     __ptext4:	
  9943 ;; *************** function ___ftmul *****************
  9944 ;; Defined at:
  9945 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9946 ;; Parameters:    Size  Location     Type
  9947 ;;  f1              3   26[BANK3 ] float 
  9948 ;;  f2              3   29[BANK3 ] float 
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;  f3_as_produc    3   36[BANK3 ] unsigned um
  9951 ;;  sign            1   40[BANK3 ] unsigned char 
  9952 ;;  cntr            1   39[BANK3 ] unsigned char 
  9953 ;;  exp             1   35[BANK3 ] unsigned char 
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  3   26[BANK3 ] float 
  9956 ;; Registers used:
  9957 ;;		wreg, status,2, status,0, pclath, cstack
  9958 ;; Tracked objects:
  9959 ;;		On entry : 1F/3
  9960 ;;		On exit  : 1F/3
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9963 ;;      Params:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Temps:          0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Totals:         0       0       0       0      15       0       0       0       0       0       0       0       
      +0       0
  9967 ;;Total ram usage:       15 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; Hardware stack levels required when called:    8
  9970 ;; This function calls:
  9971 ;;		___ftpack
  9972 ;; This function is called by:
  9973 ;;		_ReadVoltage
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           
  9978                           ;psect for function ___ftmul
  9979  03D2                     ___ftmul:	
  9980                           
  9981                           ;incstack = 0
  9982                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9983  03D2  083A               	movf	___ftmul@f1^(0+384),w
  9984  03D3  00C0               	movwf	??___ftmul^(0+384)
  9985  03D4  083B               	movf	(___ftmul@f1+1)^(0+384),w
  9986  03D5  00C1               	movwf	(??___ftmul^(0+384)+1)
  9987  03D6  083C               	movf	(___ftmul@f1+2)^(0+384),w
  9988  03D7  00C2               	movwf	(??___ftmul^(0+384)+2)
  9989  03D8  1003               	clrc
  9990  03D9  0D41               	rlf	(??___ftmul^(0+384)+1),w
  9991  03DA  0D42               	rlf	(??___ftmul^(0+384)+2),w
  9992  03DB  00C3               	movwf	___ftmul@exp^(0+384)
  9993  03DC  0843               	movf	___ftmul@exp^(0+384),w
  9994  03DD  1D03               	btfss	3,2
  9995  03DE  2BE0               	goto	l5112
  9996  03DF  2C3F               	ljmp	PL80	;call to abstracted procedure
  9997  03E0                     l5112:	
  9998  03E0  083D               	movf	___ftmul@f2^(0+384),w
  9999  03E1  00C0               	movwf	??___ftmul^(0+384)
 10000  03E2  083E               	movf	(___ftmul@f2+1)^(0+384),w
 10001  03E3  00C1               	movwf	(??___ftmul^(0+384)+1)
 10002  03E4  083F               	movf	(___ftmul@f2+2)^(0+384),w
 10003  03E5  00C2               	movwf	(??___ftmul^(0+384)+2)
 10004  03E6  1003               	clrc
 10005  03E7  0D41               	rlf	(??___ftmul^(0+384)+1),w
 10006  03E8  0D42               	rlf	(??___ftmul^(0+384)+2),w
 10007  03E9  00C8               	movwf	___ftmul@sign^(0+384)
 10008  03EA  0848               	movf	___ftmul@sign^(0+384),w
 10009  03EB  1D03               	btfss	3,2
 10010  03EC  2BEE               	goto	l5116
 10011  03ED  2C3F               	ljmp	PL80	;call to abstracted procedure
 10012  03EE                     l5116:	
 10013  03EE  0848               	movf	___ftmul@sign^(0+384),w
 10014  03EF  3E7B               	addlw	123
 10015  03F0  07C3               	addwf	___ftmul@exp^(0+384),f
 10016  03F1  083C               	movf	(___ftmul@f1^(0+384)+2),w
 10017  03F2  00C8               	movwf	___ftmul@sign^(0+384)
 10018  03F3  083F               	movf	(___ftmul@f2^(0+384)+2),w
 10019  03F4  06C8               	xorwf	___ftmul@sign^(0+384),f
 10020  03F5  3080               	movlw	128
 10021  03F6  05C8               	andwf	___ftmul@sign^(0+384),f
 10022  03F7  30FF               	movlw	255
 10023  03F8  17BB               	bsf	(___ftmul@f1^(0+384)+1),7
 10024  03F9  17BE               	bsf	(___ftmul@f2^(0+384)+1),7
 10025  03FA  05BD               	andwf	___ftmul@f2^(0+384),f
 10026  03FB  05BE               	andwf	(___ftmul@f2+1)^(0+384),f
 10027  03FC  3007               	movlw	7
 10028  03FD  01BF               	clrf	(___ftmul@f2+2)^(0+384)
 10029  03FE  01C4               	clrf	___ftmul@f3_as_product^(0+384)
 10030  03FF  01C5               	clrf	(___ftmul@f3_as_product+1)^(0+384)
 10031  0400  01C6               	clrf	(___ftmul@f3_as_product+2)^(0+384)
 10032  0401  00C7               	movwf	___ftmul@cntr^(0+384)
 10033  0402                     l5134:	
 10034  0402  1C3A               	btfss	___ftmul@f1^(0+384),0
 10035  0403  2C06               	goto	l5138
 10036  0404  242E  3182         	fcall	PL54	;call to abstracted procedure
 10037  0406                     l5138:	
 10038  0406  36BC               	lsrf	(___ftmul@f1+2)^(0+384),f
 10039  0407  0CBB               	rrf	(___ftmul@f1+1)^(0+384),f
 10040  0408  0CBA               	rrf	___ftmul@f1^(0+384),f
 10041  0409  35BD               	lslf	___ftmul@f2^(0+384),f
 10042  040A  0DBE               	rlf	(___ftmul@f2+1)^(0+384),f
 10043  040B  0DBF               	rlf	(___ftmul@f2+2)^(0+384),f
 10044  040C  0BC7               	decfsz	___ftmul@cntr^(0+384),f
 10045  040D  2C02               	goto	l5134
 10046  040E  3009               	movlw	9
 10047  040F  00C7               	movwf	___ftmul@cntr^(0+384)
 10048  0410                     l5146:	
 10049  0410  1C3A               	btfss	___ftmul@f1^(0+384),0
 10050  0411  2C14               	goto	l5150
 10051  0412  242E  3182         	fcall	PL54	;call to abstracted procedure
 10052  0414                     l5150:	
 10053  0414  36BC               	lsrf	(___ftmul@f1+2)^(0+384),f
 10054  0415  0CBB               	rrf	(___ftmul@f1+1)^(0+384),f
 10055  0416  0CBA               	rrf	___ftmul@f1^(0+384),f
 10056  0417  36C6               	lsrf	(___ftmul@f3_as_product+2)^(0+384),f
 10057  0418  0CC5               	rrf	(___ftmul@f3_as_product+1)^(0+384),f
 10058  0419  0CC4               	rrf	___ftmul@f3_as_product^(0+384),f
 10059  041A  0BC7               	decfsz	___ftmul@cntr^(0+384),f
 10060  041B  2C10               	goto	l5146
 10061  041C  0844               	movf	___ftmul@f3_as_product^(0+384),w
 10062  041D  00A0               	movwf	___ftpack@arg^(0+384)
 10063  041E  0845               	movf	(___ftmul@f3_as_product+1)^(0+384),w
 10064  041F  00A1               	movwf	(___ftpack@arg+1)^(0+384)
 10065  0420  0846               	movf	(___ftmul@f3_as_product+2)^(0+384),w
 10066  0421  00A2               	movwf	(___ftpack@arg+2)^(0+384)
 10067  0422  0843               	movf	___ftmul@exp^(0+384),w
 10068  0423  00A3               	movwf	___ftpack@exp^(0+384)
 10069  0424  0848               	movf	___ftmul@sign^(0+384),w
 10070  0425  00A4               	movwf	___ftpack@sign^(0+384)
 10071  0426  2394               	fcall	___ftpack
 10072  0427  0820               	movf	?___ftpack^(0+384),w
 10073  0428  00BA               	movwf	?___ftmul^(0+384)
 10074  0429  0821               	movf	(?___ftpack+1)^(0+384),w
 10075  042A  00BB               	movwf	(?___ftmul+1)^(0+384)
 10076  042B  0822               	movf	(?___ftpack+2)^(0+384),w
 10077  042C  00BC               	movwf	(?___ftmul+2)^(0+384)
 10078  042D  0008               	return
 10079  042E                     __end_of___ftmul:	
 10080  042E                     PL54:	
 10081  042E  083D               	movf	___ftmul@f2^(0+384),w
 10082  042F  07C4               	addwf	___ftmul@f3_as_product^(0+384),f
 10083  0430  083E               	movf	(___ftmul@f2+1)^(0+384),w
 10084  0431  3DC5               	addwfc	(___ftmul@f3_as_product+1)^(0+384),f
 10085  0432  083F               	movf	(___ftmul@f2+2)^(0+384),w
 10086  0433  3DC6               	addwfc	(___ftmul@f3_as_product+2)^(0+384),f
 10087  0434  0008               	return
 10088  0435                     __end_ofPL54:	
 10089  0435                     PL58:	
 10090  0435  3003               	movlw	3
 10091  0436  0022               	movlb	2	; select bank2
 10092  0437  0517               	andwf	23,w	;volatile
 10093  0438  0023               	movlb	3	; select bank3
 10094  0439  00CC               	movwf	??_ReadVoltage^(0+384)
 10095  043A  0008               	return
 10096  043B                     __end_ofPL58:	
 10097  043B                     PL76:	
 10098  043B  01AB               	clrf	?___ftdiv^(0+384)
 10099  043C  01AC               	clrf	(?___ftdiv+1)^(0+384)
 10100  043D  01AD               	clrf	(?___ftdiv+2)^(0+384)
 10101  043E  0008               	return
 10102  043F                     __end_ofPL76:	
 10103  043F                     PL80:	
 10104  043F  01BA               	clrf	?___ftmul^(0+384)
 10105  0440  01BB               	clrf	(?___ftmul+1)^(0+384)
 10106  0441  01BC               	clrf	(?___ftmul+2)^(0+384)
 10107  0442  0008               	return
 10108  0443                     __end_ofPL80:	
 10109                           
 10110                           	psect	intentry
 10111  0004                     __pintentry:	
 10112 ;; *************** function _isr *****************
 10113 ;; Defined at:
 10114 ;;		line 73 in file "interrupts.c"
 10115 ;; Parameters:    Size  Location     Type
 10116 ;;		None
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;  ScanTemp        1   79[BANK2 ] unsigned char 
 10119 ;;  rx              1   78[BANK2 ] unsigned char 
 10120 ;;  Rx_Overun       1   77[BANK2 ] unsigned char 
 10121 ;;  Rx_fault        1   76[BANK2 ] unsigned char 
 10122 ;; Return value:  Size  Location     Type
 10123 ;;		None               void
 10124 ;; Registers used:
 10125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10126 ;; Tracked objects:
 10127 ;;		On entry : 0/0
 10128 ;;		On exit  : 18/0
 10129 ;;		Unchanged: 0/0
 10130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;Total ram usage:        4 bytes
 10136 ;; Hardware stack levels used:    1
 10137 ;; Hardware stack levels required when called:    6
 10138 ;; This function calls:
 10139 ;;		_PS2RawToScan
 10140 ;;		_Process_PS2_ScanCode
 10141 ;;		_READ_CONFIG_PIN
 10142 ;;		_ResendLast
 10143 ;;		_Timer2OFF
 10144 ;;		_Timer2Reset
 10145 ;;		_UART_send_break_timed
 10146 ;;		i1_PS_2_DISABLE_INTERRUPT
 10147 ;;		i1_PS_2_ENABLE_INTERRUPT
 10148 ;;		i1_READ_PS_2_PIN
 10149 ;;		i1_ReadUSART
 10150 ;;		i1_Timer2ON
 10151 ;;		i1_UARTchar
 10152 ;; This function is called by:
 10153 ;;		Interrupt level 1
 10154 ;; This function uses a non-reentrant model
 10155 ;;
 10156                           
 10157  0004                     _isr:	
 10158                           
 10159                           ;incstack = 0
 10160                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10161  0004  3180               	pagesel	$
 10162                           
 10163                           ;interrupts.c: 77: unsigned char Rx_Overun = 0;
 10164  0005  0022               	movlb	2	; select bank2
 10165  0006  01ED               	clrf	isr@Rx_Overun^(0+256)
 10166                           
 10167                           ;interrupts.c: 78: unsigned char ScanTemp;
 10168                           ;interrupts.c: 80: if((IOCAF & 0b00100000) && (IOCAN & 0b00100000))
 10169  0007  0027               	movlb	7	; select bank7
 10170  0008  1A93               	btfsc	19,5	;volatile
 10171  0009  1E92               	btfss	18,5	;volatile
 10172  000A  285E               	goto	i1l85
 10173                           
 10174                           ;interrupts.c: 81: {
 10175                           ;interrupts.c: 83: PS_2_DISABLE_INTERRUPT(0b00100000);
 10176  000B  3020               	movlw	32
 10177  000C  3184  24C1  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10178                           
 10179                           ;interrupts.c: 84: PIE1bits.TMR2IE = 0;
 10180  000F  0021               	movlb	1	; select bank1
 10181  0010  1091               	bcf	17,1	;volatile
 10182                           
 10183                           ;interrupts.c: 85: PIE1bits.RCIE = 0;
 10184  0011  1291               	bcf	17,5	;volatile
 10185                           
 10186                           ;interrupts.c: 86: LATC |= 0b00010000;
 10187  0012  0022               	movlb	2	; select bank2
 10188  0013  160E               	bsf	14,4	;volatile
 10189                           
 10190                           ;interrupts.c: 87: PS_2_bits++;
 10191  0014  0023               	movlb	3	; select bank3
 10192  0015  0AE8               	incf	_PS_2_bits^(0+384),f
 10193                           
 10194                           ;interrupts.c: 88: PS_2_Read_Data_TEMP <<= 1;
 10195  0016  0024               	movlb	4	; select bank4
 10196  0017  35A3               	lslf	_PS_2_Read_Data_TEMP^(0+512),f
 10197  0018  0DA4               	rlf	(_PS_2_Read_Data_TEMP+1)^(0+512),f
 10198                           
 10199                           ;interrupts.c: 89: __nop();
 10200  0019  0000               	nop
 10201                           
 10202                           ;interrupts.c: 90: if(READ_PS_2_PIN(0b00010000))
 10203  001A  3010               	movlw	16
 10204  001B  3196  268D  3180   	fcall	i1_READ_PS_2_PIN
 10205  001E  3A00               	xorlw	0
 10206  001F  1903               	skipnz
 10207  0020  2825               	goto	i1l6050
 10208                           
 10209                           ;interrupts.c: 91: {
 10210                           ;interrupts.c: 92: PS_2_Read_Data_TEMP++;
 10211  0021  0024               	movlb	4	; select bank4
 10212  0022  0AA3               	incf	_PS_2_Read_Data_TEMP^(0+512),f
 10213  0023  1903               	skipnz
 10214  0024  0AA4               	incf	(_PS_2_Read_Data_TEMP+1)^(0+512),f
 10215  0025                     i1l6050:	
 10216                           
 10217                           ;interrupts.c: 93: }
 10218                           ;interrupts.c: 94: if(PS_2_bits == 11)
 10219  0025  300B               	movlw	11
 10220  0026  0023               	movlb	3	; select bank3
 10221  0027  0668               	xorwf	_PS_2_bits^(0+384),w
 10222  0028  1D03               	btfss	3,2
 10223  0029  284F               	goto	i1l6064
 10224                           
 10225                           ;interrupts.c: 95: {
 10226                           ;interrupts.c: 96: if(PS_2_Buffer_items < 12)
 10227  002A  300C               	movlw	12
 10228  002B  0267               	subwf	_PS_2_Buffer_items^(0+384),w
 10229  002C  1803               	skipnc
 10230  002D  284B               	goto	i1l6062
 10231                           
 10232                           ;interrupts.c: 97: {
 10233                           ;interrupts.c: 98: ScanTemp = (unsigned char) PS2RawToScan(PS_2_Read_Data_TEMP);
 10234  002E  0024               	movlb	4	; select bank4
 10235  002F  0824               	movf	(_PS_2_Read_Data_TEMP+1)^(0+512),w
 10236  0030  00F8               	movwf	PS2RawToScan@Raw+1
 10237  0031  0823               	movf	_PS_2_Read_Data_TEMP^(0+512),w
 10238  0032  00F7               	movwf	PS2RawToScan@Raw
 10239  0033  3184  2443  3180   	fcall	_PS2RawToScan
 10240  0036  0877               	movf	?_PS2RawToScan,w
 10241  0037  0022               	movlb	2	; select bank2
 10242  0038  00EF               	movwf	isr@ScanTemp^(0+256)
 10243                           
 10244                           ;interrupts.c: 99: if(ScanTemp)
 10245  0039  086F               	movf	isr@ScanTemp^(0+256),w
 10246  003A  1903               	btfsc	3,2
 10247  003B  2848               	goto	i1l89
 10248                           
 10249                           ;interrupts.c: 100: {
 10250                           ;interrupts.c: 102: PS_2_ScanCodes[PS_2_Buffer_items] = ScanTemp;
 10251  003C  0023               	movlb	3	; select bank3
 10252  003D  0867               	movf	_PS_2_Buffer_items^(0+384),w
 10253  003E  3E2C               	addlw	(low (_PS_2_ScanCodes| (0+512)))& (0+255)
 10254  003F  0086               	movwf	6
 10255  0040  3002               	movlw	2	; select bank4/5
 10256  0041  0087               	movwf	7
 10257  0042  0022               	movlb	2	; select bank2
 10258  0043  086F               	movf	isr@ScanTemp^(0+256),w
 10259  0044  0081               	movwf	1
 10260                           
 10261                           ;interrupts.c: 103: PS_2_Buffer_items++;
 10262  0045  0023               	movlb	3	; select bank3
 10263  0046  0AE7               	incf	_PS_2_Buffer_items^(0+384),f
 10264                           
 10265                           ;interrupts.c: 104: }
 10266  0047  284B               	goto	i1l6062
 10267  0048                     i1l89:	
 10268                           
 10269                           ;interrupts.c: 105: else
 10270                           ;interrupts.c: 106: {
 10271                           ;interrupts.c: 108: ResendLastFlag = 1;
 10272  0048  0023               	movlb	3	; select bank3
 10273  0049  01EC               	clrf	_ResendLastFlag^(0+384)
 10274  004A  0AEC               	incf	_ResendLastFlag^(0+384),f
 10275  004B                     i1l6062:	
 10276                           
 10277                           ;interrupts.c: 109: }
 10278                           ;interrupts.c: 111: }
 10279                           ;interrupts.c: 112: PS_2_bits = 0;
 10280  004B  01E8               	clrf	_PS_2_bits^(0+384)
 10281                           
 10282                           ;interrupts.c: 113: PS_2_Read_Data_TEMP = 0;
 10283  004C  0024               	movlb	4	; select bank4
 10284  004D  01A3               	clrf	_PS_2_Read_Data_TEMP^(0+512)
 10285  004E  01A4               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+512)
 10286  004F                     i1l6064:	
 10287                           
 10288                           ;interrupts.c: 114: }
 10289                           ;interrupts.c: 115: Timer2Reset();
 10290  004F  3184  24E2  3180   	fcall	_Timer2Reset
 10291                           
 10292                           ;interrupts.c: 116: PIR1bits.TMR2IF = 0;
 10293  0052  1091               	bcf	17,1	;volatile
 10294                           
 10295                           ;interrupts.c: 117: PIE1bits.TMR2IE = 1;
 10296  0053  0021               	movlb	1	; select bank1
 10297  0054  1491               	bsf	17,1	;volatile
 10298                           
 10299                           ;interrupts.c: 118: Timer2ON();
 10300  0055  3184  24DF  3180   	fcall	i1_Timer2ON
 10301                           
 10302                           ;interrupts.c: 119: IOCAF &= ~0b00100000;
 10303  0058  0027               	movlb	7	; select bank7
 10304  0059  1293               	bcf	19,5	;volatile
 10305                           
 10306                           ;interrupts.c: 120: PS_2_ENABLE_INTERRUPT(0b00100000);
 10307  005A  3020               	movlw	32
 10308  005B  3184  24CB         	fcall	i1_PS_2_ENABLE_INTERRUPT
 10309                           
 10310                           ;interrupts.c: 121: }
 10311  005D  0009               	retfie
 10312  005E                     i1l85:	
 10313                           
 10314                           ;interrupts.c: 122: else if ((IOCAF & 0b00010000) && (IOCAN & 0b00100000))
 10315  005E  1A13               	btfsc	19,4	;volatile
 10316  005F  1E92               	btfss	18,5	;volatile
 10317  0060  2866               	goto	i1l92
 10318                           
 10319                           ;interrupts.c: 123: {
 10320                           ;interrupts.c: 124: PS_2_DISABLE_INTERRUPT(0b00010000);
 10321  0061  3010               	movlw	16
 10322  0062  3184  24C1         	fcall	i1_PS_2_DISABLE_INTERRUPT
 10323                           
 10324                           ;interrupts.c: 125: IOCAF &= ~0b00010000;
 10325  0064  1213               	bcf	19,4	;volatile
 10326                           
 10327                           ;interrupts.c: 126: }
 10328  0065  0009               	retfie
 10329  0066                     i1l92:	
 10330                           
 10331                           ;interrupts.c: 127: else if (PIR1bits.RCIF && PIE1bits.RCIE)
 10332  0066  0020               	movlb	0	; select bank0
 10333  0067  1E91               	btfss	17,5	;volatile
 10334  0068  28B0               	goto	i1l94
 10335  0069  0021               	movlb	1	; select bank1
 10336  006A  1E91               	btfss	17,5	;volatile
 10337  006B  28B0               	goto	i1l94
 10338                           
 10339                           ;interrupts.c: 128: {
 10340                           ;interrupts.c: 130: PIE1bits.RCIE = 0;
 10341  006C  1291               	bcf	17,5	;volatile
 10342                           
 10343                           ;interrupts.c: 132: LATC |= 0b00001000;
 10344  006D  0022               	movlb	2	; select bank2
 10345  006E  158E               	bsf	14,3	;volatile
 10346                           
 10347                           ;interrupts.c: 133: SinLEDtimer = 0;
 10348  006F  0024               	movlb	4	; select bank4
 10349  0070  01A5               	clrf	_SinLEDtimer^(0+512)
 10350  0071  01A6               	clrf	(_SinLEDtimer+1)^(0+512)
 10351                           
 10352                           ;interrupts.c: 134: Rx_fault = 0;
 10353  0072  0022               	movlb	2	; select bank2
 10354  0073  01EC               	clrf	isr@Rx_fault^(0+256)
 10355                           
 10356                           ;interrupts.c: 135: Rx_Overun = 0;
 10357  0074  01ED               	clrf	isr@Rx_Overun^(0+256)
 10358                           
 10359                           ;interrupts.c: 137: if(RC1STAbits.OERR)
 10360  0075  0023               	movlb	3	; select bank3
 10361  0076  1C9D               	btfss	29,1	;volatile
 10362  0077  287C               	goto	i1l95
 10363                           
 10364                           ;interrupts.c: 138: {
 10365                           ;interrupts.c: 139: RC1STAbits.CREN = 0;
 10366  0078  121D               	bcf	29,4	;volatile
 10367                           
 10368                           ;interrupts.c: 140: Rx_Overun = 1;
 10369  0079  0022               	movlb	2	; select bank2
 10370  007A  01ED               	clrf	isr@Rx_Overun^(0+256)
 10371  007B  0AED               	incf	isr@Rx_Overun^(0+256),f
 10372  007C                     i1l95:	
 10373                           
 10374                           ;interrupts.c: 141: }
 10375                           ;interrupts.c: 143: if(RC1STAbits.FERR)
 10376  007C  0023               	movlb	3	; select bank3
 10377  007D  1D1D               	btfss	29,2	;volatile
 10378  007E  2882               	goto	i1l6094
 10379                           
 10380                           ;interrupts.c: 144: {
 10381                           ;interrupts.c: 145: Rx_fault = 1;
 10382  007F  0022               	movlb	2	; select bank2
 10383  0080  01EC               	clrf	isr@Rx_fault^(0+256)
 10384  0081  0AEC               	incf	isr@Rx_fault^(0+256),f
 10385  0082                     i1l6094:	
 10386                           
 10387                           ;interrupts.c: 146: }
 10388                           ;interrupts.c: 147: rx = ReadUSART();
 10389  0082  318D  252A  3180   	fcall	i1_ReadUSART
 10390  0085  0022               	movlb	2	; select bank2
 10391  0086  00EE               	movwf	isr@rx^(0+256)
 10392                           
 10393                           ;interrupts.c: 148: if(Rx_Overun)
 10394  0087  086D               	movf	isr@Rx_Overun^(0+256),w
 10395  0088  1903               	btfsc	3,2
 10396  0089  288C               	goto	i1l6100
 10397                           
 10398                           ;interrupts.c: 149: {
 10399                           ;interrupts.c: 150: RC1STAbits.CREN = 1;
 10400  008A  0023               	movlb	3	; select bank3
 10401  008B  161D               	bsf	29,4	;volatile
 10402  008C                     i1l6100:	
 10403                           
 10404                           ;interrupts.c: 151: }
 10405                           ;interrupts.c: 153: if(READ_CONFIG_PIN())
 10406  008C  3184  24DB  3180   	fcall	_READ_CONFIG_PIN
 10407  008F  3A00               	xorlw	0
 10408  0090  1903               	skipnz
 10409  0091  28AB               	goto	i1l6110
 10410                           
 10411                           ;interrupts.c: 154: {
 10412                           ;interrupts.c: 155: if(Rx_fault == 1)
 10413  0092  0022               	movlb	2	; select bank2
 10414  0093  0B6C               	decfsz	isr@Rx_fault^(0+256),w
 10415  0094  28A0               	goto	i1l6108
 10416                           
 10417                           ;interrupts.c: 156: {
 10418                           ;interrupts.c: 157: if(rx == 0)
 10419  0095  086E               	movf	isr@rx^(0+256),w
 10420  0096  1D03               	btfss	3,2
 10421  0097  28AB               	goto	i1l6110
 10422                           
 10423                           ;interrupts.c: 158: {
 10424                           ;interrupts.c: 160: UART_send_break_timed(100000);
 10425  0098  30A0               	movlw	160
 10426  0099  00FA               	movwf	UART_send_break_timed@US
 10427  009A  3086               	movlw	134
 10428  009B  00FB               	movwf	UART_send_break_timed@US+1
 10429  009C  3197  27AD  3180   	fcall	_UART_send_break_timed
 10430  009F  28AB               	goto	i1l6110
 10431  00A0                     i1l6108:	
 10432  00A0  3000               	movlw	0
 10433                           
 10434                           ;interrupts.c: 163: else
 10435                           ;interrupts.c: 164: {
 10436                           ;interrupts.c: 165: UARTchar(rx, 1 ,RC1STAbits.RX9D);
 10437  00A1  01F7               	clrf	i1UARTchar@override
 10438  00A2  0AF7               	incf	i1UARTchar@override,f
 10439  00A3  0023               	movlb	3	; select bank3
 10440  00A4  181D               	btfsc	29,0	;volatile
 10441  00A5  3001               	movlw	1
 10442  00A6  00F8               	movwf	i1UARTchar@NinethBit_override_data
 10443  00A7  0022               	movlb	2	; select bank2
 10444  00A8  086E               	movf	isr@rx^(0+256),w
 10445  00A9  3196  264C         	fcall	i1_UARTchar
 10446  00AB                     i1l6110:	
 10447                           
 10448                           ;interrupts.c: 166: }
 10449                           ;interrupts.c: 167: }
 10450                           ;interrupts.c: 183: PIR1bits.RCIF = 0;
 10451  00AB  0020               	movlb	0	; select bank0
 10452  00AC  1291               	bcf	17,5	;volatile
 10453                           
 10454                           ;interrupts.c: 184: PIE1bits.RCIE = 1;
 10455  00AD  0021               	movlb	1	; select bank1
 10456  00AE  1691               	bsf	17,5	;volatile
 10457                           
 10458                           ;interrupts.c: 185: }
 10459  00AF  0009               	retfie
 10460  00B0                     i1l94:	
 10461                           
 10462                           ;interrupts.c: 186: else if(PIR1bits.TMR2IF && PIE1bits.TMR2IE)
 10463  00B0  0020               	movlb	0	; select bank0
 10464  00B1  1C91               	btfss	17,1	;volatile
 10465  00B2  0009               	retfie
 10466  00B3  0021               	movlb	1	; select bank1
 10467  00B4  1C91               	btfss	17,1	;volatile
 10468  00B5  0009               	retfie
 10469                           
 10470                           ;interrupts.c: 187: {
 10471                           ;interrupts.c: 189: PIE1bits.TMR2IE = 0;
 10472  00B6  1091               	bcf	17,1	;volatile
 10473                           
 10474                           ;interrupts.c: 190: Timer2OFF();
 10475  00B7  3184  24E5  3180   	fcall	_Timer2OFF
 10476                           
 10477                           ;interrupts.c: 191: PS_2_DISABLE_INTERRUPT(0b00100000);
 10478  00BA  3020               	movlw	32
 10479  00BB  3184  24C1  3180   	fcall	i1_PS_2_DISABLE_INTERRUPT
 10480                           
 10481                           ;interrupts.c: 192: PS_2_bits = 0;
 10482  00BE  0023               	movlb	3	; select bank3
 10483  00BF  01E8               	clrf	_PS_2_bits^(0+384)
 10484                           
 10485                           ;interrupts.c: 193: PS_2_Read_Data_TEMP = 0;
 10486  00C0  0024               	movlb	4	; select bank4
 10487  00C1  01A3               	clrf	_PS_2_Read_Data_TEMP^(0+512)
 10488  00C2  01A4               	clrf	(_PS_2_Read_Data_TEMP+1)^(0+512)
 10489                           
 10490                           ;interrupts.c: 194: if(ResendLastFlag)
 10491  00C3  0023               	movlb	3	; select bank3
 10492  00C4  086C               	movf	_ResendLastFlag^(0+384),w
 10493  00C5  1903               	btfsc	3,2
 10494  00C6  28CD               	goto	i1l6132
 10495                           
 10496                           ;interrupts.c: 195: {
 10497                           ;interrupts.c: 197: ResendLast();
 10498  00C7  3184  24BB  3180   	fcall	_ResendLast
 10499                           
 10500                           ;interrupts.c: 198: ResendLastFlag = 0;
 10501  00CA  0023               	movlb	3	; select bank3
 10502  00CB  01EC               	clrf	_ResendLastFlag^(0+384)
 10503                           
 10504                           ;interrupts.c: 199: }
 10505  00CC  28D0               	goto	i1l6134
 10506  00CD                     i1l6132:	
 10507                           
 10508                           ;interrupts.c: 200: else
 10509                           ;interrupts.c: 201: {
 10510                           ;interrupts.c: 202: Process_PS2_ScanCode();
 10511  00CD  3191  2118  3180   	fcall	_Process_PS2_ScanCode
 10512  00D0                     i1l6134:	
 10513                           
 10514                           ;interrupts.c: 203: }
 10515                           ;interrupts.c: 205: PIE1bits.RCIE = 1;
 10516  00D0  0021               	movlb	1	; select bank1
 10517  00D1  1691               	bsf	17,5	;volatile
 10518                           
 10519                           ;interrupts.c: 207: PS_2_ENABLE_INTERRUPT(0b00100000);
 10520  00D2  3020               	movlw	32
 10521  00D3  3184  24CB         	fcall	i1_PS_2_ENABLE_INTERRUPT
 10522                           
 10523                           ;interrupts.c: 208: PIR1bits.TMR2IF =0;
 10524  00D5  0020               	movlb	0	; select bank0
 10525  00D6  1091               	bcf	17,1	;volatile
 10526  00D7  0009               	retfie
 10527  00D8                     __end_of_isr:	
 10528                           
 10529                           	psect	text36
 10530  04DF                     __ptext36:	
 10531 ;; *************** function i1_Timer2ON *****************
 10532 ;; Defined at:
 10533 ;;		line 59 in file "Timer.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;		None
 10536 ;; Auto vars:     Size  Location     Type
 10537 ;;		None
 10538 ;; Return value:  Size  Location     Type
 10539 ;;		None               void
 10540 ;; Registers used:
 10541 ;;		None
 10542 ;; Tracked objects:
 10543 ;;		On entry : 1F/1
 10544 ;;		On exit  : 1F/0
 10545 ;;		Unchanged: 0/0
 10546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;Total ram usage:        0 bytes
 10552 ;; Hardware stack levels used:    1
 10553 ;; This function calls:
 10554 ;;		Nothing
 10555 ;; This function is called by:
 10556 ;;		_isr
 10557 ;; This function uses a non-reentrant model
 10558 ;;
 10559                           
 10560                           
 10561                           ;psect for function i1_Timer2ON
 10562  04DF                     i1_Timer2ON:	
 10563                           
 10564                           ;Timer.c: 61: T2CONbits.TMR2ON = 1;
 10565                           
 10566                           ;incstack = 0
 10567                           ; Regs used in i1_Timer2ON: []
 10568  04DF  0020               	movlb	0	; select bank0
 10569  04E0  151C               	bsf	28,2	;volatile
 10570  04E1  0008               	return
 10571  04E2                     __end_ofi1_Timer2ON:	
 10572                           
 10573                           	psect	text37
 10574  04CB                     __ptext37:	
 10575 ;; *************** function i1_PS_2_ENABLE_INTERRUPT *****************
 10576 ;; Defined at:
 10577 ;;		line 199 in file "PS_2.c"
 10578 ;; Parameters:    Size  Location     Type
 10579 ;;  DATA_CLK        1    wreg     unsigned char 
 10580 ;; Auto vars:     Size  Location     Type
 10581 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 10582 ;; Return value:  Size  Location     Type
 10583 ;;		None               void
 10584 ;; Registers used:
 10585 ;;		wreg, status,2, status,0
 10586 ;; Tracked objects:
 10587 ;;		On entry : 19/7
 10588 ;;		On exit  : 1F/7
 10589 ;;		Unchanged: 0/0
 10590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;Total ram usage:        1 bytes
 10596 ;; Hardware stack levels used:    1
 10597 ;; This function calls:
 10598 ;;		Nothing
 10599 ;; This function is called by:
 10600 ;;		_isr
 10601 ;; This function uses a non-reentrant model
 10602 ;;
 10603                           
 10604                           
 10605                           ;psect for function i1_PS_2_ENABLE_INTERRUPT
 10606  04CB                     i1_PS_2_ENABLE_INTERRUPT:	
 10607                           
 10608                           ;incstack = 0
 10609                           ; Regs used in i1_PS_2_ENABLE_INTERRUPT: [wreg+status,2+status,0]
 10610                           ;i1PS_2_ENABLE_INTERRUPT@DATA_CLK stored from wreg
 10611  04CB  00F0               	movwf	i1PS_2_ENABLE_INTERRUPT@DATA_CLK
 10612                           
 10613                           ;PS_2.c: 201: if(DATA_CLK == 0b00100000)
 10614  04CC  3A20               	xorlw	32
 10615  04CD  1D03               	btfss	3,2
 10616  04CE  2CD2               	goto	i1l652
 10617                           
 10618                           ;PS_2.c: 202: {
 10619                           ;PS_2.c: 205: IOCAN |= 0b00100000;
 10620  04CF  0027               	movlb	7	; select bank7
 10621  04D0  1692               	bsf	18,5	;volatile
 10622                           
 10623                           ;PS_2.c: 207: }
 10624  04D1  0008               	return
 10625  04D2                     i1l652:	
 10626                           
 10627                           ;PS_2.c: 208: else
 10628                           ;PS_2.c: 209: {
 10629                           ;PS_2.c: 212: IOCAN |= 0b00010000;
 10630  04D2  0027               	movlb	7	; select bank7
 10631  04D3  1612               	bsf	18,4	;volatile
 10632  04D4  0008               	return
 10633  04D5                     __end_ofi1_PS_2_ENABLE_INTERRUPT:	
 10634                           
 10635                           	psect	text38
 10636  04E2                     __ptext38:	
 10637 ;; *************** function _Timer2Reset *****************
 10638 ;; Defined at:
 10639 ;;		line 81 in file "Timer.c"
 10640 ;; Parameters:    Size  Location     Type
 10641 ;;		None
 10642 ;; Auto vars:     Size  Location     Type
 10643 ;;		None
 10644 ;; Return value:  Size  Location     Type
 10645 ;;		None               void
 10646 ;; Registers used:
 10647 ;;		status,2
 10648 ;; Tracked objects:
 10649 ;;		On entry : 18/3
 10650 ;;		On exit  : 1F/0
 10651 ;;		Unchanged: 0/0
 10652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10657 ;;Total ram usage:        0 bytes
 10658 ;; Hardware stack levels used:    1
 10659 ;; This function calls:
 10660 ;;		Nothing
 10661 ;; This function is called by:
 10662 ;;		_isr
 10663 ;; This function uses a non-reentrant model
 10664 ;;
 10665                           
 10666                           
 10667                           ;psect for function _Timer2Reset
 10668  04E2                     _Timer2Reset:	
 10669                           
 10670                           ;Timer.c: 83: TMR2 = 0;
 10671                           
 10672                           ;incstack = 0
 10673                           ; Regs used in _Timer2Reset: [status,2]
 10674  04E2  0020               	movlb	0	; select bank0
 10675  04E3  019A               	clrf	26	;volatile
 10676  04E4  0008               	return
 10677  04E5                     __end_of_Timer2Reset:	
 10678                           
 10679                           	psect	text39
 10680  04E5                     __ptext39:	
 10681 ;; *************** function _Timer2OFF *****************
 10682 ;; Defined at:
 10683 ;;		line 70 in file "Timer.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;		None
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;		None
 10688 ;; Return value:  Size  Location     Type
 10689 ;;		None               void
 10690 ;; Registers used:
 10691 ;;		None
 10692 ;; Tracked objects:
 10693 ;;		On entry : 1F/1
 10694 ;;		On exit  : 1F/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10701 ;;Total ram usage:        0 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; This function calls:
 10704 ;;		Nothing
 10705 ;; This function is called by:
 10706 ;;		_isr
 10707 ;; This function uses a non-reentrant model
 10708 ;;
 10709                           
 10710                           
 10711                           ;psect for function _Timer2OFF
 10712  04E5                     _Timer2OFF:	
 10713                           
 10714                           ;Timer.c: 72: T2CONbits.TMR2ON = 0;
 10715                           
 10716                           ;incstack = 0
 10717                           ; Regs used in _Timer2OFF: []
 10718  04E5  0020               	movlb	0	; select bank0
 10719  04E6  111C               	bcf	28,2	;volatile
 10720  04E7  0008               	return
 10721  04E8                     __end_of_Timer2OFF:	
 10722                           
 10723                           	psect	text40
 10724  04BB                     __ptext40:	
 10725 ;; *************** function _ResendLast *****************
 10726 ;; Defined at:
 10727 ;;		line 1006 in file "PS_2.c"
 10728 ;; Parameters:    Size  Location     Type
 10729 ;;		None
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;		None
 10732 ;; Return value:  Size  Location     Type
 10733 ;;		None               void
 10734 ;; Registers used:
 10735 ;;		wreg, status,2, status,0, pclath, cstack
 10736 ;; Tracked objects:
 10737 ;;		On entry : 1F/3
 10738 ;;		On exit  : 1F/1
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10745 ;;Total ram usage:        0 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:    2
 10748 ;; This function calls:
 10749 ;;		i1_PS_2_DISABLE_INTERRUPT
 10750 ;;		i1_Send_PS2
 10751 ;; This function is called by:
 10752 ;;		_isr
 10753 ;; This function uses a non-reentrant model
 10754 ;;
 10755                           
 10756                           
 10757                           ;psect for function _ResendLast
 10758  04BB                     _ResendLast:	
 10759                           
 10760                           ;PS_2.c: 1008: PS_2_DISABLE_INTERRUPT(0b00100000);
 10761                           
 10762                           ;incstack = 0
 10763                           ; Regs used in _ResendLast: [wreg+status,2+status,0+pclath+cstack]
 10764  04BB  3020               	movlw	32
 10765  04BC  24C1               	fcall	i1_PS_2_DISABLE_INTERRUPT
 10766                           
 10767                           ;PS_2.c: 1010: Send_PS2(0xFE);
 10768  04BD  30FE               	movlw	254
 10769  04BE  3195  254B         	fcall	i1_Send_PS2
 10770  04C0  0008               	return
 10771  04C1                     __end_of_ResendLast:	
 10772  04C1                     __ptext41:	
 10773 ;; *************** function i1_PS_2_DISABLE_INTERRUPT *****************
 10774 ;; Defined at:
 10775 ;;		line 178 in file "PS_2.c"
 10776 ;; Parameters:    Size  Location     Type
 10777 ;;  DATA_CLK        1    wreg     unsigned char 
 10778 ;; Auto vars:     Size  Location     Type
 10779 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 10780 ;; Return value:  Size  Location     Type
 10781 ;;		None               void
 10782 ;; Registers used:
 10783 ;;		wreg, status,2, status,0
 10784 ;; Tracked objects:
 10785 ;;		On entry : 18/7
 10786 ;;		On exit  : 1F/7
 10787 ;;		Unchanged: 0/0
 10788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;Total ram usage:        1 bytes
 10794 ;; Hardware stack levels used:    1
 10795 ;; This function calls:
 10796 ;;		Nothing
 10797 ;; This function is called by:
 10798 ;;		_isr
 10799 ;;		_ResendLast
 10800 ;; This function uses a non-reentrant model
 10801 ;;
 10802                           
 10803                           
 10804                           ;psect for function i1_PS_2_DISABLE_INTERRUPT
 10805  04C1                     i1_PS_2_DISABLE_INTERRUPT:	
 10806                           
 10807                           ;incstack = 0
 10808                           ; Regs used in i1_PS_2_DISABLE_INTERRUPT: [wreg+status,2+status,0]
 10809                           ;i1PS_2_DISABLE_INTERRUPT@DATA_CLK stored from wreg
 10810  04C1  00F0               	movwf	i1PS_2_DISABLE_INTERRUPT@DATA_CLK
 10811                           
 10812                           ;PS_2.c: 180: if(DATA_CLK == 0b00100000)
 10813  04C2  3A20               	xorlw	32
 10814  04C3  1D03               	btfss	3,2
 10815  04C4  2CC8               	goto	i1l647
 10816                           
 10817                           ;PS_2.c: 181: {
 10818                           ;PS_2.c: 184: IOCAN &= ~0b00100000;
 10819  04C5  0027               	movlb	7	; select bank7
 10820  04C6  1292               	bcf	18,5	;volatile
 10821                           
 10822                           ;PS_2.c: 185: }
 10823  04C7  0008               	return
 10824  04C8                     i1l647:	
 10825                           
 10826                           ;PS_2.c: 186: else
 10827                           ;PS_2.c: 187: {
 10828                           ;PS_2.c: 190: IOCAN &= ~0b00010000;
 10829  04C8  0027               	movlb	7	; select bank7
 10830  04C9  1212               	bcf	18,4	;volatile
 10831  04CA  0008               	return
 10832  04CB                     __end_ofi1_PS_2_DISABLE_INTERRUPT:	
 10833                           
 10834                           	psect	text42
 10835  04DB                     __ptext42:	
 10836 ;; *************** function _READ_CONFIG_PIN *****************
 10837 ;; Defined at:
 10838 ;;		line 146 in file "MISC.c"
 10839 ;; Parameters:    Size  Location     Type
 10840 ;;		None
 10841 ;; Auto vars:     Size  Location     Type
 10842 ;;		None
 10843 ;; Return value:  Size  Location     Type
 10844 ;;                  1    wreg      unsigned char 
 10845 ;; Registers used:
 10846 ;;		wreg
 10847 ;; Tracked objects:
 10848 ;;		On entry : 1E/2
 10849 ;;		On exit  : 1F/0
 10850 ;;		Unchanged: 0/0
 10851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10856 ;;Total ram usage:        0 bytes
 10857 ;; Hardware stack levels used:    1
 10858 ;; This function calls:
 10859 ;;		Nothing
 10860 ;; This function is called by:
 10861 ;;		_isr
 10862 ;; This function uses a non-reentrant model
 10863 ;;
 10864                           
 10865                           
 10866                           ;psect for function _READ_CONFIG_PIN
 10867  04DB                     _READ_CONFIG_PIN:	
 10868                           
 10869                           ;MISC.c: 150: if((PORTC & 0b00000001) == 0b00000001)
 10870                           
 10871                           ;incstack = 0
 10872                           ; Regs used in _READ_CONFIG_PIN: [wreg]
 10873  04DB  0020               	movlb	0	; select bank0
 10874  04DC  180E               	btfsc	14,0	;volatile
 10875                           
 10876                           ;MISC.c: 151: {
 10877                           ;MISC.c: 152: return (1);
 10878  04DD  3401               	retlw	1
 10879                           
 10880                           ;MISC.c: 153: }
 10881                           ;MISC.c: 155: return 0;
 10882  04DE  3400               	retlw	0
 10883  04DF                     __end_of_READ_CONFIG_PIN:	
 10884                           
 10885                           	psect	text52
 10886  100D                     __ptext52:	
 10887 ;; *************** function _SetBaud *****************
 10888 ;; Defined at:
 10889 ;;		line 385 in file "UART.c"
 10890 ;; Parameters:    Size  Location     Type
 10891 ;;  Baud            4    8[BANK1 ] unsigned long 
 10892 ;;  Parity          1   12[BANK1 ] unsigned char 
 10893 ;; Auto vars:     Size  Location     Type
 10894 ;;  buf            50   17[BANK1 ] unsigned char [50]
 10895 ;;  temp            4   75[BANK1 ] unsigned long 
 10896 ;;  Baudtemp        4   71[BANK1 ] unsigned long 
 10897 ;;  Paritytemp      4   67[BANK1 ] unsigned long 
 10898 ;;  i               1   79[BANK1 ] unsigned char 
 10899 ;; Return value:  Size  Location     Type
 10900 ;;		None               void
 10901 ;; Registers used:
 10902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10903 ;; Tracked objects:
 10904 ;;		On entry : 1F/1
 10905 ;;		On exit  : 0/0
 10906 ;;		Unchanged: 0/0
 10907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10908 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Locals:         0       0      63       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;      Totals:         0       0      72       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;Total ram usage:       72 bytes
 10913 ;; Hardware stack levels used:    1
 10914 ;; Hardware stack levels required when called:    4
 10915 ;; This function calls:
 10916 ;;		_WriteBaud
 10917 ;;		_sprintf
 10918 ;;		i1_InitUART
 10919 ;;		i1_ReadBaud
 10920 ;;		i1_UARTstringWAIT
 10921 ;;		i1_delayUS
 10922 ;; This function is called by:
 10923 ;;		_Process_PS2_ScanCode
 10924 ;; This function uses a non-reentrant model
 10925 ;;
 10926                           
 10927                           
 10928                           ;psect for function _SetBaud
 10929  100D                     _SetBaud:	
 10930  100D  30C0               	movlw	192
 10931                           
 10932                           ;UART.c: 389: unsigned long Paritytemp=0;
 10933                           
 10934                           ;incstack = 0
 10935                           ; Regs used in _SetBaud: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10936  100E  01E3               	clrf	SetBaud@Paritytemp^(0+128)
 10937  100F  01E4               	clrf	(SetBaud@Paritytemp+1)^(0+128)
 10938  1010  01E5               	clrf	(SetBaud@Paritytemp+2)^(0+128)
 10939  1011  01E6               	clrf	(SetBaud@Paritytemp+3)^(0+128)
 10940                           
 10941                           ;UART.c: 393: WriteBaud((0x1800 >> 5), Baud, Parity);
 10942  1012  0020               	movlb	0	; select bank0
 10943  1013  00E9               	movwf	WriteBaud@row
 10944  1014  01EA               	clrf	WriteBaud@row+1
 10945  1015  0021               	movlb	1	; select bank1
 10946  1016  082B               	movf	(SetBaud@Baud+3)^(0+128),w
 10947  1017  0020               	movlb	0	; select bank0
 10948  1018  00EE               	movwf	WriteBaud@Baud+3
 10949  1019  0021               	movlb	1	; select bank1
 10950  101A  082A               	movf	(SetBaud@Baud+2)^(0+128),w
 10951  101B  0020               	movlb	0	; select bank0
 10952  101C  00ED               	movwf	WriteBaud@Baud+2
 10953  101D  0021               	movlb	1	; select bank1
 10954  101E  0829               	movf	(SetBaud@Baud+1)^(0+128),w
 10955  101F  0020               	movlb	0	; select bank0
 10956  1020  00EC               	movwf	WriteBaud@Baud+1
 10957  1021  0021               	movlb	1	; select bank1
 10958  1022  0828               	movf	SetBaud@Baud^(0+128),w
 10959  1023  0020               	movlb	0	; select bank0
 10960  1024  00EB               	movwf	WriteBaud@Baud
 10961  1025  0021               	movlb	1	; select bank1
 10962  1026  082C               	movf	SetBaud@Parity^(0+128),w
 10963  1027  0020               	movlb	0	; select bank0
 10964  1028  00EF               	movwf	WriteBaud@Parity
 10965  1029  3180  20DA  3190   	fcall	_WriteBaud
 10966                           
 10967                           ;UART.c: 394: temp = ReadBaud((0x1800 >> 5), 0);
 10968  102C  30C0               	movlw	192
 10969  102D  0020               	movlb	0	; select bank0
 10970  102E  00A4               	movwf	i1ReadBaud@row
 10971  102F  01A5               	clrf	i1ReadBaud@row+1
 10972  1030  01A6               	clrf	i1ReadBaud@column
 10973  1031  3181  2131  3190   	fcall	i1_ReadBaud
 10974  1034  0827               	movf	?i1_ReadBaud+3,w
 10975  1035  0021               	movlb	1	; select bank1
 10976  1036  00EE               	movwf	(SetBaud@temp+3)^(0+128)
 10977  1037  0020               	movlb	0	; select bank0
 10978  1038  0826               	movf	?i1_ReadBaud+2,w
 10979  1039  0021               	movlb	1	; select bank1
 10980  103A  00ED               	movwf	(SetBaud@temp+2)^(0+128)
 10981  103B  0020               	movlb	0	; select bank0
 10982  103C  0825               	movf	?i1_ReadBaud+1,w
 10983  103D  0021               	movlb	1	; select bank1
 10984  103E  00EC               	movwf	(SetBaud@temp+1)^(0+128)
 10985  103F  0020               	movlb	0	; select bank0
 10986  1040  0824               	movf	?i1_ReadBaud,w
 10987  1041  0021               	movlb	1	; select bank1
 10988  1042  00EB               	movwf	SetBaud@temp^(0+128)
 10989                           
 10990                           ;UART.c: 395: Baudtemp = temp & 0x000FFFFF;
 10991  1043  086E               	movf	(SetBaud@temp+3)^(0+128),w
 10992  1044  00EA               	movwf	(SetBaud@Baudtemp+3)^(0+128)
 10993  1045  086D               	movf	(SetBaud@temp+2)^(0+128),w
 10994  1046  00E9               	movwf	(SetBaud@Baudtemp+2)^(0+128)
 10995  1047  086C               	movf	(SetBaud@temp+1)^(0+128),w
 10996  1048  00E8               	movwf	(SetBaud@Baudtemp+1)^(0+128)
 10997  1049  086B               	movf	SetBaud@temp^(0+128),w
 10998  104A  00E7               	movwf	SetBaud@Baudtemp^(0+128)
 10999  104B  30FF               	movlw	255
 11000  104C  05E7               	andwf	SetBaud@Baudtemp^(0+128),f
 11001  104D  05E8               	andwf	(SetBaud@Baudtemp+1)^(0+128),f
 11002  104E  300F               	movlw	15
 11003  104F  05E9               	andwf	(SetBaud@Baudtemp+2)^(0+128),f
 11004  1050  01EA               	clrf	(SetBaud@Baudtemp+3)^(0+128)
 11005                           
 11006                           ;UART.c: 396: Paritytemp = (unsigned char)((temp & 0x00F00000) >> 20);
 11007  1051  086B               	movf	SetBaud@temp^(0+128),w
 11008  1052  00AD               	movwf	??_SetBaud^(0+128)
 11009  1053  086C               	movf	(SetBaud@temp+1)^(0+128),w
 11010  1054  00AE               	movwf	(??_SetBaud^(0+128)+1)
 11011  1055  086D               	movf	(SetBaud@temp+2)^(0+128),w
 11012  1056  00AF               	movwf	(??_SetBaud^(0+128)+2)
 11013  1057  086E               	movf	(SetBaud@temp+3)^(0+128),w
 11014  1058  00B0               	movwf	(??_SetBaud^(0+128)+3)
 11015  1059  3014               	movlw	20
 11016  105A                     u488_25:	
 11017  105A  36B0               	lsrf	(??_SetBaud^(0+128)+3),f
 11018  105B  0CAF               	rrf	(??_SetBaud^(0+128)+2),f
 11019  105C  0CAE               	rrf	(??_SetBaud^(0+128)+1),f
 11020  105D  0CAD               	rrf	??_SetBaud^(0+128),f
 11021  105E  0B89               	decfsz	9,f
 11022  105F  285A               	goto	u488_25
 11023  1060  082D               	movf	??_SetBaud^(0+128),w
 11024  1061  390F               	andlw	15
 11025  1062  00E3               	movwf	SetBaud@Paritytemp^(0+128)
 11026  1063  01E4               	clrf	(SetBaud@Paritytemp+1)^(0+128)
 11027  1064  01E5               	clrf	(SetBaud@Paritytemp+2)^(0+128)
 11028  1065  01E6               	clrf	(SetBaud@Paritytemp+3)^(0+128)
 11029                           
 11030                           ;UART.c: 398: InitUART(Baud, Parity);
 11031  1066  082B               	movf	(SetBaud@Baud+3)^(0+128),w
 11032  1067  0020               	movlb	0	; select bank0
 11033  1068  00A3               	movwf	i1InitUART@Baud+3
 11034  1069  0021               	movlb	1	; select bank1
 11035  106A  082A               	movf	(SetBaud@Baud+2)^(0+128),w
 11036  106B  0020               	movlb	0	; select bank0
 11037  106C  00A2               	movwf	i1InitUART@Baud+2
 11038  106D  0021               	movlb	1	; select bank1
 11039  106E  0829               	movf	(SetBaud@Baud+1)^(0+128),w
 11040  106F  0020               	movlb	0	; select bank0
 11041  1070  00A1               	movwf	i1InitUART@Baud+1
 11042  1071  0021               	movlb	1	; select bank1
 11043  1072  0828               	movf	SetBaud@Baud^(0+128),w
 11044  1073  0020               	movlb	0	; select bank0
 11045  1074  00A0               	movwf	i1InitUART@Baud
 11046  1075  0021               	movlb	1	; select bank1
 11047  1076  082C               	movf	SetBaud@Parity^(0+128),w
 11048  1077  0020               	movlb	0	; select bank0
 11049  1078  00A4               	movwf	i1InitUART@parity
 11050  1079  318C  24B2  3190   	fcall	i1_InitUART
 11051                           
 11052                           ;UART.c: 399: UARTstringWAIT("\r\n");
 11053  107C  278B  3190         	fcall	PL42	;call to abstracted procedure
 11054  107E  2623  3190         	fcall	i1_UARTstringWAIT
 11055                           
 11056                           ;UART.c: 400: delayUS(15000);
 11057  1080  2760  3190         	fcall	PL8	;call to abstracted procedure
 11058  1082  2699  3190         	fcall	i1_delayUS
 11059                           
 11060                           ;UART.c: 401: if((Baud != Baudtemp) || (Parity != Paritytemp))
 11061  1084  0021               	movlb	1	; select bank1
 11062  1085  086A               	movf	(SetBaud@Baudtemp+3)^(0+128),w
 11063  1086  062B               	xorwf	(SetBaud@Baud+3)^(0+128),w
 11064  1087  1D03               	skipz
 11065  1088  2893               	goto	u489_25
 11066  1089  0869               	movf	(SetBaud@Baudtemp+2)^(0+128),w
 11067  108A  062A               	xorwf	(SetBaud@Baud+2)^(0+128),w
 11068  108B  1D03               	skipz
 11069  108C  2893               	goto	u489_25
 11070  108D  0868               	movf	(SetBaud@Baudtemp+1)^(0+128),w
 11071  108E  0629               	xorwf	(SetBaud@Baud+1)^(0+128),w
 11072  108F  1D03               	skipz
 11073  1090  2893               	goto	u489_25
 11074  1091  0867               	movf	SetBaud@Baudtemp^(0+128),w
 11075  1092  0628               	xorwf	SetBaud@Baud^(0+128),w
 11076  1093                     u489_25:	
 11077  1093  1D03               	skipz
 11078  1094  28AA               	goto	i1l4896
 11079  1095  082C               	movf	SetBaud@Parity^(0+128),w
 11080  1096  00AD               	movwf	??_SetBaud^(0+128)
 11081  1097  01AE               	clrf	(??_SetBaud^(0+128)+1)
 11082  1098  01AF               	clrf	(??_SetBaud^(0+128)+2)
 11083  1099  01B0               	clrf	(??_SetBaud^(0+128)+3)
 11084  109A  0866               	movf	(SetBaud@Paritytemp+3)^(0+128),w
 11085  109B  0630               	xorwf	(??_SetBaud+3)^(0+128),w
 11086  109C  1D03               	skipz
 11087  109D  28A8               	goto	u490_25
 11088  109E  0865               	movf	(SetBaud@Paritytemp+2)^(0+128),w
 11089  109F  062F               	xorwf	(??_SetBaud+2)^(0+128),w
 11090  10A0  1D03               	skipz
 11091  10A1  28A8               	goto	u490_25
 11092  10A2  0864               	movf	(SetBaud@Paritytemp+1)^(0+128),w
 11093  10A3  062E               	xorwf	(??_SetBaud+1)^(0+128),w
 11094  10A4  1D03               	skipz
 11095  10A5  28A8               	goto	u490_25
 11096  10A6  0863               	movf	SetBaud@Paritytemp^(0+128),w
 11097  10A7  062D               	xorwf	??_SetBaud^(0+128),w
 11098  10A8                     u490_25:	
 11099  10A8  1903               	skipnz
 11100  10A9  28B4               	goto	i1l4900
 11101  10AA                     i1l4896:	
 11102                           
 11103                           ;UART.c: 402: {
 11104                           ;UART.c: 403: UARTstringWAIT("Flash Program Fail\r\n");
 11105  10AA  30C4               	movlw	low (STR_10| (0+32768))
 11106  10AB  00FB               	movwf	i1UARTstringWAIT@data
 11107  10AC  309A               	movlw	high (STR_10| (0+32768))
 11108  10AD  00FC               	movwf	i1UARTstringWAIT@data+1
 11109  10AE  2623  3190         	fcall	i1_UARTstringWAIT
 11110                           
 11111                           ;UART.c: 404: delayUS(15000);
 11112  10B0  2760  3190         	fcall	PL8	;call to abstracted procedure
 11113  10B2  2699  3190         	fcall	i1_delayUS
 11114  10B4                     i1l4900:	
 11115                           
 11116                           ;UART.c: 405: }
 11117                           ;UART.c: 408: for(i =0;i<10;i++)
 11118  10B4  0021               	movlb	1	; select bank1
 11119  10B5  01EF               	clrf	SetBaud@i^(0+128)
 11120  10B6                     i1l486:	
 11121                           
 11122                           ;UART.c: 409: {
 11123                           ;UART.c: 410: LATC |= 0b00010000;
 11124  10B6  0022               	movlb	2	; select bank2
 11125  10B7  160E               	bsf	14,4	;volatile
 11126                           
 11127                           ;UART.c: 411: delayUS(10000);
 11128  10B8  2795  3190         	fcall	PL56	;call to abstracted procedure
 11129  10BA  2699  3190         	fcall	i1_delayUS
 11130                           
 11131                           ;UART.c: 412: LATC &= ~0b00010000;
 11132  10BC  0022               	movlb	2	; select bank2
 11133  10BD  120E               	bcf	14,4	;volatile
 11134                           
 11135                           ;UART.c: 413: delayUS(10000);
 11136  10BE  2795  3190         	fcall	PL56	;call to abstracted procedure
 11137  10C0  2699  3190         	fcall	i1_delayUS
 11138  10C2  0021               	movlb	1	; select bank1
 11139  10C3  300A               	movlw	10
 11140  10C4  0AEF               	incf	SetBaud@i^(0+128),f
 11141  10C5  026F               	subwf	SetBaud@i^(0+128),w
 11142  10C6  1C03               	skipc
 11143  10C7  28B6               	goto	i1l486
 11144                           
 11145                           ;UART.c: 414: }
 11146                           ;UART.c: 416: sprintf(buf,"Baud is %lu",Baud);
 11147  10C8  30B1               	movlw	low SetBaud@buf
 11148  10C9  0020               	movlb	0	; select bank0
 11149  10CA  00A8               	movwf	sprintf@sp
 11150  10CB  3000               	movlw	high SetBaud@buf
 11151  10CC  00A9               	movwf	sprintf@sp+1
 11152  10CD  3026               	movlw	low (STR_11| (0+32768))
 11153  10CE  00AA               	movwf	sprintf@f
 11154  10CF  309B               	movlw	high (STR_11| (0+32768))
 11155  10D0  00AB               	movwf	sprintf@f+1
 11156  10D1  0021               	movlb	1	; select bank1
 11157  10D2  082B               	movf	(SetBaud@Baud+3)^(0+128),w
 11158  10D3  0020               	movlb	0	; select bank0
 11159  10D4  00AF               	movwf	?_sprintf+7
 11160  10D5  0021               	movlb	1	; select bank1
 11161  10D6  082A               	movf	(SetBaud@Baud+2)^(0+128),w
 11162  10D7  0020               	movlb	0	; select bank0
 11163  10D8  00AE               	movwf	?_sprintf+6
 11164  10D9  0021               	movlb	1	; select bank1
 11165  10DA  0829               	movf	(SetBaud@Baud+1)^(0+128),w
 11166  10DB  0020               	movlb	0	; select bank0
 11167  10DC  00AD               	movwf	?_sprintf+5
 11168  10DD  0021               	movlb	1	; select bank1
 11169  10DE  0828               	movf	SetBaud@Baud^(0+128),w
 11170  10DF  0020               	movlb	0	; select bank0
 11171  10E0  00AC               	movwf	?_sprintf+4
 11172  10E1  318D  2530  3190   	fcall	_sprintf
 11173                           
 11174                           ;UART.c: 417: UARTstringWAIT(buf);
 11175  10E4  30B1               	movlw	low SetBaud@buf
 11176  10E5  00FB               	movwf	i1UARTstringWAIT@data
 11177  10E6  3000               	movlw	high SetBaud@buf
 11178  10E7  00FC               	movwf	i1UARTstringWAIT@data+1
 11179  10E8  2623  3190         	fcall	i1_UARTstringWAIT
 11180                           
 11181                           ;UART.c: 418: if(Parity)
 11182  10EA  0021               	movlb	1	; select bank1
 11183  10EB  082C               	movf	SetBaud@Parity^(0+128),w
 11184  10EC  1D03               	btfss	3,2
 11185  10ED  28FF               	goto	i1l4932
 11186  10EE  290A               	goto	i1l4934
 11187  10EF                     i1l4922:	
 11188                           
 11189                           ;UART.c: 423: UARTstringWAIT(OddParityMSG);
 11190  10EF  3011               	movlw	low (_OddParityMSG| (0+32768))
 11191  10F0  00FB               	movwf	i1UARTstringWAIT@data
 11192  10F1  309A               	movlw	high (_OddParityMSG| (0+32768))
 11193  10F2  290D               	goto	L13
 11194  10F3                     i1l4924:	
 11195                           ;UART.c: 424: break;
 11196                           
 11197                           
 11198                           ;UART.c: 426: UARTstringWAIT(EvenParityMSG);
 11199  10F3  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 11200  10F4  00FB               	movwf	i1UARTstringWAIT@data
 11201  10F5  3099               	movlw	high (_EvenParityMSG| (0+32768))
 11202  10F6  290D               	goto	L13
 11203  10F7                     i1l4926:	
 11204                           ;UART.c: 427: break;
 11205                           
 11206                           
 11207                           ;UART.c: 429: UARTstringWAIT(MarkParityMSG);
 11208  10F7  304A               	movlw	low (_MarkParityMSG| (0+32768))
 11209  10F8  00FB               	movwf	i1UARTstringWAIT@data
 11210  10F9  309A               	movlw	high (_MarkParityMSG| (0+32768))
 11211  10FA  290D               	goto	L13
 11212  10FB                     i1l4928:	
 11213                           ;UART.c: 430: break;
 11214                           
 11215                           
 11216                           ;UART.c: 432: UARTstringWAIT(SpaceParityMSG);
 11217  10FB  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 11218  10FC  00FB               	movwf	i1UARTstringWAIT@data
 11219  10FD  309A               	movlw	high (_SpaceParityMSG| (0+32768))
 11220  10FE  290D               	goto	L13
 11221  10FF                     i1l4932:	
 11222                           ;UART.c: 433: break;
 11223                           
 11224  10FF  082C               	movf	SetBaud@Parity^(0+128),w
 11225                           
 11226                           ; Switch size 1, requested type "space"
 11227                           ; Number of cases is 3, Range of values is 1 to 3
 11228                           ; switch strategies available:
 11229                           ; Name         Instructions Cycles
 11230                           ; simple_byte           10     6 (average)
 11231                           ; direct_byte           15     9 (fixed)
 11232                           ; jumptable            263     9 (fixed)
 11233                           ;	Chosen strategy is simple_byte
 11234  1100  3A01               	xorlw	1	; case 1
 11235  1101  1903               	skipnz
 11236  1102  28EF               	goto	i1l4922
 11237  1103  3A03               	xorlw	3	; case 2
 11238  1104  1903               	skipnz
 11239  1105  28F3               	goto	i1l4924
 11240  1106  3A01               	xorlw	1	; case 3
 11241  1107  1903               	skipnz
 11242  1108  28F7               	goto	i1l4926
 11243  1109  28FB               	goto	i1l4928
 11244  110A                     i1l4934:	
 11245                           
 11246                           ;UART.c: 436: else
 11247                           ;UART.c: 437: {
 11248                           ;UART.c: 438: UARTstringWAIT(NoParityMSG);
 11249  110A  3026               	movlw	low (_NoParityMSG| (0+32768))
 11250  110B  00FB               	movwf	i1UARTstringWAIT@data
 11251  110C  309A               	movlw	high (_NoParityMSG| (0+32768))
 11252  110D                     L13:	
 11253  110D  00FC               	movwf	i1UARTstringWAIT@data+1
 11254  110E  2623  3190         	fcall	i1_UARTstringWAIT
 11255                           
 11256                           ;UART.c: 439: }
 11257                           ;UART.c: 440: UARTstringWAIT("\r\n");
 11258  1110  278B  3190         	fcall	PL42	;call to abstracted procedure
 11259  1112  2623  3190         	fcall	i1_UARTstringWAIT
 11260                           
 11261                           ;UART.c: 441: delayUS(15000);
 11262  1114  2760  3190         	fcall	PL8	;call to abstracted procedure
 11263  1116  2699               	fcall	i1_delayUS
 11264  1117  0008               	return
 11265  1118                     __end_of_SetBaud:	
 11266  1118                     __ptext43:	
 11267 ;; *************** function _Process_PS2_ScanCode *****************
 11268 ;; Defined at:
 11269 ;;		line 257 in file "PS_2.c"
 11270 ;; Parameters:    Size  Location     Type
 11271 ;;		None
 11272 ;; Auto vars:     Size  Location     Type
 11273 ;;  buf            60    6[BANK2 ] unsigned char [60]
 11274 ;;  temp            1   75[BANK2 ] unsigned char 
 11275 ;;  shortbreak      1   74[BANK2 ] unsigned char 
 11276 ;; Return value:  Size  Location     Type
 11277 ;;		None               void
 11278 ;; Registers used:
 11279 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11280 ;; Tracked objects:
 11281 ;;		On entry : 1F/3
 11282 ;;		On exit  : 1F/3
 11283 ;;		Unchanged: 0/0
 11284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Locals:         0       0       0      70       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;      Temps:          0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0
 11288 ;;      Totals:         0       0       0      76       0       0       0       0       0       0       0       0       
      +0       0
 11289 ;;Total ram usage:       76 bytes
 11290 ;; Hardware stack levels used:    1
 11291 ;; Hardware stack levels required when called:    5
 11292 ;; This function calls:
 11293 ;;		_BufferShiftBack
 11294 ;;		_Decode_Scan_Code
 11295 ;;		_Decode_Scan_Code_Function
 11296 ;;		_Decode_Scan_Code_FunctionE0
 11297 ;;		_Decode_Scan_Code_Shift
 11298 ;;		_ISNUMBER
 11299 ;;		_SetBaud
 11300 ;;		_UART_send_break
 11301 ;;		_UART_send_break_timed
 11302 ;;		___lmul
 11303 ;;		_cleanBuffer
 11304 ;;		_sprintf
 11305 ;;		i1_Send_PS2
 11306 ;;		i1_UARTchar
 11307 ;;		i1_UARTstringWAIT
 11308 ;;		i1_delayUS
 11309 ;; This function is called by:
 11310 ;;		_isr
 11311 ;; This function uses a non-reentrant model
 11312 ;;
 11313                           
 11314                           
 11315                           ;psect for function _Process_PS2_ScanCode
 11316  1118                     _Process_PS2_ScanCode:	
 11317                           
 11318                           ;PS_2.c: 259: unsigned char temp = 0;
 11319                           
 11320                           ;incstack = 0
 11321                           ; Regs used in _Process_PS2_ScanCode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11322  1118  0022               	movlb	2	; select bank2
 11323  1119  01EB               	clrf	Process_PS2_ScanCode@temp^(0+256)
 11324                           
 11325                           ;PS_2.c: 260: unsigned char shortbreak = 0;
 11326  111A  01EA               	clrf	Process_PS2_ScanCode@shortbreak^(0+256)
 11327                           
 11328                           ;PS_2.c: 261: unsigned char buf[60];
 11329                           ;PS_2.c: 263: if(PS_2_Buffer_items != 0)
 11330  111B  0023               	movlb	3	; select bank3
 11331  111C  0867               	movf	_PS_2_Buffer_items^(0+384),w
 11332  111D  1903               	btfsc	3,2
 11333  111E  0008               	return
 11334  111F                     i1l5872:	
 11335  111F  0023               	movlb	3	; select bank3
 11336  1120  0867               	movf	_PS_2_Buffer_items^(0+384),w
 11337  1121  1903               	btfsc	3,2
 11338  1122  0008               	return
 11339                           
 11340                           ;PS_2.c: 267: {
 11341                           ;PS_2.c: 269: if(PS_2_ScanCodes[0])
 11342  1123  0024               	movlb	4	; select bank4
 11343  1124  082C               	movf	_PS_2_ScanCodes^(0+512),w
 11344  1125  1903               	btfsc	3,2
 11345  1126  2D42               	goto	i1l5868
 11346                           
 11347                           ;PS_2.c: 270: {
 11348                           ;PS_2.c: 272: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 11349  1127  082C               	movf	_PS_2_ScanCodes^(0+512),w
 11350  1128  0023               	movlb	3	; select bank3
 11351  1129  00D7               	movwf	_PS_2_Read_Data_First^(0+384)
 11352  112A  30F0               	movlw	240
 11353  112B  01D8               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11354                           
 11355                           ;PS_2.c: 273: if(PS_2_Read_Data_First == 0xF0)
 11356  112C  0657               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11357  112D  0458               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11358  112E  1D03               	btfss	3,2
 11359  112F  293B               	goto	i1l5378
 11360                           
 11361                           ;PS_2.c: 274: {
 11362                           ;PS_2.c: 275: PS_2_Read_Data_First = PS_2_ScanCodes[0];
 11363  1130  0024               	movlb	4	; select bank4
 11364  1131  082C               	movf	_PS_2_ScanCodes^(0+512),w
 11365  1132  0023               	movlb	3	; select bank3
 11366  1133  00D7               	movwf	_PS_2_Read_Data_First^(0+384)
 11367  1134  01D8               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11368                           
 11369                           ;PS_2.c: 276: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 11370  1135  0024               	movlb	4	; select bank4
 11371  1136  082D               	movf	(_PS_2_ScanCodes^(0+512)+1),w
 11372  1137  0023               	movlb	3	; select bank3
 11373  1138  00D9               	movwf	_PS_2_Read_Data_Second^(0+384)
 11374  1139  01DA               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11375  113A  296D               	goto	i1l5406
 11376  113B                     i1l5378:	
 11377                           ;PS_2.c: 279: }
 11378                           
 11379                           ;PS_2.c: 278: BufferShiftBack(PS_2_ScanCodes,2,12);
 11380                           
 11381                           ;PS_2.c: 277: PS_2_Buffer_items -= 2;
 11382                           
 11383                           
 11384                           ;PS_2.c: 280: else if(PS_2_Read_Data_First == 0xE0)
 11385  113B  30E0               	movlw	224
 11386  113C  0657               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11387  113D  0458               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11388  113E  1D03               	btfss	3,2
 11389  113F  2971               	goto	i1l5410
 11390                           
 11391                           ;PS_2.c: 281: {
 11392                           ;PS_2.c: 282: PS_2_Read_Data_Second = PS_2_ScanCodes[1];
 11393  1140  0024               	movlb	4	; select bank4
 11394  1141  082D               	movf	(_PS_2_ScanCodes^(0+512)+1),w
 11395  1142  0023               	movlb	3	; select bank3
 11396  1143  00D9               	movwf	_PS_2_Read_Data_Second^(0+384)
 11397  1144  3012               	movlw	18
 11398  1145  01DA               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11399                           
 11400                           ;PS_2.c: 283: if(PS_2_Read_Data_Second == 0x12)
 11401  1146  0659               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11402  1147  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11403  1148  1D03               	btfss	3,2
 11404  1149  2956               	goto	i1l5390
 11405  114A  3004               	movlw	4
 11406                           
 11407                           ;PS_2.c: 284: {
 11408                           ;PS_2.c: 286: PS_2_Read_Data_First = 0;
 11409  114B  01D7               	clrf	_PS_2_Read_Data_First^(0+384)
 11410  114C  01D8               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11411                           
 11412                           ;PS_2.c: 287: PS_2_Read_Data_Second = 0;
 11413  114D  01D9               	clrf	_PS_2_Read_Data_Second^(0+384)
 11414  114E  01DA               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11415                           
 11416                           ;PS_2.c: 288: PS_2_Buffer_items -= 4;
 11417  114F  02E7               	subwf	_PS_2_Buffer_items^(0+384),f
 11418                           
 11419                           ;PS_2.c: 289: BufferShiftBack(PS_2_ScanCodes,4,12);
 11420  1150  00F0               	movwf	BufferShiftBack@shift
 11421  1151  300C               	movlw	12
 11422  1152  00F1               	movwf	BufferShiftBack@size
 11423  1153  302C               	movlw	(low (_PS_2_ScanCodes| (0+512)))& (0+255)
 11424  1154  26EC  3190         	fcall	_BufferShiftBack
 11425  1156                     i1l5390:	
 11426                           
 11427                           ;PS_2.c: 290: }
 11428                           ;PS_2.c: 291: if(PS_2_Read_Data_Second == 0xF0)
 11429  1156  30F0               	movlw	240
 11430  1157  0023               	movlb	3	; select bank3
 11431  1158  0659               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11432  1159  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11433  115A  1D03               	btfss	3,2
 11434  115B  296D               	goto	i1l5406
 11435                           
 11436                           ;PS_2.c: 292: {
 11437                           ;PS_2.c: 293: PS_2_Read_Data_Third = PS_2_ScanCodes[2];
 11438  115C  0024               	movlb	4	; select bank4
 11439  115D  082E               	movf	(_PS_2_ScanCodes^(0+512)+2),w
 11440  115E  0023               	movlb	3	; select bank3
 11441  115F  00DB               	movwf	_PS_2_Read_Data_Third^(0+384)
 11442  1160  307C               	movlw	124
 11443  1161  01DC               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 11444                           
 11445                           ;PS_2.c: 294: if(PS_2_Read_Data_Third == 0x7C)
 11446  1162  065B               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11447  1163  045C               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11448  1164  1D03               	btfss	3,2
 11449  1165  296A               	goto	i1l5402
 11450  1166  3006               	movlw	6
 11451                           
 11452                           ;PS_2.c: 295: {
 11453                           ;PS_2.c: 297: PS_2_Read_Data_First = 0;
 11454                           
 11455                           ;PS_2.c: 298: PS_2_Read_Data_Second = 0;
 11456                           
 11457                           ;PS_2.c: 299: PS_2_Read_Data_Third = 0;
 11458  1167  2784  3190         	fcall	PL40	;call to abstracted procedure
 11459  1169  296B               	goto	L12
 11460  116A                     i1l5402:	
 11461                           ;PS_2.c: 302: }
 11462                           
 11463                           ;PS_2.c: 301: BufferShiftBack(PS_2_ScanCodes,6,12);
 11464                           
 11465                           ;PS_2.c: 300: PS_2_Buffer_items -= 6;
 11466                           
 11467                           
 11468                           ;PS_2.c: 303: else
 11469                           ;PS_2.c: 304: {
 11470                           ;PS_2.c: 305: PS_2_Buffer_items -= 3;
 11471  116A  3003               	movlw	3
 11472  116B                     L12:	
 11473  116B  02E7               	subwf	_PS_2_Buffer_items^(0+384),f
 11474                           
 11475                           ;PS_2.c: 306: BufferShiftBack(PS_2_ScanCodes,3,12);
 11476  116C  2981               	goto	L11
 11477  116D                     i1l5406:	
 11478  116D  3002               	movlw	2
 11479                           
 11480                           ;PS_2.c: 309: else
 11481                           ;PS_2.c: 310: {
 11482                           ;PS_2.c: 311: PS_2_Buffer_items -= 2;
 11483  116E  03E7               	decf	_PS_2_Buffer_items^(0+384),f
 11484  116F  03E7               	decf	_PS_2_Buffer_items^(0+384),f
 11485                           
 11486                           ;PS_2.c: 312: BufferShiftBack(PS_2_ScanCodes,2,12);
 11487  1170  2981               	goto	L11
 11488  1171                     i1l5410:	
 11489                           
 11490                           ;PS_2.c: 315: else if(PS_2_Read_Data_First == 0xE1)
 11491  1171  30E1               	movlw	225
 11492  1172  0657               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11493  1173  0458               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11494  1174  1D03               	btfss	3,2
 11495  1175  2984               	goto	i1l5420
 11496                           
 11497                           ;PS_2.c: 316: {
 11498                           ;PS_2.c: 321: PS_2_Read_Data_First = 0xE0;
 11499  1176  30E0               	movlw	224
 11500  1177  00D7               	movwf	_PS_2_Read_Data_First^(0+384)
 11501  1178  3069               	movlw	105
 11502  1179  01D8               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 11503                           
 11504                           ;PS_2.c: 322: PS_2_Read_Data_Second = 0x69;
 11505  117A  00D9               	movwf	_PS_2_Read_Data_Second^(0+384)
 11506  117B  3008               	movlw	8
 11507  117C  01DA               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 11508                           
 11509                           ;PS_2.c: 323: PS_2_Buffer_items -= 8;
 11510  117D  02E7               	subwf	_PS_2_Buffer_items^(0+384),f
 11511                           
 11512                           ;PS_2.c: 324: shortbreak = 1;
 11513  117E  0022               	movlb	2	; select bank2
 11514  117F  01EA               	clrf	Process_PS2_ScanCode@shortbreak^(0+256)
 11515  1180  0AEA               	incf	Process_PS2_ScanCode@shortbreak^(0+256),f
 11516  1181                     L11:	
 11517                           ;PS_2.c: 325: BufferShiftBack(PS_2_ScanCodes,8,12);
 11518                           
 11519  1181  00F0               	movwf	BufferShiftBack@shift
 11520  1182  300C               	movlw	12
 11521  1183  2988               	goto	L6
 11522  1184                     i1l5420:	
 11523                           ;PS_2.c: 326: }
 11524                           
 11525  1184  300C               	movlw	12
 11526                           
 11527                           ;PS_2.c: 327: else
 11528                           ;PS_2.c: 328: {
 11529                           ;PS_2.c: 329: PS_2_Buffer_items -= 1;
 11530  1185  03E7               	decf	_PS_2_Buffer_items^(0+384),f
 11531  1186  01F0               	clrf	BufferShiftBack@shift
 11532  1187  0AF0               	incf	BufferShiftBack@shift,f
 11533  1188                     L6:	
 11534  1188  00F1               	movwf	BufferShiftBack@size
 11535  1189  302C               	movlw	(low (_PS_2_ScanCodes| (0+512)))& (0+255)
 11536  118A  26EC  3190         	fcall	_BufferShiftBack
 11537                           
 11538                           ;PS_2.c: 331: }
 11539                           ;PS_2.c: 334: if(PS_2_Read_Data_Third)
 11540  118C  0023               	movlb	3	; select bank3
 11541  118D  085B               	movf	_PS_2_Read_Data_Third^(0+384),w
 11542  118E  045C               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11543  118F  1903               	btfsc	3,2
 11544  1190  29B0               	goto	i1l5442
 11545                           
 11546                           ;PS_2.c: 335: {
 11547                           ;PS_2.c: 337: if(PS_2_Read_Data_First == 0xE0)
 11548  1191  30E0               	movlw	224
 11549  1192  0657               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11550  1193  0458               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11551  1194  1D03               	btfss	3,2
 11552  1195  2A74               	goto	i1l5540
 11553                           
 11554                           ;PS_2.c: 338: {
 11555                           ;PS_2.c: 339: if(PS_2_Read_Data_Second == 0xF0)
 11556  1196  30F0               	movlw	240
 11557  1197  0659               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11558  1198  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11559  1199  1D03               	btfss	3,2
 11560  119A  2A74               	goto	i1l5540
 11561                           
 11562                           ;PS_2.c: 340: {
 11563                           ;PS_2.c: 341: if(PS_2_Read_Data_Third == 0x11 )
 11564  119B  3011               	movlw	17
 11565  119C  065B               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11566  119D  045C               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11567  119E  1D03               	btfss	3,2
 11568  119F  29A2               	goto	i1l5434
 11569                           
 11570                           ;PS_2.c: 342: {
 11571                           ;PS_2.c: 343: LALT = 0;
 11572  11A0  01E2               	clrf	_LALT^(0+384)
 11573                           
 11574                           ;PS_2.c: 344: }
 11575  11A1  2A74               	goto	i1l5540
 11576  11A2                     i1l5434:	
 11577                           
 11578                           ;PS_2.c: 345: else if(PS_2_Read_Data_Third == 0x14 )
 11579  11A2  3014               	movlw	20
 11580  11A3  065B               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11581  11A4  045C               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11582  11A5  1D03               	btfss	3,2
 11583  11A6  29A9               	goto	i1l5438
 11584                           
 11585                           ;PS_2.c: 346: {
 11586                           ;PS_2.c: 347: LControl = 0;
 11587  11A7  01E3               	clrf	_LControl^(0+384)
 11588                           
 11589                           ;PS_2.c: 348: }
 11590  11A8  2A74               	goto	i1l5540
 11591  11A9                     i1l5438:	
 11592                           
 11593                           ;PS_2.c: 349: else if(PS_2_Read_Data_Third == 0x71 )
 11594  11A9  3071               	movlw	113
 11595  11AA  065B               	xorwf	_PS_2_Read_Data_Third^(0+384),w
 11596  11AB  045C               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11597  11AC  1D03               	btfss	3,2
 11598  11AD  2A74               	goto	i1l5540
 11599                           
 11600                           ;PS_2.c: 350: {
 11601                           ;PS_2.c: 351: Delete = 0;
 11602  11AE  01E1               	clrf	_Delete^(0+384)
 11603  11AF  2A74               	goto	i1l5540
 11604  11B0                     i1l5442:	
 11605                           
 11606                           ;PS_2.c: 356: else if(PS_2_Read_Data_Second)
 11607  11B0  0859               	movf	_PS_2_Read_Data_Second^(0+384),w
 11608  11B1  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11609  11B2  1903               	btfsc	3,2
 11610  11B3  2A74               	goto	i1l5540
 11611                           
 11612                           ;PS_2.c: 357: {
 11613                           ;PS_2.c: 359: if(PS_2_Read_Data_First == 0xF0)
 11614  11B4  30F0               	movlw	240
 11615  11B5  0657               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11616  11B6  0458               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11617  11B7  1D03               	btfss	3,2
 11618  11B8  2A25               	goto	i1l5506
 11619                           
 11620                           ;PS_2.c: 360: {
 11621                           ;PS_2.c: 362: if(PS_2_Read_Data_Second == 0x12)
 11622  11B9  3012               	movlw	18
 11623  11BA  0659               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11624  11BB  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11625  11BC  1D03               	btfss	3,2
 11626  11BD  29C0               	goto	i1l5450
 11627                           
 11628                           ;PS_2.c: 363: {
 11629                           ;PS_2.c: 364: Right_Shift_Key =0;
 11630  11BE  01ED               	clrf	_Right_Shift_Key^(0+384)
 11631                           
 11632                           ;PS_2.c: 365: }
 11633  11BF  29D3               	goto	i1l5462
 11634  11C0                     i1l5450:	
 11635                           
 11636                           ;PS_2.c: 366: else if(PS_2_Read_Data_Second == 0x59)
 11637  11C0  3059               	movlw	89
 11638  11C1  0659               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11639  11C2  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11640  11C3  1D03               	btfss	3,2
 11641  11C4  29C7               	goto	i1l5454
 11642                           
 11643                           ;PS_2.c: 367: {
 11644                           ;PS_2.c: 368: Left_Shift_Key =0;
 11645  11C5  01E4               	clrf	_Left_Shift_Key^(0+384)
 11646                           
 11647                           ;PS_2.c: 369: }
 11648  11C6  29D3               	goto	i1l5462
 11649  11C7                     i1l5454:	
 11650                           
 11651                           ;PS_2.c: 370: else if(PS_2_Read_Data_Second == 0x14)
 11652  11C7  3014               	movlw	20
 11653  11C8  0659               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11654  11C9  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11655  11CA  1D03               	btfss	3,2
 11656  11CB  29CE               	goto	i1l5458
 11657                           
 11658                           ;PS_2.c: 371: {
 11659                           ;PS_2.c: 372: RControl =0;
 11660  11CC  01EB               	clrf	_RControl^(0+384)
 11661                           
 11662                           ;PS_2.c: 373: }
 11663  11CD  29D3               	goto	i1l5462
 11664  11CE                     i1l5458:	
 11665                           
 11666                           ;PS_2.c: 374: else if(PS_2_Read_Data_Second == 0x11 )
 11667  11CE  3011               	movlw	17
 11668  11CF  0659               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11669  11D0  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11670  11D1  1903               	btfsc	3,2
 11671                           
 11672                           ;PS_2.c: 375: {
 11673                           ;PS_2.c: 376: RALT =0;
 11674  11D2  01EA               	clrf	_RALT^(0+384)
 11675  11D3                     i1l5462:	
 11676                           
 11677                           ;PS_2.c: 377: }
 11678                           ;PS_2.c: 378: if(PS_2_Read_Data_Second == 0x59 || PS_2_Read_Data_Second == 0x12)
 11679  11D3  3059               	movlw	89
 11680  11D4  0659               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11681  11D5  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11682  11D6  1903               	btfsc	3,2
 11683  11D7  29DD               	goto	i1l5466
 11684  11D8  3012               	movlw	18
 11685  11D9  0659               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11686  11DA  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11687  11DB  1D03               	btfss	3,2
 11688  11DC  2A1D               	goto	i1l5502
 11689  11DD                     i1l5466:	
 11690                           
 11691                           ;PS_2.c: 379: {
 11692                           ;PS_2.c: 380: if(Right_Shift_Key == 0 && Left_Shift_Key == 0)
 11693  11DD  086D               	movf	_Right_Shift_Key^(0+384),w
 11694  11DE  1D03               	btfss	3,2
 11695  11DF  2A74               	goto	i1l5540
 11696  11E0  0864               	movf	_Left_Shift_Key^(0+384),w
 11697  11E1  1D03               	btfss	3,2
 11698  11E2  2A74               	goto	i1l5540
 11699                           
 11700                           ;PS_2.c: 381: {
 11701                           ;PS_2.c: 382: if(!Send_PS2(0xED))
 11702  11E3  30ED               	movlw	237
 11703  11E4  254B  3190         	fcall	i1_Send_PS2
 11704  11E6  3A00               	xorlw	0
 11705  11E7  1D03               	skipz
 11706  11E8  29F1               	goto	i1l5476
 11707                           
 11708                           ;PS_2.c: 383: {
 11709                           ;PS_2.c: 384: if(!Send_PS2(0x00))
 11710  11E9  3000               	movlw	0
 11711  11EA  254B  3190         	fcall	i1_Send_PS2
 11712  11EC  3A00               	xorlw	0
 11713  11ED  1D03               	skipz
 11714  11EE  29F1               	goto	i1l5476
 11715                           
 11716                           ;PS_2.c: 385: {
 11717                           ;PS_2.c: 386: Shift_Key = 0;
 11718  11EF  0023               	movlb	3	; select bank3
 11719  11F0  01EF               	clrf	_Shift_Key^(0+384)
 11720  11F1                     i1l5476:	
 11721                           
 11722                           ;PS_2.c: 387: }
 11723                           ;PS_2.c: 388: }
 11724                           ;PS_2.c: 389: if(Caps_Lock)
 11725  11F1  0023               	movlb	3	; select bank3
 11726  11F2  0860               	movf	_Caps_Lock^(0+384),w
 11727  11F3  1903               	btfsc	3,2
 11728  11F4  2A09               	goto	i1l5490
 11729                           
 11730                           ;PS_2.c: 390: {
 11731                           ;PS_2.c: 391: CapsCount=0;
 11732  11F5  01DF               	clrf	_CapsCount^(0+384)
 11733  11F6                     i1l5488:	
 11734                           ;PS_2.c: 392: while(CapsCount<10)
 11735                           
 11736  11F6  300A               	movlw	10
 11737  11F7  025F               	subwf	_CapsCount^(0+384),w
 11738  11F8  1803               	btfsc	3,0
 11739  11F9  2A74               	goto	i1l5540
 11740                           
 11741                           ;PS_2.c: 393: {
 11742                           ;PS_2.c: 394: if(!Send_PS2(0xED))
 11743  11FA  30ED               	movlw	237
 11744  11FB  254B  3190         	fcall	i1_Send_PS2
 11745  11FD  3A00               	xorlw	0
 11746  11FE  1D03               	skipz
 11747  11FF  2A06               	goto	i1l5486
 11748                           
 11749                           ;PS_2.c: 395: {
 11750                           ;PS_2.c: 396: if(!Send_PS2(0x04))
 11751  1200  3004               	movlw	4
 11752  1201  254B  3190         	fcall	i1_Send_PS2
 11753  1203  3A00               	xorlw	0
 11754  1204  1903               	btfsc	3,2
 11755  1205  2A74               	goto	i1l5540
 11756  1206                     i1l5486:	
 11757                           
 11758                           ;PS_2.c: 399: }
 11759                           ;PS_2.c: 400: }
 11760                           ;PS_2.c: 401: CapsCount++;
 11761  1206  0023               	movlb	3	; select bank3
 11762  1207  0ADF               	incf	_CapsCount^(0+384),f
 11763  1208  29F6               	goto	i1l5488
 11764  1209                     i1l5490:	
 11765                           
 11766                           ;PS_2.c: 404: else
 11767                           ;PS_2.c: 405: {
 11768                           ;PS_2.c: 406: CapsCount=0;
 11769  1209  01DF               	clrf	_CapsCount^(0+384)
 11770  120A                     i1l5500:	
 11771                           ;PS_2.c: 407: while(CapsCount<10)
 11772                           
 11773  120A  300A               	movlw	10
 11774  120B  025F               	subwf	_CapsCount^(0+384),w
 11775  120C  1803               	btfsc	3,0
 11776  120D  2A74               	goto	i1l5540
 11777                           
 11778                           ;PS_2.c: 408: {
 11779                           ;PS_2.c: 409: if(!Send_PS2(0xED))
 11780  120E  30ED               	movlw	237
 11781  120F  254B  3190         	fcall	i1_Send_PS2
 11782  1211  3A00               	xorlw	0
 11783  1212  1D03               	skipz
 11784  1213  2A1A               	goto	i1l5498
 11785                           
 11786                           ;PS_2.c: 410: {
 11787                           ;PS_2.c: 411: if(!Send_PS2(0x00))
 11788  1214  3000               	movlw	0
 11789  1215  254B  3190         	fcall	i1_Send_PS2
 11790  1217  3A00               	xorlw	0
 11791  1218  1903               	btfsc	3,2
 11792  1219  2A74               	goto	i1l5540
 11793  121A                     i1l5498:	
 11794                           
 11795                           ;PS_2.c: 414: }
 11796                           ;PS_2.c: 415: }
 11797                           ;PS_2.c: 416: CapsCount++;
 11798  121A  0023               	movlb	3	; select bank3
 11799  121B  0ADF               	incf	_CapsCount^(0+384),f
 11800  121C  2A0A               	goto	i1l5500
 11801  121D                     i1l5502:	
 11802                           
 11803                           ;PS_2.c: 421: else if(PS_2_Read_Data_Second == 0x58)
 11804  121D  3058               	movlw	88
 11805  121E  0659               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11806  121F  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11807  1220  1D03               	btfss	3,2
 11808  1221  2A74               	goto	i1l5540
 11809                           
 11810                           ;PS_2.c: 422: {
 11811                           ;PS_2.c: 423: Caps_Lock_Key = 0;
 11812  1222  0024               	movlb	4	; select bank4
 11813  1223  01A9               	clrf	_Caps_Lock_Key^(0+512)
 11814  1224  2A74               	goto	i1l5540
 11815  1225                     i1l5506:	
 11816                           
 11817                           ;PS_2.c: 426: else if(PS_2_Read_Data_First == 0xE0)
 11818  1225  30E0               	movlw	224
 11819  1226  0657               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11820  1227  0458               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11821  1228  1D03               	btfss	3,2
 11822  1229  2A74               	goto	i1l5540
 11823                           
 11824                           ;PS_2.c: 427: {
 11825                           ;PS_2.c: 429: if(PS_2_Read_Data_Second == 0x11 )
 11826  122A  3011               	movlw	17
 11827  122B  0659               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11828  122C  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11829  122D  1D03               	btfss	3,2
 11830  122E  2A32               	goto	i1l5512
 11831                           
 11832                           ;PS_2.c: 430: {
 11833                           ;PS_2.c: 431: LALT = 1;
 11834  122F  01E2               	clrf	_LALT^(0+384)
 11835  1230  0AE2               	incf	_LALT^(0+384),f
 11836                           
 11837                           ;PS_2.c: 432: }
 11838  1231  2A41               	goto	i1l5520
 11839  1232                     i1l5512:	
 11840                           
 11841                           ;PS_2.c: 433: else if(PS_2_Read_Data_Second == 0x14 )
 11842  1232  3014               	movlw	20
 11843  1233  0659               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11844  1234  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11845  1235  1D03               	btfss	3,2
 11846  1236  2A3A               	goto	i1l5516
 11847                           
 11848                           ;PS_2.c: 434: {
 11849                           ;PS_2.c: 435: LControl = 1;
 11850  1237  01E3               	clrf	_LControl^(0+384)
 11851  1238  0AE3               	incf	_LControl^(0+384),f
 11852                           
 11853                           ;PS_2.c: 436: }
 11854  1239  2A41               	goto	i1l5520
 11855  123A                     i1l5516:	
 11856                           
 11857                           ;PS_2.c: 437: else if(PS_2_Read_Data_Second == 0x71 )
 11858  123A  3071               	movlw	113
 11859  123B  0659               	xorwf	_PS_2_Read_Data_Second^(0+384),w
 11860  123C  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11861  123D  1D03               	btfss	3,2
 11862  123E  2A41               	goto	i1l5520
 11863                           
 11864                           ;PS_2.c: 438: {
 11865                           ;PS_2.c: 439: Delete = 1;
 11866  123F  01E1               	clrf	_Delete^(0+384)
 11867  1240  0AE1               	incf	_Delete^(0+384),f
 11868  1241                     i1l5520:	
 11869                           
 11870                           ;PS_2.c: 440: }
 11871                           ;PS_2.c: 441: if(((RControl || LControl) + (LALT || RALT) + Delete) != 3)
 11872  1241  0022               	movlb	2	; select bank2
 11873  1242  01E2               	clrf	_Process_PS2_ScanCode$856^(0+256)
 11874  1243  0AE2               	incf	_Process_PS2_ScanCode$856^(0+256),f
 11875  1244  01E3               	clrf	(_Process_PS2_ScanCode$856+1)^(0+256)
 11876  1245  0023               	movlb	3	; select bank3
 11877  1246  0862               	movf	_LALT^(0+384),w
 11878  1247  1D03               	btfss	3,2
 11879  1248  2A4F               	goto	i1l5528
 11880  1249  086A               	movf	_RALT^(0+384),w
 11881  124A  1D03               	btfss	3,2
 11882  124B  2A4F               	goto	i1l5528
 11883  124C  0022               	movlb	2	; select bank2
 11884  124D  01E2               	clrf	_Process_PS2_ScanCode$856^(0+256)
 11885  124E  01E3               	clrf	(_Process_PS2_ScanCode$856+1)^(0+256)
 11886  124F                     i1l5528:	
 11887  124F  0022               	movlb	2	; select bank2
 11888  1250  01E4               	clrf	_Process_PS2_ScanCode$857^(0+256)
 11889  1251  0AE4               	incf	_Process_PS2_ScanCode$857^(0+256),f
 11890  1252  01E5               	clrf	(_Process_PS2_ScanCode$857+1)^(0+256)
 11891  1253  0023               	movlb	3	; select bank3
 11892  1254  086B               	movf	_RControl^(0+384),w
 11893  1255  1D03               	btfss	3,2
 11894  1256  2A5D               	goto	i1l5536
 11895  1257  0863               	movf	_LControl^(0+384),w
 11896  1258  1D03               	btfss	3,2
 11897  1259  2A5D               	goto	i1l5536
 11898  125A  0022               	movlb	2	; select bank2
 11899  125B  01E4               	clrf	_Process_PS2_ScanCode$857^(0+256)
 11900  125C  01E5               	clrf	(_Process_PS2_ScanCode$857+1)^(0+256)
 11901  125D                     i1l5536:	
 11902  125D  0023               	movlb	3	; select bank3
 11903  125E  0861               	movf	_Delete^(0+384),w
 11904  125F  0022               	movlb	2	; select bank2
 11905  1260  0764               	addwf	_Process_PS2_ScanCode$857^(0+256),w
 11906  1261  00A0               	movwf	??_Process_PS2_ScanCode^(0+256)
 11907  1262  0865               	movf	(_Process_PS2_ScanCode$857+1)^(0+256),w
 11908  1263  1803               	skipnc
 11909  1264  0A65               	incf	(_Process_PS2_ScanCode$857+1)^(0+256),w
 11910  1265  00A1               	movwf	(??_Process_PS2_ScanCode^(0+256)+1)
 11911  1266  0862               	movf	_Process_PS2_ScanCode$856^(0+256),w
 11912  1267  0720               	addwf	??_Process_PS2_ScanCode^(0+256),w
 11913  1268  00A2               	movwf	(??_Process_PS2_ScanCode+2)^(0+256)
 11914  1269  0863               	movf	(_Process_PS2_ScanCode$856+1)^(0+256),w
 11915  126A  27A2  3190         	fcall	PL66	;call to abstracted procedure
 11916  126C  1903               	btfsc	3,2
 11917  126D  2A74               	goto	i1l5540
 11918                           
 11919                           ;PS_2.c: 442: {
 11920                           ;PS_2.c: 444: temp = Decode_Scan_Code_FunctionE0(PS_2_Read_Data_Second);
 11921  126E  0023               	movlb	3	; select bank3
 11922  126F  0859               	movf	_PS_2_Read_Data_Second^(0+384),w
 11923  1270  2733  3190         	fcall	_Decode_Scan_Code_FunctionE0
 11924  1272  0022               	movlb	2	; select bank2
 11925  1273  00EB               	movwf	Process_PS2_ScanCode@temp^(0+256)
 11926  1274                     i1l5540:	
 11927                           
 11928                           ;PS_2.c: 445: }
 11929                           ;PS_2.c: 446: }
 11930                           ;PS_2.c: 447: }
 11931                           ;PS_2.c: 448: if(PS_2_Read_Data_First != 0 && PS_2_Read_Data_Second == 0 &&
 11932                           ;PS_2.c: 449: PS_2_Read_Data_Third == 0)
 11933  1274  0023               	movlb	3	; select bank3
 11934  1275  0857               	movf	_PS_2_Read_Data_First^(0+384),w
 11935  1276  0458               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11936  1277  1903               	btfsc	3,2
 11937  1278  2B84               	goto	i1l5686
 11938  1279  0859               	movf	_PS_2_Read_Data_Second^(0+384),w
 11939  127A  045A               	iorwf	(_PS_2_Read_Data_Second+1)^(0+384),w
 11940  127B  1D03               	btfss	3,2
 11941  127C  2B84               	goto	i1l5686
 11942  127D  085B               	movf	_PS_2_Read_Data_Third^(0+384),w
 11943  127E  045C               	iorwf	(_PS_2_Read_Data_Third+1)^(0+384),w
 11944  127F  1D03               	btfss	3,2
 11945  1280  2B84               	goto	i1l5686
 11946                           
 11947                           ;PS_2.c: 450: {
 11948                           ;PS_2.c: 452: if(PS_2_Read_Data_First == 0x12)
 11949  1281  3012               	movlw	18
 11950  1282  0657               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11951  1283  0458               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11952  1284  1D03               	btfss	3,2
 11953  1285  2A89               	goto	i1l5550
 11954                           
 11955                           ;PS_2.c: 453: {
 11956                           ;PS_2.c: 454: Right_Shift_Key = 1;
 11957  1286  01ED               	clrf	_Right_Shift_Key^(0+384)
 11958  1287  0AED               	incf	_Right_Shift_Key^(0+384),f
 11959                           
 11960                           ;PS_2.c: 455: }
 11961  1288  2A90               	goto	i1l5554
 11962  1289                     i1l5550:	
 11963                           
 11964                           ;PS_2.c: 456: else if(PS_2_Read_Data_First == 0x59)
 11965  1289  3059               	movlw	89
 11966  128A  0657               	xorwf	_PS_2_Read_Data_First^(0+384),w
 11967  128B  0458               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 11968  128C  1D03               	btfss	3,2
 11969  128D  2A90               	goto	i1l5554
 11970                           
 11971                           ;PS_2.c: 457: {
 11972                           ;PS_2.c: 458: Left_Shift_Key = 1;
 11973  128E  01E4               	clrf	_Left_Shift_Key^(0+384)
 11974  128F  0AE4               	incf	_Left_Shift_Key^(0+384),f
 11975  1290                     i1l5554:	
 11976                           
 11977                           ;PS_2.c: 459: }
 11978                           ;PS_2.c: 460: if((Right_Shift_Key == 1 && Right_Shift_Key_old == 0) || (Left_Shift_Key =
      +                          = 1 && Left_Shift_Key_old == 0))
 11979  1290  0B6D               	decfsz	_Right_Shift_Key^(0+384),w
 11980  1291  2A95               	goto	i1l5558
 11981  1292  086E               	movf	_Right_Shift_Key_old^(0+384),w
 11982  1293  1903               	btfsc	3,2
 11983  1294  2A9B               	goto	i1l5562
 11984  1295                     i1l5558:	
 11985  1295  0B64               	decfsz	_Left_Shift_Key^(0+384),w
 11986  1296  2AD1               	goto	i1l5590
 11987  1297  0024               	movlb	4	; select bank4
 11988  1298  082B               	movf	_Left_Shift_Key_old^(0+512),w
 11989  1299  1D03               	btfss	3,2
 11990  129A  2AD1               	goto	i1l5590
 11991  129B                     i1l5562:	
 11992                           
 11993                           ;PS_2.c: 461: {
 11994                           ;PS_2.c: 463: if(!Send_PS2(0xED))
 11995  129B  30ED               	movlw	237
 11996  129C  254B  3190         	fcall	i1_Send_PS2
 11997  129E  3A00               	xorlw	0
 11998  129F  1D03               	skipz
 11999  12A0  2AD1               	goto	i1l5590
 12000                           
 12001                           ;PS_2.c: 464: {
 12002                           ;PS_2.c: 465: if(Caps_Lock)
 12003  12A1  0023               	movlb	3	; select bank3
 12004  12A2  0860               	movf	_Caps_Lock^(0+384),w
 12005  12A3  1903               	btfsc	3,2
 12006  12A4  2ABD               	goto	i1l5578
 12007                           
 12008                           ;PS_2.c: 466: {
 12009                           ;PS_2.c: 467: CapsCount=0;
 12010  12A5  01DF               	clrf	_CapsCount^(0+384)
 12011  12A6                     i1l5576:	
 12012                           ;PS_2.c: 468: while(CapsCount<10)
 12013                           
 12014  12A6  300A               	movlw	10
 12015  12A7  025F               	subwf	_CapsCount^(0+384),w
 12016  12A8  1803               	btfsc	3,0
 12017  12A9  2AD1               	goto	i1l5590
 12018                           
 12019                           ;PS_2.c: 469: {
 12020                           ;PS_2.c: 470: if(!Send_PS2(0xED))
 12021  12AA  30ED               	movlw	237
 12022  12AB  254B  3190         	fcall	i1_Send_PS2
 12023  12AD  3A00               	xorlw	0
 12024  12AE  1D03               	skipz
 12025  12AF  2ABA               	goto	i1l5574
 12026                           
 12027                           ;PS_2.c: 471: {
 12028                           ;PS_2.c: 472: if(!Send_PS2(0x05))
 12029  12B0  3005               	movlw	5
 12030  12B1  254B  3190         	fcall	i1_Send_PS2
 12031  12B3  3A00               	xorlw	0
 12032  12B4  1D03               	skipz
 12033  12B5  2ABA               	goto	i1l5574
 12034  12B6                     i1l5572:	
 12035                           
 12036                           ;PS_2.c: 473: {
 12037                           ;PS_2.c: 474: Shift_Key = 1;
 12038  12B6  0023               	movlb	3	; select bank3
 12039  12B7  01EF               	clrf	_Shift_Key^(0+384)
 12040  12B8  0AEF               	incf	_Shift_Key^(0+384),f
 12041                           
 12042                           ;PS_2.c: 475: break;
 12043  12B9  2AD1               	goto	i1l5590
 12044  12BA                     i1l5574:	
 12045                           
 12046                           ;PS_2.c: 476: }
 12047                           ;PS_2.c: 477: }
 12048                           ;PS_2.c: 478: CapsCount++;
 12049  12BA  0023               	movlb	3	; select bank3
 12050  12BB  0ADF               	incf	_CapsCount^(0+384),f
 12051  12BC  2AA6               	goto	i1l5576
 12052  12BD                     i1l5578:	
 12053                           
 12054                           ;PS_2.c: 481: else
 12055                           ;PS_2.c: 482: {
 12056                           ;PS_2.c: 483: CapsCount=0;
 12057  12BD  01DF               	clrf	_CapsCount^(0+384)
 12058  12BE                     i1l5588:	
 12059                           ;PS_2.c: 484: while(CapsCount<10)
 12060                           
 12061  12BE  300A               	movlw	10
 12062  12BF  025F               	subwf	_CapsCount^(0+384),w
 12063  12C0  1803               	btfsc	3,0
 12064  12C1  2AD1               	goto	i1l5590
 12065                           
 12066                           ;PS_2.c: 485: {
 12067                           ;PS_2.c: 486: if(!Send_PS2(0xED))
 12068  12C2  30ED               	movlw	237
 12069  12C3  254B  3190         	fcall	i1_Send_PS2
 12070  12C5  3A00               	xorlw	0
 12071  12C6  1D03               	skipz
 12072  12C7  2ACE               	goto	i1l5586
 12073                           
 12074                           ;PS_2.c: 487: {
 12075                           ;PS_2.c: 488: if(!Send_PS2(0x01))
 12076  12C8  3001               	movlw	1
 12077  12C9  254B  3190         	fcall	i1_Send_PS2
 12078  12CB  3A00               	xorlw	0
 12079  12CC  1903               	btfsc	3,2
 12080  12CD  2AB6               	goto	i1l5572
 12081  12CE                     i1l5586:	
 12082                           
 12083                           ;PS_2.c: 492: }
 12084                           ;PS_2.c: 493: }
 12085                           ;PS_2.c: 494: CapsCount++;
 12086  12CE  0023               	movlb	3	; select bank3
 12087  12CF  0ADF               	incf	_CapsCount^(0+384),f
 12088  12D0  2ABE               	goto	i1l5588
 12089  12D1                     i1l5590:	
 12090                           
 12091                           ;PS_2.c: 495: }
 12092                           ;PS_2.c: 496: }
 12093                           ;PS_2.c: 497: }
 12094                           ;PS_2.c: 498: }
 12095                           ;PS_2.c: 499: if(PS_2_Read_Data_First == 0x14 )
 12096  12D1  3014               	movlw	20
 12097  12D2  0023               	movlb	3	; select bank3
 12098  12D3  0657               	xorwf	_PS_2_Read_Data_First^(0+384),w
 12099  12D4  0458               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 12100  12D5  1D03               	btfss	3,2
 12101  12D6  2ADA               	goto	i1l5594
 12102                           
 12103                           ;PS_2.c: 500: {
 12104                           ;PS_2.c: 501: RControl = 1;
 12105  12D7  01EB               	clrf	_RControl^(0+384)
 12106  12D8  0AEB               	incf	_RControl^(0+384),f
 12107                           
 12108                           ;PS_2.c: 502: }
 12109  12D9  2B7A               	goto	i1l754
 12110  12DA                     i1l5594:	
 12111                           
 12112                           ;PS_2.c: 503: else if(PS_2_Read_Data_First == 0x11 )
 12113  12DA  3011               	movlw	17
 12114  12DB  0657               	xorwf	_PS_2_Read_Data_First^(0+384),w
 12115  12DC  0458               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 12116  12DD  1D03               	btfss	3,2
 12117  12DE  2AE2               	goto	i1l5598
 12118                           
 12119                           ;PS_2.c: 504: {
 12120                           ;PS_2.c: 505: RALT = 1;
 12121  12DF  01EA               	clrf	_RALT^(0+384)
 12122  12E0  0AEA               	incf	_RALT^(0+384),f
 12123                           
 12124                           ;PS_2.c: 506: }
 12125  12E1  2B7A               	goto	i1l754
 12126  12E2                     i1l5598:	
 12127                           
 12128                           ;PS_2.c: 508: {
 12129                           ;PS_2.c: 509: ECHO = 1;
 12130  12E2  30EE               	movlw	238
 12131  12E3  0657               	xorwf	_PS_2_Read_Data_First^(0+384),w
 12132  12E4  0458               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 12133  12E5  1903               	btfsc	3,2
 12134  12E6  2B7A               	goto	i1l754
 12135                           
 12136                           ;PS_2.c: 511: else if(PS_2_Read_Data_First == 0x58)
 12137                           
 12138                           ;PS_2.c: 510: }
 12139  12E7  3058               	movlw	88
 12140  12E8  0657               	xorwf	_PS_2_Read_Data_First^(0+384),w
 12141  12E9  0458               	iorwf	(_PS_2_Read_Data_First+1)^(0+384),w
 12142  12EA  1D03               	btfss	3,2
 12143  12EB  2B53               	goto	i1l5662
 12144                           
 12145                           ;PS_2.c: 512: {
 12146                           ;PS_2.c: 513: Caps_Lock_Key = 1;
 12147  12EC  0024               	movlb	4	; select bank4
 12148  12ED  01A9               	clrf	_Caps_Lock_Key^(0+512)
 12149  12EE  0AA9               	incf	_Caps_Lock_Key^(0+512),f
 12150                           
 12151                           ;PS_2.c: 514: if(Caps_Lock_Key_old == 0)
 12152  12EF  082A               	movf	_Caps_Lock_Key_old^(0+512),w
 12153  12F0  1D03               	btfss	3,2
 12154  12F1  2B7A               	goto	i1l754
 12155                           
 12156                           ;PS_2.c: 515: {
 12157                           ;PS_2.c: 516: if(Caps_Lock)
 12158  12F2  0023               	movlb	3	; select bank3
 12159  12F3  0860               	movf	_Caps_Lock^(0+384),w
 12160  12F4  1903               	btfsc	3,2
 12161  12F5  2B24               	goto	i1l5636
 12162                           
 12163                           ;PS_2.c: 517: {
 12164                           ;PS_2.c: 518: if(Shift_Key)
 12165  12F6  086F               	movf	_Shift_Key^(0+384),w
 12166  12F7  1903               	btfsc	3,2
 12167  12F8  2B10               	goto	i1l5624
 12168                           
 12169                           ;PS_2.c: 519: {
 12170                           ;PS_2.c: 520: CapsCount=0;
 12171  12F9  01DF               	clrf	_CapsCount^(0+384)
 12172  12FA                     i1l5622:	
 12173                           ;PS_2.c: 521: while(CapsCount<10)
 12174                           
 12175  12FA  300A               	movlw	10
 12176  12FB  025F               	subwf	_CapsCount^(0+384),w
 12177  12FC  1803               	btfsc	3,0
 12178  12FD  2B7A               	goto	i1l754
 12179                           
 12180                           ;PS_2.c: 522: {
 12181                           ;PS_2.c: 523: if(!Send_PS2(0xED))
 12182  12FE  30ED               	movlw	237
 12183  12FF  254B  3190         	fcall	i1_Send_PS2
 12184  1301  3A00               	xorlw	0
 12185  1302  1D03               	skipz
 12186  1303  2B0D               	goto	i1l5620
 12187                           
 12188                           ;PS_2.c: 524: {
 12189                           ;PS_2.c: 525: if(!Send_PS2(0x01))
 12190  1304  3001               	movlw	1
 12191  1305  254B  3190         	fcall	i1_Send_PS2
 12192  1307  3A00               	xorlw	0
 12193  1308  1D03               	skipz
 12194  1309  2B0D               	goto	i1l5620
 12195  130A                     i1l5618:	
 12196                           
 12197                           ;PS_2.c: 526: {
 12198                           ;PS_2.c: 527: Caps_Lock =0;
 12199  130A  0023               	movlb	3	; select bank3
 12200  130B  01E0               	clrf	_Caps_Lock^(0+384)
 12201                           
 12202                           ;PS_2.c: 528: break;
 12203  130C  2B7A               	goto	i1l754
 12204  130D                     i1l5620:	
 12205                           
 12206                           ;PS_2.c: 529: }
 12207                           ;PS_2.c: 530: }
 12208                           ;PS_2.c: 531: CapsCount++;
 12209  130D  0023               	movlb	3	; select bank3
 12210  130E  0ADF               	incf	_CapsCount^(0+384),f
 12211  130F  2AFA               	goto	i1l5622
 12212  1310                     i1l5624:	
 12213                           
 12214                           ;PS_2.c: 534: else
 12215                           ;PS_2.c: 535: {
 12216                           ;PS_2.c: 536: CapsCount=0;
 12217  1310  01DF               	clrf	_CapsCount^(0+384)
 12218  1311                     i1l5634:	
 12219                           ;PS_2.c: 537: while(CapsCount<10)
 12220                           
 12221  1311  300A               	movlw	10
 12222  1312  025F               	subwf	_CapsCount^(0+384),w
 12223  1313  1803               	btfsc	3,0
 12224  1314  2B7A               	goto	i1l754
 12225                           
 12226                           ;PS_2.c: 538: {
 12227                           ;PS_2.c: 539: if(!Send_PS2(0xED))
 12228  1315  30ED               	movlw	237
 12229  1316  254B  3190         	fcall	i1_Send_PS2
 12230  1318  3A00               	xorlw	0
 12231  1319  1D03               	skipz
 12232  131A  2B21               	goto	i1l5632
 12233                           
 12234                           ;PS_2.c: 540: {
 12235                           ;PS_2.c: 541: if(!Send_PS2(0x00))
 12236  131B  3000               	movlw	0
 12237  131C  254B  3190         	fcall	i1_Send_PS2
 12238  131E  3A00               	xorlw	0
 12239  131F  1903               	btfsc	3,2
 12240  1320  2B0A               	goto	i1l5618
 12241  1321                     i1l5632:	
 12242                           
 12243                           ;PS_2.c: 545: }
 12244                           ;PS_2.c: 546: }
 12245                           ;PS_2.c: 547: CapsCount++;
 12246  1321  0023               	movlb	3	; select bank3
 12247  1322  0ADF               	incf	_CapsCount^(0+384),f
 12248  1323  2B11               	goto	i1l5634
 12249  1324                     i1l5636:	
 12250                           
 12251                           ;PS_2.c: 551: else
 12252                           ;PS_2.c: 552: {
 12253                           ;PS_2.c: 553: if(Shift_Key)
 12254  1324  086F               	movf	_Shift_Key^(0+384),w
 12255  1325  1903               	btfsc	3,2
 12256  1326  2B3F               	goto	i1l5650
 12257                           
 12258                           ;PS_2.c: 554: {
 12259                           ;PS_2.c: 555: CapsCount=0;
 12260  1327  01DF               	clrf	_CapsCount^(0+384)
 12261  1328                     i1l5648:	
 12262                           ;PS_2.c: 556: while(CapsCount<10)
 12263                           
 12264  1328  300A               	movlw	10
 12265  1329  025F               	subwf	_CapsCount^(0+384),w
 12266  132A  1803               	btfsc	3,0
 12267  132B  2B7A               	goto	i1l754
 12268                           
 12269                           ;PS_2.c: 557: {
 12270                           ;PS_2.c: 558: if(!Send_PS2(0xED))
 12271  132C  30ED               	movlw	237
 12272  132D  254B  3190         	fcall	i1_Send_PS2
 12273  132F  3A00               	xorlw	0
 12274  1330  1D03               	skipz
 12275  1331  2B3C               	goto	i1l5646
 12276                           
 12277                           ;PS_2.c: 559: {
 12278                           ;PS_2.c: 560: if(!Send_PS2(0x05))
 12279  1332  3005               	movlw	5
 12280  1333  254B  3190         	fcall	i1_Send_PS2
 12281  1335  3A00               	xorlw	0
 12282  1336  1D03               	skipz
 12283  1337  2B3C               	goto	i1l5646
 12284  1338                     i1l5644:	
 12285                           
 12286                           ;PS_2.c: 561: {
 12287                           ;PS_2.c: 562: Caps_Lock =1;
 12288  1338  0023               	movlb	3	; select bank3
 12289  1339  01E0               	clrf	_Caps_Lock^(0+384)
 12290  133A  0AE0               	incf	_Caps_Lock^(0+384),f
 12291                           
 12292                           ;PS_2.c: 563: break;
 12293  133B  2B7A               	goto	i1l754
 12294  133C                     i1l5646:	
 12295                           
 12296                           ;PS_2.c: 564: }
 12297                           ;PS_2.c: 565: }
 12298                           ;PS_2.c: 566: CapsCount++;
 12299  133C  0023               	movlb	3	; select bank3
 12300  133D  0ADF               	incf	_CapsCount^(0+384),f
 12301  133E  2B28               	goto	i1l5648
 12302  133F                     i1l5650:	
 12303                           
 12304                           ;PS_2.c: 569: else
 12305                           ;PS_2.c: 570: {
 12306                           ;PS_2.c: 571: CapsCount=0;
 12307  133F  01DF               	clrf	_CapsCount^(0+384)
 12308  1340                     i1l5660:	
 12309                           ;PS_2.c: 572: while(CapsCount<10)
 12310                           
 12311  1340  300A               	movlw	10
 12312  1341  025F               	subwf	_CapsCount^(0+384),w
 12313  1342  1803               	btfsc	3,0
 12314  1343  2B7A               	goto	i1l754
 12315                           
 12316                           ;PS_2.c: 573: {
 12317                           ;PS_2.c: 574: if(!Send_PS2(0xED))
 12318  1344  30ED               	movlw	237
 12319  1345  254B  3190         	fcall	i1_Send_PS2
 12320  1347  3A00               	xorlw	0
 12321  1348  1D03               	skipz
 12322  1349  2B50               	goto	i1l5658
 12323                           
 12324                           ;PS_2.c: 575: {
 12325                           ;PS_2.c: 576: if(!Send_PS2(0x04))
 12326  134A  3004               	movlw	4
 12327  134B  254B  3190         	fcall	i1_Send_PS2
 12328  134D  3A00               	xorlw	0
 12329  134E  1903               	btfsc	3,2
 12330  134F  2B38               	goto	i1l5644
 12331  1350                     i1l5658:	
 12332                           
 12333                           ;PS_2.c: 580: }
 12334                           ;PS_2.c: 581: }
 12335                           ;PS_2.c: 582: CapsCount++;
 12336  1350  0023               	movlb	3	; select bank3
 12337  1351  0ADF               	incf	_CapsCount^(0+384),f
 12338  1352  2B40               	goto	i1l5660
 12339  1353                     i1l5662:	
 12340                           
 12341                           ;PS_2.c: 589: else
 12342                           ;PS_2.c: 590: {
 12343                           ;PS_2.c: 591: if(Shift_Key ==1)
 12344  1353  0B6F               	decfsz	_Shift_Key^(0+384),w
 12345  1354  2B68               	goto	i1l5674
 12346                           
 12347                           ;PS_2.c: 592: {
 12348                           ;PS_2.c: 594: temp = Decode_Scan_Code_Shift(PS_2_Read_Data_First);
 12349  1355  0857               	movf	_PS_2_Read_Data_First^(0+384),w
 12350  1356  273F  3190         	fcall	_Decode_Scan_Code_Shift
 12351                           
 12352                           ;PS_2.c: 595: if(Caps_Lock)
 12353  1358  27A8  3190         	fcall	PL86	;call to abstracted procedure
 12354  135A  1903               	btfsc	3,2
 12355  135B  2B7A               	goto	i1l754
 12356                           
 12357                           ;PS_2.c: 596: {
 12358                           ;PS_2.c: 598: if(temp >= 'A' && temp <= 'Z')
 12359  135C  3041               	movlw	65
 12360  135D  0022               	movlb	2	; select bank2
 12361  135E  026B               	subwf	Process_PS2_ScanCode@temp^(0+256),w
 12362  135F  1C03               	skipc
 12363  1360  2B7A               	goto	i1l754
 12364  1361  305B               	movlw	91
 12365  1362  026B               	subwf	Process_PS2_ScanCode@temp^(0+256),w
 12366  1363  1803               	skipnc
 12367  1364  2B7A               	goto	i1l754
 12368                           
 12369                           ;PS_2.c: 599: {
 12370                           ;PS_2.c: 600: temp += 32;
 12371  1365  3020               	movlw	32
 12372  1366  07EB               	addwf	Process_PS2_ScanCode@temp^(0+256),f
 12373  1367  2B7A               	goto	i1l754
 12374  1368                     i1l5674:	
 12375                           
 12376                           ;PS_2.c: 604: else
 12377                           ;PS_2.c: 605: {
 12378                           ;PS_2.c: 606: temp = Decode_Scan_Code(PS_2_Read_Data_First);
 12379  1368  0857               	movf	_PS_2_Read_Data_First^(0+384),w
 12380  1369  271D  3190         	fcall	_Decode_Scan_Code
 12381                           
 12382                           ;PS_2.c: 607: if(Caps_Lock)
 12383  136B  27A8  3190         	fcall	PL86	;call to abstracted procedure
 12384  136D  1903               	btfsc	3,2
 12385  136E  2B7A               	goto	i1l754
 12386                           
 12387                           ;PS_2.c: 608: {
 12388                           ;PS_2.c: 610: if(temp >= 'a' && temp <= 'z')
 12389  136F  3061               	movlw	97
 12390  1370  0022               	movlb	2	; select bank2
 12391  1371  026B               	subwf	Process_PS2_ScanCode@temp^(0+256),w
 12392  1372  1C03               	skipc
 12393  1373  2B7A               	goto	i1l754
 12394  1374  307B               	movlw	123
 12395  1375  026B               	subwf	Process_PS2_ScanCode@temp^(0+256),w
 12396  1376  1803               	skipnc
 12397  1377  2B7A               	goto	i1l754
 12398                           
 12399                           ;PS_2.c: 611: {
 12400                           ;PS_2.c: 612: temp -= 32;
 12401  1378  3020               	movlw	32
 12402  1379  02EB               	subwf	Process_PS2_ScanCode@temp^(0+256),f
 12403  137A                     i1l754:	
 12404                           
 12405                           ;PS_2.c: 613: }
 12406                           ;PS_2.c: 614: }
 12407                           ;PS_2.c: 615: }
 12408                           ;PS_2.c: 616: }
 12409                           ;PS_2.c: 617: if(!temp)
 12410  137A  0022               	movlb	2	; select bank2
 12411  137B  086B               	movf	Process_PS2_ScanCode@temp^(0+256),w
 12412  137C  1D03               	btfss	3,2
 12413  137D  2B84               	goto	i1l5686
 12414                           
 12415                           ;PS_2.c: 618: {
 12416                           ;PS_2.c: 620: temp = Decode_Scan_Code_Function(PS_2_Read_Data_First);
 12417  137E  0023               	movlb	3	; select bank3
 12418  137F  0857               	movf	_PS_2_Read_Data_First^(0+384),w
 12419  1380  2729  3190         	fcall	_Decode_Scan_Code_Function
 12420  1382  0022               	movlb	2	; select bank2
 12421  1383  00EB               	movwf	Process_PS2_ScanCode@temp^(0+256)
 12422  1384                     i1l5686:	
 12423                           
 12424                           ;PS_2.c: 621: }
 12425                           ;PS_2.c: 622: }
 12426                           ;PS_2.c: 624: if(((RControl || LControl) + (LALT || RALT) + Delete) == 3)
 12427  1384  0022               	movlb	2	; select bank2
 12428  1385  01E6               	clrf	_Process_PS2_ScanCode$858^(0+256)
 12429  1386  0AE6               	incf	_Process_PS2_ScanCode$858^(0+256),f
 12430  1387  01E7               	clrf	(_Process_PS2_ScanCode$858+1)^(0+256)
 12431  1388  0023               	movlb	3	; select bank3
 12432  1389  0862               	movf	_LALT^(0+384),w
 12433  138A  1D03               	btfss	3,2
 12434  138B  2B92               	goto	i1l5694
 12435  138C  086A               	movf	_RALT^(0+384),w
 12436  138D  1D03               	btfss	3,2
 12437  138E  2B92               	goto	i1l5694
 12438  138F  0022               	movlb	2	; select bank2
 12439  1390  01E6               	clrf	_Process_PS2_ScanCode$858^(0+256)
 12440  1391  01E7               	clrf	(_Process_PS2_ScanCode$858+1)^(0+256)
 12441  1392                     i1l5694:	
 12442  1392  0022               	movlb	2	; select bank2
 12443  1393  01E8               	clrf	_Process_PS2_ScanCode$859^(0+256)
 12444  1394  0AE8               	incf	_Process_PS2_ScanCode$859^(0+256),f
 12445  1395  01E9               	clrf	(_Process_PS2_ScanCode$859+1)^(0+256)
 12446  1396  0023               	movlb	3	; select bank3
 12447  1397  086B               	movf	_RControl^(0+384),w
 12448  1398  1D03               	btfss	3,2
 12449  1399  2BA0               	goto	i1l5702
 12450  139A  0863               	movf	_LControl^(0+384),w
 12451  139B  1D03               	btfss	3,2
 12452  139C  2BA0               	goto	i1l5702
 12453  139D  0022               	movlb	2	; select bank2
 12454  139E  01E8               	clrf	_Process_PS2_ScanCode$859^(0+256)
 12455  139F  01E9               	clrf	(_Process_PS2_ScanCode$859+1)^(0+256)
 12456  13A0                     i1l5702:	
 12457  13A0  0023               	movlb	3	; select bank3
 12458  13A1  0861               	movf	_Delete^(0+384),w
 12459  13A2  0022               	movlb	2	; select bank2
 12460  13A3  0768               	addwf	_Process_PS2_ScanCode$859^(0+256),w
 12461  13A4  00A0               	movwf	??_Process_PS2_ScanCode^(0+256)
 12462  13A5  0869               	movf	(_Process_PS2_ScanCode$859+1)^(0+256),w
 12463  13A6  1803               	skipnc
 12464  13A7  0A69               	incf	(_Process_PS2_ScanCode$859+1)^(0+256),w
 12465  13A8  00A1               	movwf	(??_Process_PS2_ScanCode^(0+256)+1)
 12466  13A9  0866               	movf	_Process_PS2_ScanCode$858^(0+256),w
 12467  13AA  0720               	addwf	??_Process_PS2_ScanCode^(0+256),w
 12468  13AB  00A2               	movwf	(??_Process_PS2_ScanCode+2)^(0+256)
 12469  13AC  0867               	movf	(_Process_PS2_ScanCode$858+1)^(0+256),w
 12470  13AD  27A2  3190         	fcall	PL66	;call to abstracted procedure
 12471  13AF  1D03               	btfss	3,2
 12472  13B0  2BFA               	goto	i1l5746
 12473                           
 12474                           ;PS_2.c: 625: {
 12475                           ;PS_2.c: 627: UARTstringWAIT("\r\n");
 12476  13B1  278B  3190         	fcall	PL42	;call to abstracted procedure
 12477  13B3  2623  3190         	fcall	i1_UARTstringWAIT
 12478                           
 12479                           ;PS_2.c: 628: delayUS(15000);
 12480  13B5  2760  3190         	fcall	PL8	;call to abstracted procedure
 12481  13B7  2699  3190         	fcall	i1_delayUS
 12482                           
 12483                           ;PS_2.c: 629: if(!BAUDMODE)
 12484  13B9  0023               	movlb	3	; select bank3
 12485  13BA  085E               	movf	_BAUDMODE^(0+384),w
 12486  13BB  1D03               	btfss	3,2
 12487  13BC  2BD4               	goto	i1l5722
 12488  13BD  30ED               	movlw	low (STR_14| (0+32768))
 12489                           
 12490                           ;PS_2.c: 630: {
 12491                           ;PS_2.c: 631: BaudTyped =0;
 12492  13BE  01D3               	clrf	_BaudTyped^(0+384)
 12493  13BF  01D4               	clrf	(_BaudTyped+1)^(0+384)
 12494  13C0  01D5               	clrf	(_BaudTyped+2)^(0+384)
 12495  13C1  01D6               	clrf	(_BaudTyped+3)^(0+384)
 12496                           
 12497                           ;PS_2.c: 632: ParityTyped =0;
 12498  13C2  01E9               	clrf	_ParityTyped^(0+384)
 12499                           
 12500                           ;PS_2.c: 633: BAUDMODE = 1;
 12501  13C3  01DE               	clrf	_BAUDMODE^(0+384)
 12502  13C4  0ADE               	incf	_BAUDMODE^(0+384),f
 12503                           
 12504                           ;PS_2.c: 634: UARTstringWAIT("Enter Baud rate \r\n");
 12505  13C5  00FB               	movwf	i1UARTstringWAIT@data
 12506  13C6  309A               	movlw	high (STR_14| (0+32768))
 12507  13C7  00FC               	movwf	i1UARTstringWAIT@data+1
 12508  13C8  2623  3190         	fcall	i1_UARTstringWAIT
 12509                           
 12510                           ;PS_2.c: 635: delayUS(15000);
 12511  13CA  2760  3190         	fcall	PL8	;call to abstracted procedure
 12512  13CC  2699  3190         	fcall	i1_delayUS
 12513  13CE  303E               	movlw	62
 12514                           
 12515                           ;PS_2.c: 636: UARTchar('>' , 0, 0);
 12516  13CF  01F7               	clrf	i1UARTchar@override
 12517  13D0  01F8               	clrf	i1UARTchar@NinethBit_override_data
 12518  13D1  264C  3190         	fcall	i1_UARTchar
 12519                           
 12520                           ;PS_2.c: 638: }
 12521  13D3  2BF5               	goto	i1l5736
 12522  13D4                     i1l5722:	
 12523                           
 12524                           ;PS_2.c: 639: else
 12525                           ;PS_2.c: 640: {
 12526                           ;PS_2.c: 641: BaudTyped = 9600;
 12527  13D4  3025               	movlw	37
 12528  13D5  01D6               	clrf	(_BaudTyped+3)^(0+384)
 12529  13D6  01D5               	clrf	(_BaudTyped+2)^(0+384)
 12530  13D7  00D4               	movwf	(_BaudTyped+1)^(0+384)
 12531  13D8  3080               	movlw	128
 12532  13D9  00D3               	movwf	_BaudTyped^(0+384)
 12533                           
 12534                           ;PS_2.c: 642: UARTstringWAIT("Baud Reset to 9600");
 12535  13DA  3000               	movlw	low (STR_15| (0+32768))
 12536  13DB  00FB               	movwf	i1UARTstringWAIT@data
 12537  13DC  309B               	movlw	high (STR_15| (0+32768))
 12538  13DD  00FC               	movwf	i1UARTstringWAIT@data+1
 12539  13DE  2623  3190         	fcall	i1_UARTstringWAIT
 12540                           
 12541                           ;PS_2.c: 643: UARTstringWAIT(NoParityMSG);
 12542  13E0  3026               	movlw	low (_NoParityMSG| (0+32768))
 12543  13E1  00FB               	movwf	i1UARTstringWAIT@data
 12544  13E2  309A               	movlw	high (_NoParityMSG| (0+32768))
 12545  13E3  00FC               	movwf	i1UARTstringWAIT@data+1
 12546  13E4  2623  3190         	fcall	i1_UARTstringWAIT
 12547                           
 12548                           ;PS_2.c: 644: UARTstringWAIT("\r\n");
 12549  13E6  278B  3190         	fcall	PL42	;call to abstracted procedure
 12550  13E8  2623  3190         	fcall	i1_UARTstringWAIT
 12551                           
 12552                           ;PS_2.c: 645: delayUS(15000);
 12553  13EA  2760  3190         	fcall	PL8	;call to abstracted procedure
 12554  13EC  2699  3190         	fcall	i1_delayUS
 12555                           
 12556                           ;PS_2.c: 646: SetBaud(BaudTyped, 0);
 12557  13EE  2767  3190         	fcall	PL14	;call to abstracted procedure
 12558  13F0  01AC               	clrf	SetBaud@Parity^(0+128)
 12559  13F1  200D  3190         	fcall	_SetBaud
 12560                           
 12561                           ;PS_2.c: 647: BAUDMODE = 0;
 12562  13F3  0023               	movlb	3	; select bank3
 12563  13F4  01DE               	clrf	_BAUDMODE^(0+384)
 12564  13F5                     i1l5736:	
 12565                           
 12566                           ;PS_2.c: 648: }
 12567                           ;PS_2.c: 649: RControl =0;
 12568  13F5  01EB               	clrf	_RControl^(0+384)
 12569                           
 12570                           ;PS_2.c: 650: LControl =0;
 12571  13F6  01E3               	clrf	_LControl^(0+384)
 12572                           
 12573                           ;PS_2.c: 651: LALT =0;
 12574  13F7  01E2               	clrf	_LALT^(0+384)
 12575                           
 12576                           ;PS_2.c: 652: RALT =0;
 12577  13F8  01EA               	clrf	_RALT^(0+384)
 12578                           
 12579                           ;PS_2.c: 653: Delete =0;
 12580  13F9  01E1               	clrf	_Delete^(0+384)
 12581  13FA                     i1l5746:	
 12582                           
 12583                           ;PS_2.c: 654: }
 12584                           ;PS_2.c: 656: if(temp)
 12585  13FA  0022               	movlb	2	; select bank2
 12586  13FB  086B               	movf	Process_PS2_ScanCode@temp^(0+256),w
 12587  13FC  1903               	btfsc	3,2
 12588  13FD  2D31               	goto	i1l5852
 12589                           
 12590                           ;PS_2.c: 657: {
 12591                           ;PS_2.c: 659: if(temp == 0x01 && shortbreak == 0)
 12592  13FE  0B6B               	decfsz	Process_PS2_ScanCode@temp^(0+256),w
 12593  13FF  2C0A               	goto	i1l5754
 12594  1400  086A               	movf	Process_PS2_ScanCode@shortbreak^(0+256),w
 12595  1401  1D03               	btfss	3,2
 12596  1402  2C0A               	goto	i1l5754
 12597                           
 12598                           ;PS_2.c: 660: {
 12599                           ;PS_2.c: 662: UART_send_break_timed(100000);
 12600  1403  30A0               	movlw	160
 12601  1404  00FA               	movwf	UART_send_break_timed@US
 12602  1405  3086               	movlw	134
 12603  1406  00FB               	movwf	UART_send_break_timed@US+1
 12604  1407  27AD  3190         	fcall	_UART_send_break_timed
 12605                           
 12606                           ;PS_2.c: 663: }
 12607  1409  2D31               	goto	i1l5852
 12608  140A                     i1l5754:	
 12609                           
 12610                           ;PS_2.c: 664: else if(temp == 0x01 && shortbreak == 1)
 12611  140A  0B6B               	decfsz	Process_PS2_ScanCode@temp^(0+256),w
 12612  140B  2C13               	goto	i1l5762
 12613  140C  0B6A               	decfsz	Process_PS2_ScanCode@shortbreak^(0+256),w
 12614  140D  2C13               	goto	i1l5762
 12615                           
 12616                           ;PS_2.c: 665: {
 12617                           ;PS_2.c: 667: UART_send_break();
 12618  140E  2755  3190         	fcall	_UART_send_break
 12619                           
 12620                           ;PS_2.c: 668: shortbreak = 0;
 12621  1410  0022               	movlb	2	; select bank2
 12622  1411  01EA               	clrf	Process_PS2_ScanCode@shortbreak^(0+256)
 12623                           
 12624                           ;PS_2.c: 669: }
 12625  1412  2D31               	goto	i1l5852
 12626  1413                     i1l5762:	
 12627                           
 12628                           ;PS_2.c: 670: else
 12629                           ;PS_2.c: 671: {
 12630                           ;PS_2.c: 672: if(!BAUDMODE)
 12631  1413  0023               	movlb	3	; select bank3
 12632  1414  085E               	movf	_BAUDMODE^(0+384),w
 12633  1415  1D03               	btfss	3,2
 12634  1416  2C2E               	goto	i1l5774
 12635                           
 12636                           ;PS_2.c: 673: {
 12637                           ;PS_2.c: 674: if(temp == '\n')
 12638  1417  300A               	movlw	10
 12639  1418  0022               	movlb	2	; select bank2
 12640  1419  066B               	xorwf	Process_PS2_ScanCode@temp^(0+256),w
 12641  141A  1D03               	btfss	3,2
 12642  141B  2C1F               	goto	i1l5768
 12643                           
 12644                           ;PS_2.c: 675: {
 12645                           ;PS_2.c: 676: LineOverride = 1;
 12646  141C  0023               	movlb	3	; select bank3
 12647  141D  01E5               	clrf	_LineOverride^(0+384)
 12648  141E  0AE5               	incf	_LineOverride^(0+384),f
 12649  141F                     i1l5768:	
 12650                           
 12651                           ;PS_2.c: 677: }
 12652                           ;PS_2.c: 678: UARTchar(temp, 0, 0);
 12653  141F  2790  3190         	fcall	PL48	;call to abstracted procedure
 12654  1421  264C  3190         	fcall	i1_UARTchar
 12655                           
 12656                           ;PS_2.c: 679: if(temp == '\r')
 12657  1423  300D               	movlw	13
 12658  1424  0022               	movlb	2	; select bank2
 12659  1425  066B               	xorwf	Process_PS2_ScanCode@temp^(0+256),w
 12660  1426  1D03               	btfss	3,2
 12661  1427  2D31               	goto	i1l5852
 12662  1428  300A               	movlw	10
 12663                           
 12664                           ;PS_2.c: 680: {
 12665                           ;PS_2.c: 681: UARTchar('\n', 0, 0);
 12666  1429  01F7               	clrf	i1UARTchar@override
 12667  142A  01F8               	clrf	i1UARTchar@NinethBit_override_data
 12668  142B  264C  3190         	fcall	i1_UARTchar
 12669  142D  2D31               	goto	i1l5852
 12670  142E                     i1l5774:	
 12671                           
 12672                           ;PS_2.c: 685: else
 12673                           ;PS_2.c: 686: {
 12674                           ;PS_2.c: 687: if(ISNUMBER(temp))
 12675  142E  0022               	movlb	2	; select bank2
 12676  142F  086B               	movf	Process_PS2_ScanCode@temp^(0+256),w
 12677  1430  274B  3190         	fcall	_ISNUMBER
 12678  1432  3A00               	xorlw	0
 12679  1433  1903               	skipnz
 12680  1434  2C72               	goto	i1l5782
 12681                           
 12682                           ;PS_2.c: 688: {
 12683                           ;PS_2.c: 689: BaudTyped*=10;
 12684  1435  300A               	movlw	10
 12685  1436  00F0               	movwf	___lmul@multiplier
 12686  1437  01F1               	clrf	___lmul@multiplier+1
 12687  1438  01F2               	clrf	___lmul@multiplier+2
 12688  1439  01F3               	clrf	___lmul@multiplier+3
 12689  143A  0023               	movlb	3	; select bank3
 12690  143B  0856               	movf	(_BaudTyped+3)^(0+384),w
 12691  143C  00F7               	movwf	___lmul@multiplicand+3
 12692  143D  0855               	movf	(_BaudTyped+2)^(0+384),w
 12693  143E  00F6               	movwf	___lmul@multiplicand+2
 12694  143F  0854               	movf	(_BaudTyped+1)^(0+384),w
 12695  1440  00F5               	movwf	___lmul@multiplicand+1
 12696  1441  0853               	movf	_BaudTyped^(0+384),w
 12697  1442  00F4               	movwf	___lmul@multiplicand
 12698  1443  27C6  3190         	fcall	___lmul
 12699  1445  0873               	movf	?___lmul+3,w
 12700  1446  00D6               	movwf	(_BaudTyped+3)^(0+384)
 12701  1447  0872               	movf	?___lmul+2,w
 12702  1448  00D5               	movwf	(_BaudTyped+2)^(0+384)
 12703  1449  0871               	movf	?___lmul+1,w
 12704  144A  00D4               	movwf	(_BaudTyped+1)^(0+384)
 12705  144B  0870               	movf	?___lmul,w
 12706  144C  00D3               	movwf	_BaudTyped^(0+384)
 12707                           
 12708                           ;PS_2.c: 690: BaudTyped += temp - 48;
 12709  144D  0022               	movlb	2	; select bank2
 12710  144E  086B               	movf	Process_PS2_ScanCode@temp^(0+256),w
 12711  144F  3ED0               	addlw	208
 12712  1450  00A0               	movwf	??_Process_PS2_ScanCode^(0+256)
 12713  1451  30FF               	movlw	255
 12714  1452  1803               	skipnc
 12715  1453  3000               	movlw	0
 12716  1454  00A1               	movwf	(??_Process_PS2_ScanCode^(0+256)+1)
 12717  1455  0820               	movf	??_Process_PS2_ScanCode^(0+256),w
 12718  1456  00A2               	movwf	(??_Process_PS2_ScanCode+2)^(0+256)
 12719  1457  0821               	movf	(??_Process_PS2_ScanCode+1)^(0+256),w
 12720  1458  00A3               	movwf	((??_Process_PS2_ScanCode+2)^(0+256)+1)
 12721  1459  3000               	movlw	0
 12722  145A  1BA3               	btfsc	((??_Process_PS2_ScanCode+2)^(0+256)+1),7
 12723  145B  30FF               	movlw	255
 12724  145C  00A4               	movwf	((??_Process_PS2_ScanCode+2)^(0+256)+2)
 12725  145D  00A5               	movwf	((??_Process_PS2_ScanCode+2)^(0+256)+3)
 12726  145E  0822               	movf	(??_Process_PS2_ScanCode+2)^(0+256),w
 12727  145F  0023               	movlb	3	; select bank3
 12728  1460  07D3               	addwf	_BaudTyped^(0+384),f
 12729  1461  0022               	movlb	2	; select bank2
 12730  1462  0823               	movf	(??_Process_PS2_ScanCode+3)^(0+256),w
 12731  1463  0023               	movlb	3	; select bank3
 12732  1464  3DD4               	addwfc	(_BaudTyped+1)^(0+384),f
 12733  1465  0022               	movlb	2	; select bank2
 12734  1466  0824               	movf	(??_Process_PS2_ScanCode+4)^(0+256),w
 12735  1467  0023               	movlb	3	; select bank3
 12736  1468  3DD5               	addwfc	(_BaudTyped+2)^(0+384),f
 12737  1469  0022               	movlb	2	; select bank2
 12738  146A  0825               	movf	(??_Process_PS2_ScanCode+5)^(0+256),w
 12739  146B  0023               	movlb	3	; select bank3
 12740  146C  3DD6               	addwfc	(_BaudTyped+3)^(0+384),f
 12741                           
 12742                           ;PS_2.c: 691: UARTchar(temp, 0, 0);
 12743  146D  2790  3190         	fcall	PL48	;call to abstracted procedure
 12744  146F  264C  3190         	fcall	i1_UARTchar
 12745                           
 12746                           ;PS_2.c: 692: }
 12747  1471  2D31               	goto	i1l5852
 12748  1472                     i1l5782:	
 12749                           
 12750                           ;PS_2.c: 693: else if(temp == 'o' || temp == 'O')
 12751  1472  306F               	movlw	111
 12752  1473  066B               	xorwf	Process_PS2_ScanCode@temp^(0+256),w
 12753  1474  1903               	btfsc	3,2
 12754  1475  2C7A               	goto	i1l815
 12755  1476  304F               	movlw	79
 12756  1477  066B               	xorwf	Process_PS2_ScanCode@temp^(0+256),w
 12757  1478  1D03               	btfss	3,2
 12758  1479  2C82               	goto	i1l5788
 12759  147A                     i1l815:	
 12760                           
 12761                           ;PS_2.c: 694: {
 12762                           ;PS_2.c: 695: ParityTyped = 1;
 12763  147A  0023               	movlb	3	; select bank3
 12764  147B  01E9               	clrf	_ParityTyped^(0+384)
 12765  147C  0AE9               	incf	_ParityTyped^(0+384),f
 12766                           
 12767                           ;PS_2.c: 696: UARTchar(temp, 0, 0);
 12768  147D  2790  3190         	fcall	PL48	;call to abstracted procedure
 12769  147F  264C  3190         	fcall	i1_UARTchar
 12770                           
 12771                           ;PS_2.c: 697: }
 12772  1481  2D31               	goto	i1l5852
 12773  1482                     i1l5788:	
 12774                           
 12775                           ;PS_2.c: 698: else if(temp == 'e' || temp == 'E')
 12776  1482  3065               	movlw	101
 12777  1483  066B               	xorwf	Process_PS2_ScanCode@temp^(0+256),w
 12778  1484  1903               	btfsc	3,2
 12779  1485  2C8A               	goto	i1l5792
 12780  1486  3045               	movlw	69
 12781  1487  066B               	xorwf	Process_PS2_ScanCode@temp^(0+256),w
 12782  1488  1D03               	btfss	3,2
 12783  1489  2C90               	goto	i1l5796
 12784  148A                     i1l5792:	
 12785                           
 12786                           ;PS_2.c: 699: {
 12787                           ;PS_2.c: 700: ParityTyped = 2;
 12788  148A  3002               	movlw	2
 12789                           
 12790                           ;PS_2.c: 701: UARTchar(temp, 0, 0);
 12791  148B  2778  3190         	fcall	PL26	;call to abstracted procedure
 12792  148D  264C  3190         	fcall	i1_UARTchar
 12793                           
 12794                           ;PS_2.c: 702: }
 12795  148F  2D31               	goto	i1l5852
 12796  1490                     i1l5796:	
 12797                           
 12798                           ;PS_2.c: 703: else if(temp == 'm' || temp == 'M')
 12799  1490  306D               	movlw	109
 12800  1491  066B               	xorwf	Process_PS2_ScanCode@temp^(0+256),w
 12801  1492  1903               	btfsc	3,2
 12802  1493  2C98               	goto	i1l5800
 12803  1494  304D               	movlw	77
 12804  1495  066B               	xorwf	Process_PS2_ScanCode@temp^(0+256),w
 12805  1496  1D03               	btfss	3,2
 12806  1497  2C9E               	goto	i1l5804
 12807  1498                     i1l5800:	
 12808                           
 12809                           ;PS_2.c: 704: {
 12810                           ;PS_2.c: 705: ParityTyped = 3;
 12811  1498  3003               	movlw	3
 12812                           
 12813                           ;PS_2.c: 706: UARTchar(temp, 0, 0);
 12814  1499  2778  3190         	fcall	PL26	;call to abstracted procedure
 12815  149B  264C  3190         	fcall	i1_UARTchar
 12816                           
 12817                           ;PS_2.c: 707: }
 12818  149D  2D31               	goto	i1l5852
 12819  149E                     i1l5804:	
 12820                           
 12821                           ;PS_2.c: 708: else if(temp == 's' || temp == 'S')
 12822  149E  3073               	movlw	115
 12823  149F  066B               	xorwf	Process_PS2_ScanCode@temp^(0+256),w
 12824  14A0  1903               	btfsc	3,2
 12825  14A1  2CA6               	goto	i1l5808
 12826  14A2  3053               	movlw	83
 12827  14A3  066B               	xorwf	Process_PS2_ScanCode@temp^(0+256),w
 12828  14A4  1D03               	btfss	3,2
 12829  14A5  2CAC               	goto	i1l5812
 12830  14A6                     i1l5808:	
 12831                           
 12832                           ;PS_2.c: 709: {
 12833                           ;PS_2.c: 710: ParityTyped = 4;
 12834  14A6  3004               	movlw	4
 12835                           
 12836                           ;PS_2.c: 711: UARTchar(temp, 0, 0);
 12837  14A7  2778  3190         	fcall	PL26	;call to abstracted procedure
 12838  14A9  264C  3190         	fcall	i1_UARTchar
 12839                           
 12840                           ;PS_2.c: 712: }
 12841  14AB  2D31               	goto	i1l5852
 12842  14AC                     i1l5812:	
 12843                           
 12844                           ;PS_2.c: 713: else if(temp == '\r')
 12845  14AC  300D               	movlw	13
 12846  14AD  066B               	xorwf	Process_PS2_ScanCode@temp^(0+256),w
 12847  14AE  1D03               	btfss	3,2
 12848  14AF  2D31               	goto	i1l5852
 12849                           
 12850                           ;PS_2.c: 714: {
 12851                           ;PS_2.c: 715: UARTstringWAIT("\r\n");
 12852  14B0  278B  3190         	fcall	PL42	;call to abstracted procedure
 12853  14B2  2623  3190         	fcall	i1_UARTstringWAIT
 12854                           
 12855                           ;PS_2.c: 716: delayUS(15000);
 12856  14B4  2760  3190         	fcall	PL8	;call to abstracted procedure
 12857  14B6  2699  3190         	fcall	i1_delayUS
 12858                           
 12859                           ;PS_2.c: 717: if(BaudTyped >=2400 && BaudTyped <= 115200)
 12860  14B8  0023               	movlb	3	; select bank3
 12861  14B9  0856               	movf	(_BaudTyped+3)^(0+384),w
 12862  14BA  1D03               	btfss	3,2
 12863  14BB  2CC5               	goto	i1l5820
 12864  14BC  0855               	movf	(_BaudTyped+2)^(0+384),w
 12865  14BD  1D03               	btfss	3,2
 12866  14BE  2CC5               	goto	i1l5820
 12867  14BF  3060               	movlw	96
 12868  14C0  0253               	subwf	_BaudTyped^(0+384),w
 12869  14C1  3009               	movlw	9
 12870  14C2  3B54               	subwfb	(_BaudTyped+1)^(0+384),w
 12871  14C3  1C03               	btfss	3,0
 12872  14C4  2D25               	goto	i1l5846
 12873  14C5                     i1l5820:	
 12874  14C5  0856               	movf	(_BaudTyped+3)^(0+384),w
 12875  14C6  1D03               	btfss	3,2
 12876  14C7  2D25               	goto	i1l5846
 12877  14C8  3001               	movlw	1
 12878  14C9  0253               	subwf	_BaudTyped^(0+384),w
 12879  14CA  30C2               	movlw	194
 12880  14CB  3B54               	subwfb	(_BaudTyped+1)^(0+384),w
 12881  14CC  3001               	movlw	1
 12882  14CD  3B55               	subwfb	(_BaudTyped+2)^(0+384),w
 12883  14CE  1803               	btfsc	3,0
 12884  14CF  2D25               	goto	i1l5846
 12885                           
 12886                           ;PS_2.c: 718: {
 12887                           ;PS_2.c: 719: sprintf(buf,"Baud will be set to %lu",BaudTyped);
 12888  14D0  3026               	movlw	low Process_PS2_ScanCode@buf
 12889  14D1  0020               	movlb	0	; select bank0
 12890  14D2  00A8               	movwf	sprintf@sp
 12891  14D3  3001               	movlw	high Process_PS2_ScanCode@buf
 12892  14D4  00A9               	movwf	sprintf@sp+1
 12893  14D5  30AC               	movlw	low (STR_18| (0+32768))
 12894  14D6  00AA               	movwf	sprintf@f
 12895  14D7  309A               	movlw	high (STR_18| (0+32768))
 12896  14D8  00AB               	movwf	sprintf@f+1
 12897  14D9  0023               	movlb	3	; select bank3
 12898  14DA  0856               	movf	(_BaudTyped+3)^(0+384),w
 12899  14DB  0020               	movlb	0	; select bank0
 12900  14DC  00AF               	movwf	?_sprintf+7
 12901  14DD  0023               	movlb	3	; select bank3
 12902  14DE  0855               	movf	(_BaudTyped+2)^(0+384),w
 12903  14DF  0020               	movlb	0	; select bank0
 12904  14E0  00AE               	movwf	?_sprintf+6
 12905  14E1  0023               	movlb	3	; select bank3
 12906  14E2  0854               	movf	(_BaudTyped+1)^(0+384),w
 12907  14E3  0020               	movlb	0	; select bank0
 12908  14E4  00AD               	movwf	?_sprintf+5
 12909  14E5  0023               	movlb	3	; select bank3
 12910  14E6  0853               	movf	_BaudTyped^(0+384),w
 12911  14E7  0020               	movlb	0	; select bank0
 12912  14E8  00AC               	movwf	?_sprintf+4
 12913  14E9  318D  2530  3190   	fcall	_sprintf
 12914                           
 12915                           ;PS_2.c: 720: UARTstringWAIT(buf);
 12916  14EC  3026               	movlw	low Process_PS2_ScanCode@buf
 12917  14ED  00FB               	movwf	i1UARTstringWAIT@data
 12918  14EE  3001               	movlw	high Process_PS2_ScanCode@buf
 12919  14EF  00FC               	movwf	i1UARTstringWAIT@data+1
 12920  14F0  2623  3190         	fcall	i1_UARTstringWAIT
 12921                           
 12922                           ;PS_2.c: 721: if(ParityTyped)
 12923  14F2  0023               	movlb	3	; select bank3
 12924  14F3  0869               	movf	_ParityTyped^(0+384),w
 12925  14F4  1D03               	btfss	3,2
 12926  14F5  2D07               	goto	i1l5840
 12927  14F6  2D12               	goto	i1l5842
 12928  14F7                     i1l5830:	
 12929                           
 12930                           ;PS_2.c: 726: UARTstringWAIT(OddParityMSG);
 12931  14F7  3011               	movlw	low (_OddParityMSG| (0+32768))
 12932  14F8  00FB               	movwf	i1UARTstringWAIT@data
 12933  14F9  309A               	movlw	high (_OddParityMSG| (0+32768))
 12934  14FA  2D15               	goto	L7
 12935  14FB                     i1l5832:	
 12936                           ;PS_2.c: 727: break;
 12937                           
 12938                           
 12939                           ;PS_2.c: 729: UARTstringWAIT(EvenParityMSG);
 12940  14FB  30FB               	movlw	low (_EvenParityMSG| (0+32768))
 12941  14FC  00FB               	movwf	i1UARTstringWAIT@data
 12942  14FD  3099               	movlw	high (_EvenParityMSG| (0+32768))
 12943  14FE  2D15               	goto	L7
 12944  14FF                     i1l5834:	
 12945                           ;PS_2.c: 730: break;
 12946                           
 12947                           
 12948                           ;PS_2.c: 732: UARTstringWAIT(MarkParityMSG);
 12949  14FF  304A               	movlw	low (_MarkParityMSG| (0+32768))
 12950  1500  00FB               	movwf	i1UARTstringWAIT@data
 12951  1501  309A               	movlw	high (_MarkParityMSG| (0+32768))
 12952  1502  2D15               	goto	L7
 12953  1503                     i1l5836:	
 12954                           ;PS_2.c: 733: break;
 12955                           
 12956                           
 12957                           ;PS_2.c: 735: UARTstringWAIT(SpaceParityMSG);
 12958  1503  303A               	movlw	low (_SpaceParityMSG| (0+32768))
 12959  1504  00FB               	movwf	i1UARTstringWAIT@data
 12960  1505  309A               	movlw	high (_SpaceParityMSG| (0+32768))
 12961  1506  2D15               	goto	L7
 12962  1507                     i1l5840:	
 12963                           ;PS_2.c: 736: break;
 12964                           
 12965  1507  0869               	movf	_ParityTyped^(0+384),w
 12966                           
 12967                           ; Switch size 1, requested type "space"
 12968                           ; Number of cases is 3, Range of values is 1 to 3
 12969                           ; switch strategies available:
 12970                           ; Name         Instructions Cycles
 12971                           ; simple_byte           10     6 (average)
 12972                           ; direct_byte           15     9 (fixed)
 12973                           ; jumptable            263     9 (fixed)
 12974                           ;	Chosen strategy is simple_byte
 12975  1508  3A01               	xorlw	1	; case 1
 12976  1509  1903               	skipnz
 12977  150A  2CF7               	goto	i1l5830
 12978  150B  3A03               	xorlw	3	; case 2
 12979  150C  1903               	skipnz
 12980  150D  2CFB               	goto	i1l5832
 12981  150E  3A01               	xorlw	1	; case 3
 12982  150F  1903               	skipnz
 12983  1510  2CFF               	goto	i1l5834
 12984  1511  2D03               	goto	i1l5836
 12985  1512                     i1l5842:	
 12986                           
 12987                           ;PS_2.c: 739: else
 12988                           ;PS_2.c: 740: {
 12989                           ;PS_2.c: 741: UARTstringWAIT(NoParityMSG);
 12990  1512  3026               	movlw	low (_NoParityMSG| (0+32768))
 12991  1513  00FB               	movwf	i1UARTstringWAIT@data
 12992  1514  309A               	movlw	high (_NoParityMSG| (0+32768))
 12993  1515                     L7:	
 12994  1515  00FC               	movwf	i1UARTstringWAIT@data+1
 12995  1516  2623  3190         	fcall	i1_UARTstringWAIT
 12996                           
 12997                           ;PS_2.c: 742: }
 12998                           ;PS_2.c: 743: UARTstringWAIT("\r\n");
 12999  1518  278B  3190         	fcall	PL42	;call to abstracted procedure
 13000  151A  2623  3190         	fcall	i1_UARTstringWAIT
 13001                           
 13002                           ;PS_2.c: 744: SetBaud(BaudTyped, ParityTyped);
 13003  151C  2767  3190         	fcall	PL14	;call to abstracted procedure
 13004  151E  0023               	movlb	3	; select bank3
 13005  151F  0869               	movf	_ParityTyped^(0+384),w
 13006  1520  0021               	movlb	1	; select bank1
 13007  1521  00AC               	movwf	SetBaud@Parity^(0+128)
 13008  1522  200D  3190         	fcall	_SetBaud
 13009                           
 13010                           ;PS_2.c: 745: }
 13011  1524  2D2F               	goto	i1l5850
 13012  1525                     i1l5846:	
 13013                           
 13014                           ;PS_2.c: 746: else
 13015                           ;PS_2.c: 747: {
 13016                           ;PS_2.c: 748: UARTstringWAIT("Baud Out of Range\r\n");
 13017  1525  30D9               	movlw	low (STR_20| (0+32768))
 13018  1526  00FB               	movwf	i1UARTstringWAIT@data
 13019  1527  309A               	movlw	high (STR_20| (0+32768))
 13020  1528  00FC               	movwf	i1UARTstringWAIT@data+1
 13021  1529  2623  3190         	fcall	i1_UARTstringWAIT
 13022                           
 13023                           ;PS_2.c: 749: delayUS(15000);
 13024  152B  2760  3190         	fcall	PL8	;call to abstracted procedure
 13025  152D  2699  3190         	fcall	i1_delayUS
 13026  152F                     i1l5850:	
 13027                           
 13028                           ;PS_2.c: 750: }
 13029                           ;PS_2.c: 751: BAUDMODE=0;
 13030  152F  0023               	movlb	3	; select bank3
 13031  1530  01DE               	clrf	_BAUDMODE^(0+384)
 13032  1531                     i1l5852:	
 13033                           
 13034                           ;PS_2.c: 752: }
 13035                           ;PS_2.c: 753: }
 13036                           ;PS_2.c: 754: }
 13037                           ;PS_2.c: 755: }
 13038                           ;PS_2.c: 758: temp =0;
 13039  1531  0022               	movlb	2	; select bank2
 13040  1532  01EB               	clrf	Process_PS2_ScanCode@temp^(0+256)
 13041                           
 13042                           ;PS_2.c: 759: PS_2_Read_Data_First =0;
 13043  1533  0023               	movlb	3	; select bank3
 13044                           
 13045                           ;PS_2.c: 760: PS_2_Read_Data_Second =0;
 13046                           
 13047                           ;PS_2.c: 761: PS_2_Read_Data_Third =0;
 13048  1534  2784  3190         	fcall	PL40	;call to abstracted procedure
 13049                           
 13050                           ;PS_2.c: 762: Caps_Lock_Key_old = Caps_Lock_Key;
 13051  1536  0024               	movlb	4	; select bank4
 13052  1537  0829               	movf	_Caps_Lock_Key^(0+512),w
 13053  1538  00AA               	movwf	_Caps_Lock_Key_old^(0+512)
 13054                           
 13055                           ;PS_2.c: 763: Right_Shift_Key_old = Right_Shift_Key;
 13056  1539  0023               	movlb	3	; select bank3
 13057  153A  086D               	movf	_Right_Shift_Key^(0+384),w
 13058  153B  00EE               	movwf	_Right_Shift_Key_old^(0+384)
 13059                           
 13060                           ;PS_2.c: 764: Left_Shift_Key_old = Left_Shift_Key;
 13061  153C  0864               	movf	_Left_Shift_Key^(0+384),w
 13062  153D  0024               	movlb	4	; select bank4
 13063  153E  00AB               	movwf	_Left_Shift_Key_old^(0+512)
 13064                           
 13065                           ;PS_2.c: 765: LATC &= ~0b00010000;
 13066  153F  0022               	movlb	2	; select bank2
 13067  1540  120E               	bcf	14,4	;volatile
 13068                           
 13069                           ;PS_2.c: 766: }
 13070  1541  291F               	goto	i1l5872
 13071  1542                     i1l5868:	
 13072                           
 13073                           ;PS_2.c: 767: else
 13074                           ;PS_2.c: 768: {
 13075                           ;PS_2.c: 770: cleanBuffer(PS_2_ScanCodes, 12);
 13076  1542  300C               	movlw	12
 13077  1543  00F0               	movwf	cleanBuffer@count
 13078  1544  302C               	movlw	(low (_PS_2_ScanCodes| (0+512)))& (0+255)
 13079  1545  01F1               	clrf	cleanBuffer@count+1
 13080  1546  27EB  3190         	fcall	_cleanBuffer
 13081                           
 13082                           ;PS_2.c: 771: PS_2_Buffer_items = 0;
 13083  1548  0023               	movlb	3	; select bank3
 13084  1549  01E7               	clrf	_PS_2_Buffer_items^(0+384)
 13085  154A  291F               	goto	i1l5872
 13086  154B                     __end_of_Process_PS2_ScanCode:	
 13087  154B                     __ptext44:	
 13088 ;; *************** function i1_Send_PS2 *****************
 13089 ;; Defined at:
 13090 ;;		line 856 in file "PS_2.c"
 13091 ;; Parameters:    Size  Location     Type
 13092 ;;  command         1    wreg     unsigned char 
 13093 ;; Auto vars:     Size  Location     Type
 13094 ;;  command         1    1[BANK0 ] unsigned char 
 13095 ;;  Send_PS2        2    3[BANK0 ] unsigned int 
 13096 ;;  Send_PS2        1    2[BANK0 ] unsigned char 
 13097 ;;  Send_PS2        1    0[BANK0 ] unsigned char 
 13098 ;; Return value:  Size  Location     Type
 13099 ;;                  1    wreg      unsigned char 
 13100 ;; Registers used:
 13101 ;;		wreg, status,2, status,0, pclath, cstack
 13102 ;; Tracked objects:
 13103 ;;		On entry : 18/7
 13104 ;;		On exit  : 1F/1
 13105 ;;		Unchanged: 0/0
 13106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13108 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13110 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13111 ;;Total ram usage:        5 bytes
 13112 ;; Hardware stack levels used:    1
 13113 ;; Hardware stack levels required when called:    1
 13114 ;; This function calls:
 13115 ;;		i1_CheckSum_byte
 13116 ;;		i1_Clock_TRIS
 13117 ;;		i1_Data_TRIS
 13118 ;;		i1_READ_PS_2_PIN
 13119 ;;		i1_delayUS
 13120 ;; This function is called by:
 13121 ;;		_Process_PS2_ScanCode
 13122 ;;		_ResendLast
 13123 ;; This function uses a non-reentrant model
 13124 ;;
 13125                           
 13126                           
 13127                           ;psect for function i1_Send_PS2
 13128  154B                     i1_Send_PS2:	
 13129                           
 13130                           ;incstack = 0
 13131                           ; Regs used in i1_Send_PS2: [wreg+status,2+status,0+pclath+cstack]
 13132                           ;i1Send_PS2@command stored from wreg
 13133  154B  0020               	movlb	0	; select bank0
 13134  154C  00A1               	movwf	i1Send_PS2@command
 13135                           
 13136                           ;PS_2.c: 859: unsigned char oddparity = CheckSum_byte((unsigned int)command , 3);
 13137  154D  00F0               	movwf	i1CheckSum_byte@This
 13138  154E  3003               	movlw	3
 13139  154F  01F1               	clrf	i1CheckSum_byte@This+1
 13140  1550  00F2               	movwf	i1CheckSum_byte@Odd_Even
 13141  1551  26D3  3190         	fcall	i1_CheckSum_byte
 13142  1553  0020               	movlb	0	; select bank0
 13143  1554  00A0               	movwf	i1Send_PS2@oddparity
 13144                           
 13145                           ;PS_2.c: 862: Clock_TRIS(0);
 13146  1555  3000               	movlw	0
 13147  1556  26BF  3190         	fcall	i1_Clock_TRIS
 13148                           
 13149                           ;PS_2.c: 863: Data_TRIS(0);
 13150  1558  3000               	movlw	0
 13151  1559  26C9  3190         	fcall	i1_Data_TRIS
 13152                           
 13153                           ;PS_2.c: 864: LATA &= ~0b00100000;
 13154  155B  0022               	movlb	2	; select bank2
 13155  155C  128C               	bcf	12,5	;volatile
 13156                           
 13157                           ;PS_2.c: 865: delayUS(300);
 13158  155D  3001               	movlw	1
 13159  155E  01F3               	clrf	i1delayUS@US+3
 13160  155F  01F2               	clrf	i1delayUS@US+2
 13161  1560  00F1               	movwf	i1delayUS@US+1
 13162  1561  302C               	movlw	44
 13163  1562  00F0               	movwf	i1delayUS@US
 13164  1563  2699  3190         	fcall	i1_delayUS
 13165                           
 13166                           ;PS_2.c: 866: LATA &= ~0b00010000;
 13167  1565  0022               	movlb	2	; select bank2
 13168  1566  120C               	bcf	12,4	;volatile
 13169                           
 13170                           ;PS_2.c: 867: delayUS(20);
 13171  1567  3014               	movlw	20
 13172  1568  00F0               	movwf	i1delayUS@US
 13173  1569  01F1               	clrf	i1delayUS@US+1
 13174  156A  01F2               	clrf	i1delayUS@US+2
 13175  156B  01F3               	clrf	i1delayUS@US+3
 13176  156C  2699  3190         	fcall	i1_delayUS
 13177                           
 13178                           ;PS_2.c: 868: Clock_TRIS(1);
 13179  156E  3001               	movlw	1
 13180  156F  26BF  3190         	fcall	i1_Clock_TRIS
 13181                           
 13182                           ;PS_2.c: 869: timeout=0;
 13183  1571  0020               	movlb	0	; select bank0
 13184  1572  01A3               	clrf	i1Send_PS2@timeout
 13185  1573  01A4               	clrf	i1Send_PS2@timeout+1
 13186  1574                     i1l5190:	
 13187                           ;PS_2.c: 870: while(READ_PS_2_PIN(0b00100000))
 13188                           
 13189  1574  3020               	movlw	32
 13190  1575  268D  3190         	fcall	i1_READ_PS_2_PIN
 13191  1577  3A00               	xorlw	0
 13192  1578  1903               	btfsc	3,2
 13193  1579  2D88               	goto	i1l5192
 13194                           
 13195                           ;PS_2.c: 871: {
 13196                           ;PS_2.c: 872: __nop();
 13197  157A  0000               	nop
 13198                           
 13199                           ;PS_2.c: 873: timeout++;
 13200  157B  0020               	movlb	0	; select bank0
 13201                           
 13202                           ;PS_2.c: 874: if(timeout > 15000)
 13203  157C  275A  3190         	fcall	PL6	;call to abstracted procedure
 13204  157E  1903               	skipnz
 13205  157F  0223               	subwf	i1Send_PS2@timeout,w
 13206  1580  1C03               	skipc
 13207  1581  2D74               	goto	i1l5190
 13208  1582                     i1l5184:	
 13209                           
 13210                           ;PS_2.c: 875: {
 13211                           ;PS_2.c: 876: Clock_TRIS(1);
 13212  1582  3001               	movlw	1
 13213  1583  26BF  3190         	fcall	i1_Clock_TRIS
 13214                           
 13215                           ;PS_2.c: 877: Data_TRIS(1);
 13216  1585  3001               	movlw	1
 13217  1586  26C9               	fcall	i1_Data_TRIS
 13218                           
 13219                           ;PS_2.c: 878: return 1;
 13220  1587  3401               	retlw	1
 13221  1588                     i1l5192:	
 13222                           
 13223                           ;PS_2.c: 879: }
 13224                           ;PS_2.c: 880: }
 13225                           ;PS_2.c: 881: for(i=0;i<8;i++)
 13226  1588  01A2               	clrf	i1Send_PS2@i
 13227  1589                     i1l870:	
 13228                           
 13229                           ;PS_2.c: 882: {
 13230                           ;PS_2.c: 883: if(command & 0x1)
 13231  1589  1C21               	btfss	i1Send_PS2@command,0
 13232  158A  2D8E               	goto	i1l872
 13233                           
 13234                           ;PS_2.c: 884: {
 13235                           ;PS_2.c: 885: LATA |= 0b00010000;
 13236  158B  0022               	movlb	2	; select bank2
 13237  158C  160C               	bsf	12,4	;volatile
 13238                           
 13239                           ;PS_2.c: 886: }
 13240  158D  2D90               	goto	i1l873
 13241  158E                     i1l872:	
 13242                           
 13243                           ;PS_2.c: 887: else
 13244                           ;PS_2.c: 888: {
 13245                           ;PS_2.c: 889: LATA &= ~0b00010000;
 13246  158E  0022               	movlb	2	; select bank2
 13247  158F  120C               	bcf	12,4	;volatile
 13248  1590                     i1l873:	
 13249                           
 13250                           ;PS_2.c: 890: }
 13251                           ;PS_2.c: 891: command >> = 1;
 13252  1590  0020               	movlb	0	; select bank0
 13253  1591  36A1               	lsrf	i1Send_PS2@command,f
 13254                           
 13255                           ;PS_2.c: 892: timeout=0;
 13256  1592  01A3               	clrf	i1Send_PS2@timeout
 13257  1593  01A4               	clrf	i1Send_PS2@timeout+1
 13258  1594                     i1l5212:	
 13259                           ;PS_2.c: 899: Data_TRIS(1);
 13260                           
 13261                           ;PS_2.c: 897: {
 13262                           ;PS_2.c: 898: Clock_TRIS(1);
 13263                           
 13264                           ;PS_2.c: 893: while(!READ_PS_2_PIN(0b00100000))
 13265                           
 13266  1594  3020               	movlw	32
 13267  1595  268D  3190         	fcall	i1_READ_PS_2_PIN
 13268  1597  3A00               	xorlw	0
 13269  1598  1D03               	btfss	3,2
 13270  1599  2DA1               	goto	i1l5214
 13271                           
 13272                           ;PS_2.c: 894: {
 13273                           ;PS_2.c: 895: timeout++;
 13274                           
 13275                           ;PS_2.c: 896: if(timeout > 15000)
 13276  159A  275A  3190         	fcall	PL6	;call to abstracted procedure
 13277  159C  1903               	skipnz
 13278  159D  0223               	subwf	i1Send_PS2@timeout,w
 13279  159E  1C03               	skipc
 13280  159F  2D94               	goto	i1l5212
 13281  15A0  2D82               	goto	i1l5184
 13282  15A1                     i1l5214:	
 13283                           
 13284                           ;PS_2.c: 901: }
 13285                           ;PS_2.c: 902: }
 13286                           ;PS_2.c: 903: timeout=0;
 13287  15A1  01A3               	clrf	i1Send_PS2@timeout
 13288  15A2  01A4               	clrf	i1Send_PS2@timeout+1
 13289  15A3                     i1l5226:	
 13290                           ;PS_2.c: 911: Data_TRIS(1);
 13291                           
 13292                           ;PS_2.c: 909: {
 13293                           ;PS_2.c: 910: Clock_TRIS(1);
 13294                           
 13295                           ;PS_2.c: 904: while(READ_PS_2_PIN(0b00100000))
 13296                           
 13297  15A3  3020               	movlw	32
 13298  15A4  268D  3190         	fcall	i1_READ_PS_2_PIN
 13299  15A6  3A00               	xorlw	0
 13300  15A7  1903               	btfsc	3,2
 13301  15A8  2DB2               	goto	i1l5228
 13302                           
 13303                           ;PS_2.c: 905: {
 13304                           ;PS_2.c: 906: __nop();
 13305  15A9  0000               	nop
 13306                           
 13307                           ;PS_2.c: 907: timeout++;
 13308  15AA  0020               	movlb	0	; select bank0
 13309                           
 13310                           ;PS_2.c: 908: if(timeout > 15000)
 13311  15AB  275A  3190         	fcall	PL6	;call to abstracted procedure
 13312  15AD  1903               	skipnz
 13313  15AE  0223               	subwf	i1Send_PS2@timeout,w
 13314  15AF  1C03               	skipc
 13315  15B0  2DA3               	goto	i1l5226
 13316  15B1  2D82               	goto	i1l5184
 13317  15B2                     i1l5228:	
 13318  15B2  3008               	movlw	8
 13319  15B3  0AA2               	incf	i1Send_PS2@i,f
 13320  15B4  0222               	subwf	i1Send_PS2@i,w
 13321  15B5  1C03               	skipc
 13322  15B6  2D89               	goto	i1l870
 13323                           
 13324                           ;PS_2.c: 913: }
 13325                           ;PS_2.c: 914: }
 13326                           ;PS_2.c: 915: }
 13327                           ;PS_2.c: 917: if(oddparity & 0x1)
 13328  15B7  1C20               	btfss	i1Send_PS2@oddparity,0
 13329  15B8  2DBC               	goto	i1l882
 13330                           
 13331                           ;PS_2.c: 918: {
 13332                           ;PS_2.c: 919: LATA |= 0b00010000;
 13333  15B9  0022               	movlb	2	; select bank2
 13334  15BA  160C               	bsf	12,4	;volatile
 13335                           
 13336                           ;PS_2.c: 920: }
 13337  15BB  2DBE               	goto	i1l5234
 13338  15BC                     i1l882:	
 13339                           
 13340                           ;PS_2.c: 921: else
 13341                           ;PS_2.c: 922: {
 13342                           ;PS_2.c: 923: LATA &= ~0b00010000;
 13343  15BC  0022               	movlb	2	; select bank2
 13344  15BD  120C               	bcf	12,4	;volatile
 13345  15BE                     i1l5234:	
 13346                           
 13347                           ;PS_2.c: 924: }
 13348                           ;PS_2.c: 925: timeout=0;
 13349  15BE  0020               	movlb	0	; select bank0
 13350  15BF  01A3               	clrf	i1Send_PS2@timeout
 13351  15C0  01A4               	clrf	i1Send_PS2@timeout+1
 13352  15C1                     i1l5246:	
 13353                           ;PS_2.c: 932: Data_TRIS(1);
 13354                           
 13355                           ;PS_2.c: 930: {
 13356                           ;PS_2.c: 931: Clock_TRIS(1);
 13357                           
 13358                           ;PS_2.c: 926: while(!READ_PS_2_PIN(0b00100000))
 13359                           
 13360  15C1  3020               	movlw	32
 13361  15C2  268D  3190         	fcall	i1_READ_PS_2_PIN
 13362  15C4  3A00               	xorlw	0
 13363  15C5  1D03               	btfss	3,2
 13364  15C6  2DCE               	goto	i1l5248
 13365                           
 13366                           ;PS_2.c: 927: {
 13367                           ;PS_2.c: 928: timeout++;
 13368                           
 13369                           ;PS_2.c: 929: if(timeout > 15000)
 13370  15C7  275A  3190         	fcall	PL6	;call to abstracted procedure
 13371  15C9  1903               	skipnz
 13372  15CA  0223               	subwf	i1Send_PS2@timeout,w
 13373  15CB  1C03               	skipc
 13374  15CC  2DC1               	goto	i1l5246
 13375  15CD  2D82               	goto	i1l5184
 13376  15CE                     i1l5248:	
 13377                           
 13378                           ;PS_2.c: 934: }
 13379                           ;PS_2.c: 935: }
 13380                           ;PS_2.c: 936: timeout=0;
 13381  15CE  01A3               	clrf	i1Send_PS2@timeout
 13382  15CF  01A4               	clrf	i1Send_PS2@timeout+1
 13383  15D0                     i1l5260:	
 13384                           ;PS_2.c: 943: Data_TRIS(1);
 13385                           
 13386                           ;PS_2.c: 941: {
 13387                           ;PS_2.c: 942: Clock_TRIS(1);
 13388                           
 13389                           ;PS_2.c: 937: while(READ_PS_2_PIN(0b00100000))
 13390                           
 13391  15D0  3020               	movlw	32
 13392  15D1  268D  3190         	fcall	i1_READ_PS_2_PIN
 13393  15D3  3A00               	xorlw	0
 13394  15D4  1903               	btfsc	3,2
 13395  15D5  2DDD               	goto	i1l5262
 13396                           
 13397                           ;PS_2.c: 938: {
 13398                           ;PS_2.c: 939: timeout++;
 13399                           
 13400                           ;PS_2.c: 940: if(timeout > 15000)
 13401  15D6  275A  3190         	fcall	PL6	;call to abstracted procedure
 13402  15D8  1903               	skipnz
 13403  15D9  0223               	subwf	i1Send_PS2@timeout,w
 13404  15DA  1C03               	skipc
 13405  15DB  2DD0               	goto	i1l5260
 13406  15DC  2D82               	goto	i1l5184
 13407  15DD                     i1l5262:	
 13408                           
 13409                           ;PS_2.c: 945: }
 13410                           ;PS_2.c: 946: }
 13411                           ;PS_2.c: 948: Data_TRIS(1);
 13412  15DD  3001               	movlw	1
 13413  15DE  26C9  3190         	fcall	i1_Data_TRIS
 13414                           
 13415                           ;PS_2.c: 950: timeout=0;
 13416  15E0  0020               	movlb	0	; select bank0
 13417  15E1  01A3               	clrf	i1Send_PS2@timeout
 13418  15E2  01A4               	clrf	i1Send_PS2@timeout+1
 13419  15E3                     i1l5276:	
 13420                           ;PS_2.c: 957: Data_TRIS(1);
 13421                           
 13422                           ;PS_2.c: 955: {
 13423                           ;PS_2.c: 956: Clock_TRIS(1);
 13424                           
 13425                           ;PS_2.c: 951: while(READ_PS_2_PIN(0b00010000))
 13426                           
 13427  15E3  3010               	movlw	16
 13428  15E4  268D  3190         	fcall	i1_READ_PS_2_PIN
 13429  15E6  3A00               	xorlw	0
 13430  15E7  1903               	btfsc	3,2
 13431  15E8  2DF0               	goto	i1l5278
 13432                           
 13433                           ;PS_2.c: 952: {
 13434                           ;PS_2.c: 953: timeout++;
 13435                           
 13436                           ;PS_2.c: 954: if(timeout > 15000)
 13437  15E9  275A  3190         	fcall	PL6	;call to abstracted procedure
 13438  15EB  1903               	skipnz
 13439  15EC  0223               	subwf	i1Send_PS2@timeout,w
 13440  15ED  1C03               	skipc
 13441  15EE  2DE3               	goto	i1l5276
 13442  15EF  2D82               	goto	i1l5184
 13443  15F0                     i1l5278:	
 13444                           
 13445                           ;PS_2.c: 959: }
 13446                           ;PS_2.c: 960: }
 13447                           ;PS_2.c: 961: timeout=0;
 13448  15F0  01A3               	clrf	i1Send_PS2@timeout
 13449  15F1  01A4               	clrf	i1Send_PS2@timeout+1
 13450  15F2                     i1l5290:	
 13451                           ;PS_2.c: 968: Data_TRIS(1);
 13452                           
 13453                           ;PS_2.c: 966: {
 13454                           ;PS_2.c: 967: Clock_TRIS(1);
 13455                           
 13456                           ;PS_2.c: 962: while(READ_PS_2_PIN(0b00100000))
 13457                           
 13458  15F2  3020               	movlw	32
 13459  15F3  268D  3190         	fcall	i1_READ_PS_2_PIN
 13460  15F5  3A00               	xorlw	0
 13461  15F6  1903               	btfsc	3,2
 13462  15F7  2DFF               	goto	i1l5292
 13463                           
 13464                           ;PS_2.c: 963: {
 13465                           ;PS_2.c: 964: timeout++;
 13466                           
 13467                           ;PS_2.c: 965: if(timeout > 15000)
 13468  15F8  275A  3190         	fcall	PL6	;call to abstracted procedure
 13469  15FA  1903               	skipnz
 13470  15FB  0223               	subwf	i1Send_PS2@timeout,w
 13471  15FC  1C03               	skipc
 13472  15FD  2DF2               	goto	i1l5290
 13473  15FE  2D82               	goto	i1l5184
 13474  15FF                     i1l5292:	
 13475                           
 13476                           ;PS_2.c: 970: }
 13477                           ;PS_2.c: 971: }
 13478                           ;PS_2.c: 972: timeout=0;
 13479  15FF  01A3               	clrf	i1Send_PS2@timeout
 13480  1600  01A4               	clrf	i1Send_PS2@timeout+1
 13481  1601                     i1l5304:	
 13482                           ;PS_2.c: 979: Data_TRIS(1);
 13483                           
 13484                           ;PS_2.c: 977: {
 13485                           ;PS_2.c: 978: Clock_TRIS(1);
 13486                           
 13487                           ;PS_2.c: 973: while(!READ_PS_2_PIN(0b00010000))
 13488                           
 13489  1601  3010               	movlw	16
 13490  1602  268D  3190         	fcall	i1_READ_PS_2_PIN
 13491  1604  3A00               	xorlw	0
 13492  1605  1D03               	btfss	3,2
 13493  1606  2E0E               	goto	i1l5306
 13494                           
 13495                           ;PS_2.c: 974: {
 13496                           ;PS_2.c: 975: timeout++;
 13497                           
 13498                           ;PS_2.c: 976: if(timeout > 15000)
 13499  1607  275A  3190         	fcall	PL6	;call to abstracted procedure
 13500  1609  1903               	skipnz
 13501  160A  0223               	subwf	i1Send_PS2@timeout,w
 13502  160B  1C03               	skipc
 13503  160C  2E01               	goto	i1l5304
 13504  160D  2D82               	goto	i1l5184
 13505  160E                     i1l5306:	
 13506                           
 13507                           ;PS_2.c: 981: }
 13508                           ;PS_2.c: 982: }
 13509                           ;PS_2.c: 983: timeout=0;
 13510  160E  01A3               	clrf	i1Send_PS2@timeout
 13511  160F  01A4               	clrf	i1Send_PS2@timeout+1
 13512  1610                     i1l5318:	
 13513                           ;PS_2.c: 990: Data_TRIS(1);
 13514                           
 13515                           ;PS_2.c: 988: {
 13516                           ;PS_2.c: 989: Clock_TRIS(1);
 13517                           
 13518                           ;PS_2.c: 984: while(!READ_PS_2_PIN(0b00100000))
 13519                           
 13520  1610  3020               	movlw	32
 13521  1611  268D  3190         	fcall	i1_READ_PS_2_PIN
 13522  1613  3A00               	xorlw	0
 13523  1614  1D03               	btfss	3,2
 13524  1615  2E1D               	goto	i1l5320
 13525                           
 13526                           ;PS_2.c: 985: {
 13527                           ;PS_2.c: 986: timeout++;
 13528                           
 13529                           ;PS_2.c: 987: if(timeout > 15000)
 13530  1616  275A  3190         	fcall	PL6	;call to abstracted procedure
 13531  1618  1903               	skipnz
 13532  1619  0223               	subwf	i1Send_PS2@timeout,w
 13533  161A  1C03               	skipc
 13534  161B  2E10               	goto	i1l5318
 13535  161C  2D82               	goto	i1l5184
 13536  161D                     i1l5320:	
 13537                           
 13538                           ;PS_2.c: 992: }
 13539                           ;PS_2.c: 993: }
 13540                           ;PS_2.c: 996: Clock_TRIS(1);
 13541  161D  3001               	movlw	1
 13542  161E  26BF  3190         	fcall	i1_Clock_TRIS
 13543                           
 13544                           ;PS_2.c: 997: Data_TRIS(1);
 13545  1620  3001               	movlw	1
 13546  1621  26C9               	fcall	i1_Data_TRIS
 13547                           
 13548                           ;PS_2.c: 998: return 0;
 13549  1622  3400               	retlw	0
 13550  1623                     __end_ofi1_Send_PS2:	
 13551  1623                     __ptext53:	
 13552 ;; *************** function i1_UARTstringWAIT *****************
 13553 ;; Defined at:
 13554 ;;		line 366 in file "UART.c"
 13555 ;; Parameters:    Size  Location     Type
 13556 ;;  data            2   11[COMMON] PTR const unsigned char 
 13557 ;;		 -> STR_20(20), STR_19(3), Process_PS2_ScanCode@buf(60), STR_17(3), 
 13558 ;;		 -> STR_16(3), STR_15(19), STR_14(19), STR_13(3), 
 13559 ;;		 -> STR_12(3), SetBaud@buf(50), STR_10(21), STR_9(3), 
 13560 ;;		 -> STR_8(3), NoParityMSG(20), SpaceParityMSG(16), MarkParityMSG(15), 
 13561 ;;		 -> EvenParityMSG(22), OddParityMSG(21), STR_7(3), STR_6(33), 
 13562 ;;		 -> STR_5(3), Version(9), STR_4(19), STR_3(28), 
 13563 ;;		 -> STR_2(8), STR_1(7), VoltageMSG(13), 
 13564 ;; Auto vars:     Size  Location     Type
 13565 ;;		None
 13566 ;; Return value:  Size  Location     Type
 13567 ;;		None               void
 13568 ;; Registers used:
 13569 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13570 ;; Tracked objects:
 13571 ;;		On entry : 1C/2
 13572 ;;		On exit  : 1F/0
 13573 ;;		Unchanged: 0/0
 13574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13575 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13577 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13578 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13579 ;;Total ram usage:        5 bytes
 13580 ;; Hardware stack levels used:    1
 13581 ;; Hardware stack levels required when called:    2
 13582 ;; This function calls:
 13583 ;;		i1_UARTchar
 13584 ;;		i1_delayUS
 13585 ;; This function is called by:
 13586 ;;		_SetBaud
 13587 ;;		_Process_PS2_ScanCode
 13588 ;; This function uses a non-reentrant model
 13589 ;;
 13590                           
 13591                           
 13592                           ;psect for function i1_UARTstringWAIT
 13593  1623                     i1_UARTstringWAIT:	
 13594  1623                     i1l474:	
 13595                           ;incstack = 0
 13596                           ; Regs used in i1_UARTstringWAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13597                           ;UART.c: 368: do
 13598                           
 13599                           
 13600                           ;UART.c: 369: {
 13601                           ;UART.c: 370: delayUS(5000);
 13602  1623  3013               	movlw	19
 13603  1624  01F3               	clrf	i1delayUS@US+3
 13604  1625  01F2               	clrf	i1delayUS@US+2
 13605  1626  00F1               	movwf	i1delayUS@US+1
 13606  1627  3088               	movlw	136
 13607  1628  00F0               	movwf	i1delayUS@US
 13608  1629  2699  3190         	fcall	i1_delayUS
 13609                           
 13610                           ;UART.c: 371: if(*data != 0)
 13611  162B  087B               	movf	i1UARTstringWAIT@data,w
 13612  162C  0084               	movwf	4
 13613  162D  087C               	movf	i1UARTstringWAIT@data+1,w
 13614  162E  0085               	movwf	5
 13615  162F  0012               	moviw fsr0++
 13616  1630  1903               	btfsc	3,2
 13617  1631  2E3D               	goto	i1l4656
 13618                           
 13619                           ;UART.c: 372: {
 13620                           ;UART.c: 373: UARTchar(*data, 0, 0);
 13621  1632  01F7               	clrf	i1UARTchar@override
 13622  1633  01F8               	clrf	i1UARTchar@NinethBit_override_data
 13623  1634  087B               	movf	i1UARTstringWAIT@data,w
 13624  1635  0084               	movwf	4
 13625  1636  087C               	movf	i1UARTstringWAIT@data+1,w
 13626  1637  0085               	movwf	5
 13627  1638  0800               	movf	0,w	;code access
 13628  1639  264C  3190         	fcall	i1_UARTchar
 13629  163B                     i1l476:	
 13630                           ;UART.c: 374: while((!TX1STAbits.TRMT));
 13631                           
 13632  163B  1C9E               	btfss	30,1	;volatile
 13633  163C  2E3B               	goto	i1l476
 13634  163D                     i1l4656:	
 13635                           
 13636                           ;UART.c: 375: }
 13637                           ;UART.c: 376: } while( *data++);
 13638  163D  087C               	movf	i1UARTstringWAIT@data+1,w
 13639  163E  0020               	movlb	0	; select bank0
 13640  163F  00A1               	movwf	??i1_UARTstringWAIT+1
 13641  1640  087B               	movf	i1UARTstringWAIT@data,w
 13642  1641  00A0               	movwf	??i1_UARTstringWAIT
 13643  1642  0AFB               	incf	i1UARTstringWAIT@data,f
 13644  1643  1903               	skipnz
 13645  1644  0AFC               	incf	i1UARTstringWAIT@data+1,f
 13646  1645  0084               	movwf	4
 13647  1646  0821               	movf	??i1_UARTstringWAIT+1,w
 13648  1647  0085               	movwf	5
 13649  1648  0012               	moviw fsr0++
 13650  1649  1903               	btfsc	3,2
 13651  164A  0008               	return
 13652  164B  2E23               	goto	i1l474
 13653  164C                     __end_ofi1_UARTstringWAIT:	
 13654  164C                     __ptext54:	
 13655 ;; *************** function i1_UARTchar *****************
 13656 ;; Defined at:
 13657 ;;		line 235 in file "UART.c"
 13658 ;; Parameters:    Size  Location     Type
 13659 ;;  data            1    wreg     unsigned char 
 13660 ;;  override        1    7[COMMON] unsigned char 
 13661 ;;  NinethBit_ov    1    8[COMMON] unsigned char 
 13662 ;; Auto vars:     Size  Location     Type
 13663 ;;  data            1   10[COMMON] unsigned char 
 13664 ;; Return value:  Size  Location     Type
 13665 ;;		None               void
 13666 ;; Registers used:
 13667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13668 ;; Tracked objects:
 13669 ;;		On entry : 0/2
 13670 ;;		On exit  : 1F/3
 13671 ;;		Unchanged: 0/0
 13672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13673 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13676 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13677 ;;Total ram usage:        4 bytes
 13678 ;; Hardware stack levels used:    1
 13679 ;; Hardware stack levels required when called:    1
 13680 ;; This function calls:
 13681 ;;		i1_CheckSum_byte
 13682 ;; This function is called by:
 13683 ;;		_isr
 13684 ;;		_Process_PS2_ScanCode
 13685 ;;		i1_UARTstringWAIT
 13686 ;; This function uses a non-reentrant model
 13687 ;;
 13688                           
 13689                           
 13690                           ;psect for function i1_UARTchar
 13691  164C                     i1_UARTchar:	
 13692                           
 13693                           ;incstack = 0
 13694                           ; Regs used in i1_UARTchar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13695                           ;i1UARTchar@data stored from wreg
 13696  164C  00FA               	movwf	i1UARTchar@data
 13697                           
 13698                           ;UART.c: 237: if(TXSTAbits.TX9)
 13699  164D  0023               	movlb	3	; select bank3
 13700  164E  1F1E               	btfss	30,6	;volatile
 13701  164F  2E79               	goto	i1l432
 13702                           
 13703                           ;UART.c: 238: {
 13704                           ;UART.c: 240: if(!override)
 13705  1650  0877               	movf	i1UARTchar@override,w
 13706  1651  1903               	btfsc	3,2
 13707  1652  2E66               	goto	i1l4166
 13708  1653  2E71               	goto	i1l4168
 13709  1654                     i1l4160:	
 13710                           
 13711                           ;UART.c: 246: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 3);
 13712  1654  087A               	movf	i1UARTchar@data,w
 13713  1655  00F0               	movwf	i1CheckSum_byte@This
 13714  1656  3003               	movlw	3
 13715  1657  2E5B               	goto	L16
 13716  1658                     i1l4162:	
 13717                           ;UART.c: 247: break;
 13718                           
 13719                           
 13720                           ;UART.c: 249: TXSTAbits.TX9D = CheckSum_byte((unsigned int) data, 2);
 13721  1658  087A               	movf	i1UARTchar@data,w
 13722  1659  00F0               	movwf	i1CheckSum_byte@This
 13723  165A  3002               	movlw	2
 13724  165B                     L16:	
 13725  165B  01F1               	clrf	i1CheckSum_byte@This+1
 13726  165C  00F2               	movwf	i1CheckSum_byte@Odd_Even
 13727  165D  26D3  3190         	fcall	i1_CheckSum_byte
 13728  165F  00F9               	movwf	??i1_UARTchar
 13729  1660  0023               	movlb	3	; select bank3
 13730  1661  2E74               	goto	L14
 13731  1662                     i1l438:	
 13732                           ;UART.c: 251: case 3:
 13733                           
 13734                           ;UART.c: 250: break;
 13735                           
 13736                           
 13737                           ;UART.c: 252: TXSTAbits.TX9D = 1;
 13738  1662  141E               	bsf	30,0	;volatile
 13739                           
 13740                           ;UART.c: 253: break;
 13741  1663  2E79               	goto	i1l432
 13742  1664                     i1l439:	
 13743                           ;UART.c: 254: default:
 13744                           
 13745                           
 13746                           ;UART.c: 255: TXSTAbits.TX9D = 0;
 13747  1664  101E               	bcf	30,0	;volatile
 13748                           
 13749                           ;UART.c: 256: break;
 13750  1665  2E79               	goto	i1l432
 13751  1666                     i1l4166:	
 13752  1666  0866               	movf	_PARITY^(0+384),w
 13753                           
 13754                           ; Switch size 1, requested type "space"
 13755                           ; Number of cases is 3, Range of values is 1 to 3
 13756                           ; switch strategies available:
 13757                           ; Name         Instructions Cycles
 13758                           ; simple_byte           10     6 (average)
 13759                           ; direct_byte           15     9 (fixed)
 13760                           ; jumptable            263     9 (fixed)
 13761                           ;	Chosen strategy is simple_byte
 13762  1667  3A01               	xorlw	1	; case 1
 13763  1668  1903               	skipnz
 13764  1669  2E54               	goto	i1l4160
 13765  166A  3A03               	xorlw	3	; case 2
 13766  166B  1903               	skipnz
 13767  166C  2E58               	goto	i1l4162
 13768  166D  3A01               	xorlw	1	; case 3
 13769  166E  1903               	skipnz
 13770  166F  2E62               	goto	i1l438
 13771  1670  2E64               	goto	i1l439
 13772  1671                     i1l4168:	
 13773                           
 13774                           ;UART.c: 259: else
 13775                           ;UART.c: 260: {
 13776                           ;UART.c: 261: TXSTAbits.TX9D = (NinethBit_override_data & 0x01);
 13777  1671  3001               	movlw	1
 13778  1672  0578               	andwf	i1UARTchar@NinethBit_override_data,w
 13779  1673  00F9               	movwf	??i1_UARTchar
 13780  1674                     L14:	
 13781  1674  081E               	movf	30,w	;volatile
 13782  1675  0679               	xorwf	??i1_UARTchar,w
 13783  1676  39FE               	andlw	-2
 13784  1677  0679               	xorwf	??i1_UARTchar,w
 13785  1678  009E               	movwf	30	;volatile
 13786  1679                     i1l432:	
 13787                           
 13788                           ;UART.c: 262: }
 13789                           ;UART.c: 263: }
 13790                           ;UART.c: 265: if(data == '\n')
 13791  1679  300A               	movlw	10
 13792  167A  067A               	xorwf	i1UARTchar@data,w
 13793  167B  1D03               	btfss	3,2
 13794  167C  2E88               	goto	i1l449
 13795                           
 13796                           ;UART.c: 266: {
 13797                           ;UART.c: 267: if(override || LineOverride)
 13798  167D  0877               	movf	i1UARTchar@override,w
 13799  167E  1903               	btfsc	3,2
 13800  167F  0865               	movf	_LineOverride^(0+384),w
 13801  1680  1903               	btfsc	3,2
 13802  1681  0008               	return
 13803  1682                     i1l445:	
 13804  1682  1C9E               	btfss	30,1	;volatile
 13805  1683  2E82               	goto	i1l445
 13806                           
 13807                           ;UART.c: 270: TXREG = data;
 13808  1684  087A               	movf	i1UARTchar@data,w
 13809  1685  009A               	movwf	26	;volatile
 13810                           
 13811                           ;UART.c: 271: LineOverride = 0;
 13812  1686  01E5               	clrf	_LineOverride^(0+384)
 13813  1687  0008               	return
 13814  1688                     i1l449:	
 13815  1688  1C9E               	btfss	30,1	;volatile
 13816  1689  2E88               	goto	i1l449
 13817                           
 13818                           ;UART.c: 277: TXREG = data;
 13819  168A  087A               	movf	i1UARTchar@data,w
 13820  168B  009A               	movwf	26	;volatile
 13821  168C  0008               	return
 13822  168D                     __end_ofi1_UARTchar:	
 13823  168D                     __ptext45:	
 13824 ;; *************** function i1_READ_PS_2_PIN *****************
 13825 ;; Defined at:
 13826 ;;		line 222 in file "PS_2.c"
 13827 ;; Parameters:    Size  Location     Type
 13828 ;;  DATA_CLK        1    wreg     unsigned char 
 13829 ;; Auto vars:     Size  Location     Type
 13830 ;;  DATA_CLK        1    0[COMMON] unsigned char 
 13831 ;; Return value:  Size  Location     Type
 13832 ;;                  1    wreg      unsigned char 
 13833 ;; Registers used:
 13834 ;;		wreg, status,2, status,0
 13835 ;; Tracked objects:
 13836 ;;		On entry : 0/4
 13837 ;;		On exit  : 1F/0
 13838 ;;		Unchanged: 0/0
 13839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13841 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13843 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13844 ;;Total ram usage:        1 bytes
 13845 ;; Hardware stack levels used:    1
 13846 ;; This function calls:
 13847 ;;		Nothing
 13848 ;; This function is called by:
 13849 ;;		_isr
 13850 ;;		i1_Send_PS2
 13851 ;; This function uses a non-reentrant model
 13852 ;;
 13853                           
 13854                           
 13855                           ;psect for function i1_READ_PS_2_PIN
 13856  168D                     i1_READ_PS_2_PIN:	
 13857                           
 13858                           ;incstack = 0
 13859                           ; Regs used in i1_READ_PS_2_PIN: [wreg+status,2+status,0]
 13860                           ;i1READ_PS_2_PIN@DATA_CLK stored from wreg
 13861  168D  00F0               	movwf	i1READ_PS_2_PIN@DATA_CLK
 13862                           
 13863                           ;PS_2.c: 224: if(DATA_CLK == 0b00100000)
 13864  168E  3A20               	xorlw	32
 13865  168F  1D03               	btfss	3,2
 13866  1690  2E95               	goto	i1l657
 13867                           
 13868                           ;PS_2.c: 225: {
 13869                           ;PS_2.c: 227: if((PORTA & 0b00100000) == 0b00100000)
 13870  1691  0020               	movlb	0	; select bank0
 13871  1692  1E8C               	btfss	12,5	;volatile
 13872  1693  3400               	retlw	0
 13873                           
 13874                           ;PS_2.c: 228: {
 13875                           ;PS_2.c: 229: return (1);
 13876  1694  3401               	retlw	1
 13877  1695                     i1l657:	
 13878                           ;PS_2.c: 231: else
 13879                           ;PS_2.c: 232: {
 13880                           ;PS_2.c: 233: return 0;
 13881                           
 13882                           
 13883                           ;PS_2.c: 236: else
 13884                           ;PS_2.c: 237: {
 13885                           ;PS_2.c: 239: if((PORTA & 0b00010000) == 0b00010000)
 13886  1695  0020               	movlb	0	; select bank0
 13887  1696  1A0C               	btfsc	12,4	;volatile
 13888  1697  3401               	retlw	1
 13889  1698  3400               	retlw	0
 13890  1699                     __end_ofi1_READ_PS_2_PIN:	
 13891  1699                     __ptext67:	
 13892 ;; *************** function i1_delayUS *****************
 13893 ;; Defined at:
 13894 ;;		line 51 in file "MISC.c"
 13895 ;; Parameters:    Size  Location     Type
 13896 ;;  US              4    0[COMMON] long 
 13897 ;; Auto vars:     Size  Location     Type
 13898 ;;  delayUS         4    5[COMMON] long 
 13899 ;;  delayUS         1    9[COMMON] unsigned char 
 13900 ;; Return value:  Size  Location     Type
 13901 ;;		None               void
 13902 ;; Registers used:
 13903 ;;		wreg, status,2, status,0
 13904 ;; Tracked objects:
 13905 ;;		On entry : 1C/0
 13906 ;;		On exit  : 0/0
 13907 ;;		Unchanged: 0/0
 13908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13909 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13910 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13911 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13912 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13913 ;;Total ram usage:       10 bytes
 13914 ;; Hardware stack levels used:    1
 13915 ;; This function calls:
 13916 ;;		Nothing
 13917 ;; This function is called by:
 13918 ;;		_UART_send_break_timed
 13919 ;;		_SetBaud
 13920 ;;		_Process_PS2_ScanCode
 13921 ;;		_WriteFlash_Sequential
 13922 ;;		i1_UARTstringWAIT
 13923 ;;		i1_Send_PS2
 13924 ;; This function uses a non-reentrant model
 13925 ;;
 13926                           
 13927                           
 13928                           ;psect for function i1_delayUS
 13929  1699                     i1_delayUS:	
 13930                           
 13931                           ;MISC.c: 53: long i;
 13932                           ;MISC.c: 54: unsigned char j;
 13933                           ;MISC.c: 55: for(i=0;i<US;i+=6)
 13934                           
 13935                           ;incstack = 0
 13936                           ; Regs used in i1_delayUS: [wreg+status,2+status,0]
 13937  1699  01F5               	clrf	i1delayUS@i
 13938  169A  01F6               	clrf	i1delayUS@i+1
 13939  169B  01F7               	clrf	i1delayUS@i+2
 13940  169C  01F8               	clrf	i1delayUS@i+3
 13941  169D                     i1l3884:	
 13942  169D  0878               	movf	i1delayUS@i+3,w
 13943  169E  3A80               	xorlw	128
 13944  169F  00F4               	movwf	??i1_delayUS
 13945  16A0  0873               	movf	i1delayUS@US+3,w
 13946  16A1  3A80               	xorlw	128
 13947  16A2  0274               	subwf	??i1_delayUS,w
 13948  16A3  1D03               	skipz
 13949  16A4  2EAF               	goto	u353_23
 13950  16A5  0872               	movf	i1delayUS@US+2,w
 13951  16A6  0277               	subwf	i1delayUS@i+2,w
 13952  16A7  1D03               	skipz
 13953  16A8  2EAF               	goto	u353_23
 13954  16A9  0871               	movf	i1delayUS@US+1,w
 13955  16AA  0276               	subwf	i1delayUS@i+1,w
 13956  16AB  1D03               	skipz
 13957  16AC  2EAF               	goto	u353_23
 13958  16AD  0870               	movf	i1delayUS@US,w
 13959  16AE  0275               	subwf	i1delayUS@i,w
 13960  16AF                     u353_23:	
 13961  16AF  1803               	btfsc	3,0
 13962  16B0  0008               	return
 13963                           
 13964                           ;MISC.c: 56: {
 13965                           ;MISC.c: 57: for(j=0;j<32;j++)
 13966  16B1  01F9               	clrf	i1delayUS@j
 13967  16B2                     i1l288:	
 13968                           
 13969                           ;MISC.c: 58: {
 13970                           ;MISC.c: 59: __nop();
 13971  16B2  0000               	nop
 13972  16B3  3020               	movlw	32
 13973  16B4  0AF9               	incf	i1delayUS@j,f
 13974  16B5  0279               	subwf	i1delayUS@j,w
 13975  16B6  1C03               	skipc
 13976  16B7  2EB2               	goto	i1l288
 13977  16B8  3006               	movlw	6
 13978  16B9  07F5               	addwf	i1delayUS@i,f
 13979  16BA  3000               	movlw	0
 13980  16BB  3DF6               	addwfc	i1delayUS@i+1,f
 13981  16BC  3DF7               	addwfc	i1delayUS@i+2,f
 13982  16BD  3DF8               	addwfc	i1delayUS@i+3,f
 13983  16BE  2E9D               	goto	i1l3884
 13984  16BF                     __end_ofi1_delayUS:	
 13985  16BF                     __ptext47:	
 13986 ;; *************** function i1_Clock_TRIS *****************
 13987 ;; Defined at:
 13988 ;;		line 120 in file "PS_2.c"
 13989 ;; Parameters:    Size  Location     Type
 13990 ;;  direction       1    wreg     unsigned char 
 13991 ;; Auto vars:     Size  Location     Type
 13992 ;;  direction       1    0[COMMON] unsigned char 
 13993 ;; Return value:  Size  Location     Type
 13994 ;;		None               void
 13995 ;; Registers used:
 13996 ;;		wreg, status,2, status,0
 13997 ;; Tracked objects:
 13998 ;;		On entry : 0/0
 13999 ;;		On exit  : 1F/1
 14000 ;;		Unchanged: 0/0
 14001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14003 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14005 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14006 ;;Total ram usage:        1 bytes
 14007 ;; Hardware stack levels used:    1
 14008 ;; This function calls:
 14009 ;;		Nothing
 14010 ;; This function is called by:
 14011 ;;		i1_Send_PS2
 14012 ;; This function uses a non-reentrant model
 14013 ;;
 14014                           
 14015                           
 14016                           ;psect for function i1_Clock_TRIS
 14017  16BF                     i1_Clock_TRIS:	
 14018                           
 14019                           ;incstack = 0
 14020                           ; Regs used in i1_Clock_TRIS: [wreg+status,2+status,0]
 14021                           ;i1Clock_TRIS@direction stored from wreg
 14022  16BF  00F0               	movwf	i1Clock_TRIS@direction
 14023                           
 14024                           ;PS_2.c: 122: if(direction == 0)
 14025  16C0  0870               	movf	i1Clock_TRIS@direction,w
 14026  16C1  1D03               	btfss	3,2
 14027  16C2  2EC6               	goto	i1l632
 14028                           
 14029                           ;PS_2.c: 123: {
 14030                           ;PS_2.c: 124: TRISAbits.TRISA5 = 0;
 14031  16C3  0021               	movlb	1	; select bank1
 14032  16C4  128C               	bcf	12,5	;volatile
 14033                           
 14034                           ;PS_2.c: 125: }
 14035  16C5  0008               	return
 14036  16C6                     i1l632:	
 14037                           
 14038                           ;PS_2.c: 126: else
 14039                           ;PS_2.c: 127: {
 14040                           ;PS_2.c: 128: TRISAbits.TRISA5 = 1;
 14041  16C6  0021               	movlb	1	; select bank1
 14042  16C7  168C               	bsf	12,5	;volatile
 14043  16C8  0008               	return
 14044  16C9                     __end_ofi1_Clock_TRIS:	
 14045  16C9                     __ptext46:	
 14046 ;; *************** function i1_Data_TRIS *****************
 14047 ;; Defined at:
 14048 ;;		line 137 in file "PS_2.c"
 14049 ;; Parameters:    Size  Location     Type
 14050 ;;  direction       1    wreg     unsigned char 
 14051 ;; Auto vars:     Size  Location     Type
 14052 ;;  direction       1    0[COMMON] unsigned char 
 14053 ;; Return value:  Size  Location     Type
 14054 ;;		None               void
 14055 ;; Registers used:
 14056 ;;		wreg, status,2, status,0
 14057 ;; Tracked objects:
 14058 ;;		On entry : 1E/1
 14059 ;;		On exit  : 1F/1
 14060 ;;		Unchanged: 0/0
 14061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14063 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;Total ram usage:        1 bytes
 14067 ;; Hardware stack levels used:    1
 14068 ;; This function calls:
 14069 ;;		Nothing
 14070 ;; This function is called by:
 14071 ;;		i1_Send_PS2
 14072 ;; This function uses a non-reentrant model
 14073 ;;
 14074                           
 14075                           
 14076                           ;psect for function i1_Data_TRIS
 14077  16C9                     i1_Data_TRIS:	
 14078                           
 14079                           ;incstack = 0
 14080                           ; Regs used in i1_Data_TRIS: [wreg+status,2+status,0]
 14081                           ;i1Data_TRIS@direction stored from wreg
 14082  16C9  00F0               	movwf	i1Data_TRIS@direction
 14083                           
 14084                           ;PS_2.c: 139: if(direction == 0)
 14085  16CA  0870               	movf	i1Data_TRIS@direction,w
 14086  16CB  1D03               	btfss	3,2
 14087  16CC  2ED0               	goto	i1l637
 14088                           
 14089                           ;PS_2.c: 140: {
 14090                           ;PS_2.c: 141: TRISAbits.TRISA4 = 0;
 14091  16CD  0021               	movlb	1	; select bank1
 14092  16CE  120C               	bcf	12,4	;volatile
 14093                           
 14094                           ;PS_2.c: 142: }
 14095  16CF  0008               	return
 14096  16D0                     i1l637:	
 14097                           
 14098                           ;PS_2.c: 143: else
 14099                           ;PS_2.c: 144: {
 14100                           ;PS_2.c: 145: TRISAbits.TRISA4 = 1;
 14101  16D0  0021               	movlb	1	; select bank1
 14102  16D1  160C               	bsf	12,4	;volatile
 14103  16D2  0008               	return
 14104  16D3                     __end_ofi1_Data_TRIS:	
 14105  16D3                     __ptext78:	
 14106 ;; *************** function i1_CheckSum_byte *****************
 14107 ;; Defined at:
 14108 ;;		line 71 in file "MISC.c"
 14109 ;; Parameters:    Size  Location     Type
 14110 ;;  This            2    0[COMMON] unsigned int 
 14111 ;;  Odd_Even        1    2[COMMON] unsigned char 
 14112 ;; Auto vars:     Size  Location     Type
 14113 ;;  CheckSum_byt    2    3[COMMON] unsigned int 
 14114 ;;  CheckSum_byt    1    6[COMMON] unsigned char 
 14115 ;;  CheckSum_byt    1    5[COMMON] unsigned char 
 14116 ;; Return value:  Size  Location     Type
 14117 ;;                  1    wreg      unsigned char 
 14118 ;; Registers used:
 14119 ;;		wreg, status,2, status,0
 14120 ;; Tracked objects:
 14121 ;;		On entry : 0/0
 14122 ;;		On exit  : 0/0
 14123 ;;		Unchanged: 0/0
 14124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14125 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14126 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14128 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14129 ;;Total ram usage:        7 bytes
 14130 ;; Hardware stack levels used:    1
 14131 ;; This function calls:
 14132 ;;		Nothing
 14133 ;; This function is called by:
 14134 ;;		_PS2RawToScan
 14135 ;;		i1_UARTchar
 14136 ;;		i1_Send_PS2
 14137 ;; This function uses a non-reentrant model
 14138 ;;
 14139                           
 14140                           
 14141                           ;psect for function i1_CheckSum_byte
 14142  16D3                     i1_CheckSum_byte:	
 14143                           
 14144                           ;MISC.c: 74: unsigned char Parity = 0;
 14145                           
 14146                           ;incstack = 0
 14147                           ; Regs used in i1_CheckSum_byte: [wreg+status,2+status,0]
 14148  16D3  01F5               	clrf	i1CheckSum_byte@Parity
 14149                           
 14150                           ;MISC.c: 75: unsigned int ThisTemp = This;
 14151  16D4  0871               	movf	i1CheckSum_byte@This+1,w
 14152  16D5  00F4               	movwf	i1CheckSum_byte@ThisTemp+1
 14153  16D6  0870               	movf	i1CheckSum_byte@This,w
 14154  16D7  00F3               	movwf	i1CheckSum_byte@ThisTemp
 14155                           
 14156                           ;MISC.c: 77: for (i =0; i<8; i++)
 14157  16D8  01F6               	clrf	i1CheckSum_byte@i
 14158  16D9                     i1l294:	
 14159                           
 14160                           ;MISC.c: 78: {
 14161                           ;MISC.c: 79: if((ThisTemp & 0x01) == 1)
 14162  16D9  1873               	btfsc	i1CheckSum_byte@ThisTemp,0
 14163                           
 14164                           ;MISC.c: 80: {
 14165                           ;MISC.c: 81: Parity++;
 14166  16DA  0AF5               	incf	i1CheckSum_byte@Parity,f
 14167  16DB  3008               	movlw	8
 14168                           
 14169                           ;MISC.c: 82: }
 14170                           ;MISC.c: 83: ThisTemp >>= 1;
 14171  16DC  36F4               	lsrf	i1CheckSum_byte@ThisTemp+1,f
 14172  16DD  0CF3               	rrf	i1CheckSum_byte@ThisTemp,f
 14173  16DE  0AF6               	incf	i1CheckSum_byte@i,f
 14174  16DF  0276               	subwf	i1CheckSum_byte@i,w
 14175  16E0  1C03               	skipc
 14176  16E1  2ED9               	goto	i1l294
 14177                           
 14178                           ;MISC.c: 84: }
 14179                           ;MISC.c: 85: if(Odd_Even == 3)
 14180  16E2  3003               	movlw	3
 14181  16E3  0672               	xorwf	i1CheckSum_byte@Odd_Even,w
 14182  16E4  1D03               	btfss	3,2
 14183  16E5  2EE9               	goto	i1l297
 14184                           
 14185                           ;MISC.c: 86: {
 14186                           ;MISC.c: 87: if(Parity % 2 == 0)
 14187  16E6  1C75               	btfss	i1CheckSum_byte@Parity,0
 14188                           
 14189                           ;MISC.c: 88: {
 14190                           ;MISC.c: 89: return 1;
 14191  16E7  3401               	retlw	1
 14192                           
 14193                           ;MISC.c: 90: }
 14194                           ;MISC.c: 91: return 0;
 14195  16E8  3400               	retlw	0
 14196  16E9                     i1l297:	
 14197                           
 14198                           ;MISC.c: 93: else
 14199                           ;MISC.c: 94: {
 14200                           ;MISC.c: 95: if(Parity % 2 == 1)
 14201  16E9  1875               	btfsc	i1CheckSum_byte@Parity,0
 14202  16EA  3401               	retlw	1
 14203  16EB  3400               	retlw	0
 14204  16EC                     __end_ofi1_CheckSum_byte:	
 14205  16EC                     __ptext76:	
 14206 ;; *************** function _BufferShiftBack *****************
 14207 ;; Defined at:
 14208 ;;		line 179 in file "MISC.c"
 14209 ;; Parameters:    Size  Location     Type
 14210 ;;  buffer          1    wreg     PTR unsigned char 
 14211 ;;		 -> PS_2_ScanCodes(12), 
 14212 ;;  shift           1    0[COMMON] unsigned char 
 14213 ;;  size            1    1[COMMON] unsigned char 
 14214 ;; Auto vars:     Size  Location     Type
 14215 ;;  buffer          1    7[COMMON] PTR unsigned char 
 14216 ;;		 -> PS_2_ScanCodes(12), 
 14217 ;;  i               1    6[COMMON] unsigned char 
 14218 ;; Return value:  Size  Location     Type
 14219 ;;                  1    wreg      unsigned char 
 14220 ;; Registers used:
 14221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 14222 ;; Tracked objects:
 14223 ;;		On entry : 1E/3
 14224 ;;		On exit  : 0/0
 14225 ;;		Unchanged: 0/0
 14226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14227 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14228 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14229 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14230 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14231 ;;Total ram usage:        8 bytes
 14232 ;; Hardware stack levels used:    1
 14233 ;; This function calls:
 14234 ;;		Nothing
 14235 ;; This function is called by:
 14236 ;;		_Process_PS2_ScanCode
 14237 ;; This function uses a non-reentrant model
 14238 ;;
 14239                           
 14240                           
 14241                           ;psect for function _BufferShiftBack
 14242  16EC                     _BufferShiftBack:	
 14243                           
 14244                           ;incstack = 0
 14245                           ; Regs used in _BufferShiftBack: [wreg-fsr1h+status,2+status,0]
 14246                           ;BufferShiftBack@buffer stored from wreg
 14247  16EC  00F7               	movwf	BufferShiftBack@buffer
 14248                           
 14249                           ;MISC.c: 182: if(shift > size)
 14250  16ED  0870               	movf	BufferShiftBack@shift,w
 14251  16EE  0271               	subwf	BufferShiftBack@size,w
 14252  16EF  1C03               	btfss	3,0
 14253  16F0  0008               	return
 14254                           
 14255                           ;MISC.c: 185: }
 14256                           ;MISC.c: 186: for(i = 0; i < size; i++)
 14257  16F1  01F6               	clrf	BufferShiftBack@i
 14258  16F2                     i1l4866:	
 14259  16F2  0871               	movf	BufferShiftBack@size,w
 14260  16F3  0276               	subwf	BufferShiftBack@i,w
 14261  16F4  1803               	btfsc	3,0
 14262  16F5  0008               	return
 14263                           
 14264                           ;MISC.c: 187: {
 14265                           ;MISC.c: 188: if(i < (size - shift))
 14266  16F6  0871               	movf	BufferShiftBack@size,w
 14267  16F7  00F2               	movwf	??_BufferShiftBack
 14268  16F8  01F3               	clrf	??_BufferShiftBack+1
 14269  16F9  0873               	movf	??_BufferShiftBack+1,w
 14270  16FA  00F5               	movwf	??_BufferShiftBack+3
 14271  16FB  0870               	movf	BufferShiftBack@shift,w
 14272  16FC  0272               	subwf	??_BufferShiftBack,w
 14273  16FD  00F4               	movwf	??_BufferShiftBack+2
 14274  16FE  1C03               	skipc
 14275  16FF  03F5               	decf	??_BufferShiftBack+3,f
 14276  1700  0875               	movf	??_BufferShiftBack+3,w
 14277  1701  3A80               	xorlw	128
 14278  1702  3C80               	sublw	128
 14279  1703  1D03               	skipz
 14280  1704  2F07               	goto	u486_25
 14281  1705  0874               	movf	??_BufferShiftBack+2,w
 14282  1706  0276               	subwf	BufferShiftBack@i,w
 14283  1707                     u486_25:	
 14284                           
 14285                           ;MISC.c: 189: {
 14286                           ;MISC.c: 190: buffer[i] = buffer[i+shift];
 14287  1707  0876               	movf	BufferShiftBack@i,w
 14288  1708  1803               	skipnc
 14289  1709  2F18               	goto	L19
 14290  170A  279C  3190         	fcall	PL64	;call to abstracted procedure
 14291  170C  0870               	movf	BufferShiftBack@shift,w
 14292  170D  0777               	addwf	BufferShiftBack@buffer,w
 14293  170E  00F3               	movwf	??_BufferShiftBack+1
 14294  170F  0876               	movf	BufferShiftBack@i,w
 14295  1710  0773               	addwf	??_BufferShiftBack+1,w
 14296  1711  00F4               	movwf	??_BufferShiftBack+2
 14297  1712  0084               	movwf	4
 14298  1713  3002               	movlw	2	; select bank4/5
 14299  1714  0085               	movwf	5
 14300  1715  0800               	movf	0,w
 14301  1716  0081               	movwf	1
 14302                           
 14303                           ;MISC.c: 191: }
 14304  1717  2F1B               	goto	i1l4864
 14305  1718                     L19:	
 14306                           ;MISC.c: 192: else
 14307                           ;MISC.c: 193: {
 14308                           ;MISC.c: 194: buffer[i] = 0;
 14309                           
 14310  1718  279C  3190         	fcall	PL64	;call to abstracted procedure
 14311  171A  0181               	clrf	1
 14312  171B                     i1l4864:	
 14313  171B  0AF6               	incf	BufferShiftBack@i,f
 14314  171C  2EF2               	goto	i1l4866
 14315  171D                     __end_of_BufferShiftBack:	
 14316  171D                     __ptext75:	
 14317 ;; *************** function _Decode_Scan_Code *****************
 14318 ;; Defined at:
 14319 ;;		line 782 in file "PS_2.c"
 14320 ;; Parameters:    Size  Location     Type
 14321 ;;  Code            1    wreg     unsigned char 
 14322 ;; Auto vars:     Size  Location     Type
 14323 ;;  Code            1    0[COMMON] unsigned char 
 14324 ;; Return value:  Size  Location     Type
 14325 ;;                  1    wreg      unsigned char 
 14326 ;; Registers used:
 14327 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 14328 ;; Tracked objects:
 14329 ;;		On entry : 1F/3
 14330 ;;		On exit  : 1F/3
 14331 ;;		Unchanged: 1E/0
 14332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14334 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14336 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14337 ;;Total ram usage:        1 bytes
 14338 ;; Hardware stack levels used:    1
 14339 ;; This function calls:
 14340 ;;		Nothing
 14341 ;; This function is called by:
 14342 ;;		_Process_PS2_ScanCode
 14343 ;; This function uses a non-reentrant model
 14344 ;;
 14345                           
 14346                           
 14347                           ;psect for function _Decode_Scan_Code
 14348  171D                     _Decode_Scan_Code:	
 14349                           
 14350                           ;incstack = 0
 14351                           ; Regs used in _Decode_Scan_Code: [wreg-fsr0h+status,2+status,0+pclath]
 14352                           ;Decode_Scan_Code@Code stored from wreg
 14353  171D  00F0               	movwf	Decode_Scan_Code@Code
 14354                           
 14355                           ;PS_2.c: 784: Code -= 13;
 14356  171E  300D               	movlw	13
 14357  171F  02F0               	subwf	Decode_Scan_Code@Code,f
 14358                           
 14359                           ;PS_2.c: 785: if(Code <=112)
 14360  1720  3071               	movlw	113
 14361  1721  0270               	subwf	Decode_Scan_Code@Code,w
 14362  1722  1803               	skipnc
 14363  1723  3400               	retlw	0
 14364                           
 14365                           ;PS_2.c: 786: {
 14366                           ;PS_2.c: 787: return ScanCode[Code];
 14367  1724  0870               	movf	Decode_Scan_Code@Code,w
 14368  1725  3E84               	addlw	low (_ScanCode| (0+32768))
 14369  1726  0084               	movwf	4
 14370  1727  3098               	movlw	high (_ScanCode| (0+32768))
 14371  1728  2F7F               	ljmp	PL30	;call to abstracted procedure
 14372  1729                     __end_of_Decode_Scan_Code:	
 14373                           ;PS_2.c: 789: else
 14374                           ;PS_2.c: 790: {
 14375                           ;PS_2.c: 791: return 0;
 14376                           
 14377  1729                     __ptext74:	
 14378 ;; *************** function _Decode_Scan_Code_Function *****************
 14379 ;; Defined at:
 14380 ;;		line 839 in file "PS_2.c"
 14381 ;; Parameters:    Size  Location     Type
 14382 ;;  Code            1    wreg     unsigned char 
 14383 ;; Auto vars:     Size  Location     Type
 14384 ;;  Code            1    0[COMMON] unsigned char 
 14385 ;; Return value:  Size  Location     Type
 14386 ;;                  1    wreg      unsigned char 
 14387 ;; Registers used:
 14388 ;;		wreg, fsr0l, fsr0h, pclath
 14389 ;; Tracked objects:
 14390 ;;		On entry : 1F/3
 14391 ;;		On exit  : 1F/3
 14392 ;;		Unchanged: 1E/0
 14393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14395 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14397 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14398 ;;Total ram usage:        1 bytes
 14399 ;; Hardware stack levels used:    1
 14400 ;; This function calls:
 14401 ;;		Nothing
 14402 ;; This function is called by:
 14403 ;;		_Process_PS2_ScanCode
 14404 ;; This function uses a non-reentrant model
 14405 ;;
 14406                           
 14407                           
 14408                           ;psect for function _Decode_Scan_Code_Function
 14409  1729                     _Decode_Scan_Code_Function:	
 14410                           
 14411                           ;incstack = 0
 14412                           ; Regs used in _Decode_Scan_Code_Function: [wreg-fsr0h+pclath]
 14413                           ;Decode_Scan_Code_Function@Code stored from wreg
 14414  1729  00F0               	movwf	Decode_Scan_Code_Function@Code
 14415                           
 14416                           ;PS_2.c: 841: if(Code <=131)
 14417  172A  3084               	movlw	132
 14418  172B  0270               	subwf	Decode_Scan_Code_Function@Code,w
 14419  172C  1803               	skipnc
 14420  172D  3400               	retlw	0
 14421                           
 14422                           ;PS_2.c: 842: {
 14423                           ;PS_2.c: 843: return ScanCodeFunctionNoE0[Code];
 14424  172E  0870               	movf	Decode_Scan_Code_Function@Code,w
 14425  172F  3E00               	addlw	low (_ScanCodeFunctionNoE0| (0+32768))
 14426  1730  0084               	movwf	4
 14427  1731  3098               	movlw	high (_ScanCodeFunctionNoE0| (0+32768))
 14428  1732  2F7F               	ljmp	PL30	;call to abstracted procedure
 14429  1733                     __end_of_Decode_Scan_Code_Function:	
 14430                           ;PS_2.c: 845: else
 14431                           ;PS_2.c: 846: {
 14432                           ;PS_2.c: 847: return 0;
 14433                           
 14434  1733                     __ptext73:	
 14435 ;; *************** function _Decode_Scan_Code_FunctionE0 *****************
 14436 ;; Defined at:
 14437 ;;		line 820 in file "PS_2.c"
 14438 ;; Parameters:    Size  Location     Type
 14439 ;;  Code            1    wreg     unsigned char 
 14440 ;; Auto vars:     Size  Location     Type
 14441 ;;  Code            1    0[COMMON] unsigned char 
 14442 ;; Return value:  Size  Location     Type
 14443 ;;                  1    wreg      unsigned char 
 14444 ;; Registers used:
 14445 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 14446 ;; Tracked objects:
 14447 ;;		On entry : 1F/3
 14448 ;;		On exit  : 1F/3
 14449 ;;		Unchanged: 1E/0
 14450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14452 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14454 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14455 ;;Total ram usage:        1 bytes
 14456 ;; Hardware stack levels used:    1
 14457 ;; This function calls:
 14458 ;;		Nothing
 14459 ;; This function is called by:
 14460 ;;		_Process_PS2_ScanCode
 14461 ;; This function uses a non-reentrant model
 14462 ;;
 14463                           
 14464                           
 14465                           ;psect for function _Decode_Scan_Code_FunctionE0
 14466  1733                     _Decode_Scan_Code_FunctionE0:	
 14467                           
 14468                           ;incstack = 0
 14469                           ; Regs used in _Decode_Scan_Code_FunctionE0: [wreg-fsr0h+status,2+status,0+pclath]
 14470                           ;Decode_Scan_Code_FunctionE0@Code stored from wreg
 14471  1733  00F0               	movwf	Decode_Scan_Code_FunctionE0@Code
 14472                           
 14473                           ;PS_2.c: 822: Code -= 17;
 14474  1734  3011               	movlw	17
 14475  1735  02F0               	subwf	Decode_Scan_Code_FunctionE0@Code,f
 14476                           
 14477                           ;PS_2.c: 823: if(Code <=108)
 14478  1736  306D               	movlw	109
 14479  1737  0270               	subwf	Decode_Scan_Code_FunctionE0@Code,w
 14480  1738  1803               	skipnc
 14481  1739  3400               	retlw	0
 14482                           
 14483                           ;PS_2.c: 824: {
 14484                           ;PS_2.c: 825: return ScanCodeFunctionE0[Code];
 14485  173A  0870               	movf	Decode_Scan_Code_FunctionE0@Code,w
 14486  173B  3E66               	addlw	low (_ScanCodeFunctionE0| (0+32768))
 14487  173C  0084               	movwf	4
 14488  173D  3099               	movlw	high (_ScanCodeFunctionE0| (0+32768))
 14489  173E  2F7F               	ljmp	PL30	;call to abstracted procedure
 14490  173F                     __end_of_Decode_Scan_Code_FunctionE0:	
 14491                           ;PS_2.c: 827: else
 14492                           ;PS_2.c: 828: {
 14493                           ;PS_2.c: 829: return 0;
 14494                           
 14495  173F                     __ptext72:	
 14496 ;; *************** function _Decode_Scan_Code_Shift *****************
 14497 ;; Defined at:
 14498 ;;		line 801 in file "PS_2.c"
 14499 ;; Parameters:    Size  Location     Type
 14500 ;;  Code            1    wreg     unsigned char 
 14501 ;; Auto vars:     Size  Location     Type
 14502 ;;  Code            1    0[COMMON] unsigned char 
 14503 ;; Return value:  Size  Location     Type
 14504 ;;                  1    wreg      unsigned char 
 14505 ;; Registers used:
 14506 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 14507 ;; Tracked objects:
 14508 ;;		On entry : 1F/3
 14509 ;;		On exit  : 1F/3
 14510 ;;		Unchanged: 1E/0
 14511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14513 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14515 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14516 ;;Total ram usage:        1 bytes
 14517 ;; Hardware stack levels used:    1
 14518 ;; This function calls:
 14519 ;;		Nothing
 14520 ;; This function is called by:
 14521 ;;		_Process_PS2_ScanCode
 14522 ;; This function uses a non-reentrant model
 14523 ;;
 14524                           
 14525                           
 14526                           ;psect for function _Decode_Scan_Code_Shift
 14527  173F                     _Decode_Scan_Code_Shift:	
 14528                           
 14529                           ;incstack = 0
 14530                           ; Regs used in _Decode_Scan_Code_Shift: [wreg-fsr0h+status,2+status,0+pclath]
 14531                           ;Decode_Scan_Code_Shift@Code stored from wreg
 14532  173F  00F0               	movwf	Decode_Scan_Code_Shift@Code
 14533                           
 14534                           ;PS_2.c: 803: Code -= 13;
 14535  1740  300D               	movlw	13
 14536  1741  02F0               	subwf	Decode_Scan_Code_Shift@Code,f
 14537                           
 14538                           ;PS_2.c: 804: if(Code <=112)
 14539  1742  3071               	movlw	113
 14540  1743  0270               	subwf	Decode_Scan_Code_Shift@Code,w
 14541  1744  1803               	skipnc
 14542  1745  3400               	retlw	0
 14543                           
 14544                           ;PS_2.c: 805: {
 14545                           ;PS_2.c: 806: return ScanCodeSHIFT[Code];
 14546  1746  0870               	movf	Decode_Scan_Code_Shift@Code,w
 14547  1747  3EF5               	addlw	low (_ScanCodeSHIFT| (0+32768))
 14548  1748  0084               	movwf	4
 14549  1749  3098               	movlw	high (_ScanCodeSHIFT| (0+32768))
 14550  174A  2F7F               	ljmp	PL30	;call to abstracted procedure
 14551  174B                     __end_of_Decode_Scan_Code_Shift:	
 14552                           ;PS_2.c: 808: else
 14553                           ;PS_2.c: 809: {
 14554                           ;PS_2.c: 810: return 0;
 14555                           
 14556  174B                     __ptext71:	
 14557 ;; *************** function _ISNUMBER *****************
 14558 ;; Defined at:
 14559 ;;		line 129 in file "MISC.c"
 14560 ;; Parameters:    Size  Location     Type
 14561 ;;  ascii           1    wreg     unsigned char 
 14562 ;; Auto vars:     Size  Location     Type
 14563 ;;  ascii           1    0[COMMON] unsigned char 
 14564 ;; Return value:  Size  Location     Type
 14565 ;;                  1    wreg      unsigned char 
 14566 ;; Registers used:
 14567 ;;		wreg
 14568 ;; Tracked objects:
 14569 ;;		On entry : 1F/2
 14570 ;;		On exit  : 1F/2
 14571 ;;		Unchanged: 1F/0
 14572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14574 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14576 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;Total ram usage:        1 bytes
 14578 ;; Hardware stack levels used:    1
 14579 ;; This function calls:
 14580 ;;		Nothing
 14581 ;; This function is called by:
 14582 ;;		_Process_PS2_ScanCode
 14583 ;; This function uses a non-reentrant model
 14584 ;;
 14585                           
 14586                           
 14587                           ;psect for function _ISNUMBER
 14588  174B                     _ISNUMBER:	
 14589                           
 14590                           ;incstack = 0
 14591                           ; Regs used in _ISNUMBER: [wreg]
 14592                           ;ISNUMBER@ascii stored from wreg
 14593  174B  00F0               	movwf	ISNUMBER@ascii
 14594                           
 14595                           ;MISC.c: 131: if(ascii >= '0' && ascii <='9')
 14596  174C  3030               	movlw	48
 14597  174D  0270               	subwf	ISNUMBER@ascii,w
 14598  174E  1C03               	skipc
 14599  174F  3400               	retlw	0
 14600  1750  303A               	movlw	58
 14601  1751  0270               	subwf	ISNUMBER@ascii,w
 14602  1752  1C03               	btfss	3,0
 14603                           
 14604                           ;MISC.c: 132: {
 14605                           ;MISC.c: 133: return 1;
 14606  1753  3401               	retlw	1
 14607                           
 14608                           ;MISC.c: 135: else
 14609                           ;MISC.c: 136: {
 14610                           ;MISC.c: 137: return 0;
 14611  1754  3400               	retlw	0
 14612  1755                     __end_of_ISNUMBER:	
 14613  1755                     __ptext51:	
 14614 ;; *************** function _UART_send_break *****************
 14615 ;; Defined at:
 14616 ;;		line 327 in file "UART.c"
 14617 ;; Parameters:    Size  Location     Type
 14618 ;;		None
 14619 ;; Auto vars:     Size  Location     Type
 14620 ;;		None
 14621 ;; Return value:  Size  Location     Type
 14622 ;;		None               void
 14623 ;; Registers used:
 14624 ;;		wreg
 14625 ;; Tracked objects:
 14626 ;;		On entry : 1F/2
 14627 ;;		On exit  : 1F/3
 14628 ;;		Unchanged: 0/0
 14629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14634 ;;Total ram usage:        0 bytes
 14635 ;; Hardware stack levels used:    1
 14636 ;; This function calls:
 14637 ;;		Nothing
 14638 ;; This function is called by:
 14639 ;;		_Process_PS2_ScanCode
 14640 ;; This function uses a non-reentrant model
 14641 ;;
 14642                           
 14643                           
 14644                           ;psect for function _UART_send_break
 14645  1755                     _UART_send_break:	
 14646                           
 14647                           ;UART.c: 329: TX1STA |= 0b00001000;
 14648                           
 14649                           ;incstack = 0
 14650                           ; Regs used in _UART_send_break: [wreg]
 14651  1755  0023               	movlb	3	; select bank3
 14652  1756  159E               	bsf	30,3	;volatile
 14653                           
 14654                           ;UART.c: 330: TXREG = 'd';
 14655  1757  3064               	movlw	100
 14656  1758  009A               	movwf	26	;volatile
 14657  1759  0008               	return
 14658  175A                     __end_of_UART_send_break:	
 14659  175A                     PL6:	
 14660  175A  0AA3               	incf	i1Send_PS2@timeout,f
 14661  175B  1903               	skipnz
 14662  175C  0AA4               	incf	i1Send_PS2@timeout+1,f
 14663  175D  303A               	movlw	58
 14664  175E  0224               	subwf	i1Send_PS2@timeout+1,w
 14665  175F  3499               	retlw	153
 14666  1760                     __end_ofPL6:	
 14667  1760                     PL8:	
 14668  1760  303A               	movlw	58
 14669  1761  01F3               	clrf	i1delayUS@US+3
 14670  1762  01F2               	clrf	i1delayUS@US+2
 14671  1763  00F1               	movwf	i1delayUS@US+1
 14672  1764  3098               	movlw	152
 14673  1765  00F0               	movwf	i1delayUS@US
 14674  1766  0008               	return
 14675  1767                     __end_ofPL8:	
 14676  1767                     PL14:	
 14677  1767  0023               	movlb	3	; select bank3
 14678  1768  0856               	movf	(_BaudTyped+3)^(0+384),w
 14679  1769  0021               	movlb	1	; select bank1
 14680  176A  00AB               	movwf	(SetBaud@Baud+3)^(0+128)
 14681  176B  0023               	movlb	3	; select bank3
 14682  176C  0855               	movf	(_BaudTyped+2)^(0+384),w
 14683  176D  0021               	movlb	1	; select bank1
 14684  176E  00AA               	movwf	(SetBaud@Baud+2)^(0+128)
 14685  176F  0023               	movlb	3	; select bank3
 14686  1770  0854               	movf	(_BaudTyped+1)^(0+384),w
 14687  1771  0021               	movlb	1	; select bank1
 14688  1772  00A9               	movwf	(SetBaud@Baud+1)^(0+128)
 14689  1773  0023               	movlb	3	; select bank3
 14690  1774  0853               	movf	_BaudTyped^(0+384),w
 14691  1775  0021               	movlb	1	; select bank1
 14692  1776  00A8               	movwf	SetBaud@Baud^(0+128)
 14693  1777  0008               	return
 14694  1778                     __end_ofPL14:	
 14695  1778                     PL26:	
 14696  1778  0023               	movlb	3	; select bank3
 14697  1779  00E9               	movwf	_ParityTyped^(0+384)
 14698  177A  01F7               	clrf	i1UARTchar@override
 14699  177B  01F8               	clrf	i1UARTchar@NinethBit_override_data
 14700  177C  0022               	movlb	2	; select bank2
 14701  177D  086B               	movf	Process_PS2_ScanCode@temp^(0+256),w
 14702  177E  0008               	return
 14703  177F                     __end_ofPL26:	
 14704  177F                     PL30:	
 14705  177F  1803               	skipnc
 14706  1780  3E01               	addlw	1
 14707  1781  0085               	movwf	5
 14708  1782  0800               	movf	0,w	;code access
 14709  1783  0008               	return
 14710  1784                     __end_ofPL30:	
 14711  1784                     PL40:	
 14712  1784  01D7               	clrf	_PS_2_Read_Data_First^(0+384)
 14713  1785  01D8               	clrf	(_PS_2_Read_Data_First+1)^(0+384)
 14714  1786  01D9               	clrf	_PS_2_Read_Data_Second^(0+384)
 14715  1787  01DA               	clrf	(_PS_2_Read_Data_Second+1)^(0+384)
 14716  1788  01DB               	clrf	_PS_2_Read_Data_Third^(0+384)
 14717  1789  01DC               	clrf	(_PS_2_Read_Data_Third+1)^(0+384)
 14718  178A  0008               	return
 14719  178B                     __end_ofPL40:	
 14720  178B                     PL42:	
 14721  178B  30FD               	movlw	low ((STR_14+16)| (0+32768))
 14722  178C  00FB               	movwf	i1UARTstringWAIT@data
 14723  178D  309A               	movlw	high ((STR_14+16)| (0+32768))
 14724  178E  00FC               	movwf	i1UARTstringWAIT@data+1
 14725  178F  0008               	return
 14726  1790                     __end_ofPL42:	
 14727  1790                     PL48:	
 14728  1790  01F7               	clrf	i1UARTchar@override
 14729  1791  01F8               	clrf	i1UARTchar@NinethBit_override_data
 14730  1792  0022               	movlb	2	; select bank2
 14731  1793  086B               	movf	Process_PS2_ScanCode@temp^(0+256),w
 14732  1794  0008               	return
 14733  1795                     __end_ofPL48:	
 14734  1795                     PL56:	
 14735  1795  3027               	movlw	39
 14736  1796  01F3               	clrf	i1delayUS@US+3
 14737  1797  01F2               	clrf	i1delayUS@US+2
 14738  1798  00F1               	movwf	i1delayUS@US+1
 14739  1799  3010               	movlw	16
 14740  179A  00F0               	movwf	i1delayUS@US
 14741  179B  0008               	return
 14742  179C                     __end_ofPL56:	
 14743  179C                     PL64:	
 14744  179C  0777               	addwf	BufferShiftBack@buffer,w
 14745  179D  00F2               	movwf	??_BufferShiftBack
 14746  179E  0086               	movwf	6
 14747  179F  3002               	movlw	2	; select bank4/5
 14748  17A0  0087               	movwf	7
 14749  17A1  0008               	return
 14750  17A2                     __end_ofPL64:	
 14751  17A2                     PL66:	
 14752  17A2  3D21               	addwfc	(??_Process_PS2_ScanCode+1)^(0+256),w
 14753  17A3  00A3               	movwf	(??_Process_PS2_ScanCode+3)^(0+256)
 14754  17A4  3003               	movlw	3
 14755  17A5  0622               	xorwf	(??_Process_PS2_ScanCode+2)^(0+256),w
 14756  17A6  0423               	iorwf	((??_Process_PS2_ScanCode+2)^(0+256)+1),w
 14757  17A7  0008               	return
 14758  17A8                     __end_ofPL66:	
 14759  17A8                     PL86:	
 14760  17A8  0022               	movlb	2	; select bank2
 14761  17A9  00EB               	movwf	Process_PS2_ScanCode@temp^(0+256)
 14762  17AA  0023               	movlb	3	; select bank3
 14763  17AB  0860               	movf	_Caps_Lock^(0+384),w
 14764  17AC  0008               	return
 14765  17AD                     __end_ofPL86:	
 14766  17AD                     __ptext50:	
 14767 ;; *************** function _UART_send_break_timed *****************
 14768 ;; Defined at:
 14769 ;;		line 339 in file "UART.c"
 14770 ;; Parameters:    Size  Location     Type
 14771 ;;  US              2   10[COMMON] unsigned int 
 14772 ;; Auto vars:     Size  Location     Type
 14773 ;;		None
 14774 ;; Return value:  Size  Location     Type
 14775 ;;		None               void
 14776 ;; Registers used:
 14777 ;;		wreg, status,2, status,0, pclath, cstack
 14778 ;; Tracked objects:
 14779 ;;		On entry : 1F/2
 14780 ;;		On exit  : 1F/1C
 14781 ;;		Unchanged: 0/0
 14782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14783 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14786 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14787 ;;Total ram usage:        2 bytes
 14788 ;; Hardware stack levels used:    1
 14789 ;; Hardware stack levels required when called:    1
 14790 ;; This function calls:
 14791 ;;		i1_delayUS
 14792 ;; This function is called by:
 14793 ;;		_isr
 14794 ;;		_Process_PS2_ScanCode
 14795 ;; This function uses a non-reentrant model
 14796 ;;
 14797                           
 14798                           
 14799                           ;psect for function _UART_send_break_timed
 14800  17AD                     _UART_send_break_timed:	
 14801                           
 14802                           ;UART.c: 342: LATC |= 0b00000100;
 14803                           
 14804                           ;incstack = 0
 14805                           ; Regs used in _UART_send_break_timed: [wreg+status,2+status,0+pclath+cstack]
 14806                           
 14807                           ;UART.c: 343: PPSLOCK =0;
 14808                           
 14809                           ;UART.c: 344: RC2PPS = 0b00000000;
 14810                           
 14811                           ;UART.c: 345: PPSLOCK =1;
 14812  17AD  27BD  3190         	fcall	PL16	;call to abstracted procedure
 14813                           
 14814                           ;UART.c: 347: LATC &= ~0b00000100;
 14815  17AF  0022               	movlb	2	; select bank2
 14816  17B0  110E               	bcf	14,2	;volatile
 14817                           
 14818                           ;UART.c: 348: delayUS(US);
 14819  17B1  087A               	movf	UART_send_break_timed@US,w
 14820  17B2  00F0               	movwf	i1delayUS@US
 14821  17B3  087B               	movf	UART_send_break_timed@US+1,w
 14822  17B4  00F1               	movwf	i1delayUS@US+1
 14823  17B5  01F2               	clrf	i1delayUS@US+2
 14824  17B6  01F3               	clrf	i1delayUS@US+3
 14825  17B7  2699               	fcall	i1_delayUS
 14826                           
 14827                           ;UART.c: 349: LATC |= 0b00000100;
 14828  17B8  0022               	movlb	2	; select bank2
 14829  17B9  150E               	bsf	14,2	;volatile
 14830                           
 14831                           ;UART.c: 351: PPSLOCK =0;
 14832                           
 14833                           ;UART.c: 352: RC2PPS = 0b00010100;
 14834                           
 14835                           ;UART.c: 353: CKPPS = 0b00010010;
 14836                           
 14837                           ;UART.c: 355: RXPPS = 0b00010101;
 14838                           
 14839                           ;UART.c: 357: PPSLOCK =1;
 14840  17BA  318B  2366         	fcall	PL4	;call to abstracted procedure
 14841  17BC  0008               	return
 14842  17BD                     __end_of_UART_send_break_timed:	
 14843  17BD                     PL16:	
 14844  17BD  150E               	bsf	14,2	;volatile
 14845  17BE  003C               	movlb	28	; select bank28
 14846  17BF  018F               	clrf	15	;volatile
 14847  17C0  003D               	movlb	29	; select bank29
 14848  17C1  01A2               	clrf	34	;volatile
 14849  17C2  3001               	movlw	1
 14850  17C3  003C               	movlb	28	; select bank28
 14851  17C4  008F               	movwf	15	;volatile
 14852  17C5  0008               	return
 14853  17C6                     __end_ofPL16:	
 14854  17C6                     __ptext49:	
 14855 ;; *************** function ___lmul *****************
 14856 ;; Defined at:
 14857 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul32.c"
 14858 ;; Parameters:    Size  Location     Type
 14859 ;;  multiplier      4    0[COMMON] unsigned long 
 14860 ;;  multiplicand    4    4[COMMON] unsigned long 
 14861 ;; Auto vars:     Size  Location     Type
 14862 ;;  product         4    8[COMMON] unsigned long 
 14863 ;; Return value:  Size  Location     Type
 14864 ;;                  4    0[COMMON] unsigned long 
 14865 ;; Registers used:
 14866 ;;		wreg, status,2, status,0
 14867 ;; Tracked objects:
 14868 ;;		On entry : 1F/3
 14869 ;;		On exit  : 1F/3
 14870 ;;		Unchanged: 1E/0
 14871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14872 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14873 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14875 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14876 ;;Total ram usage:       12 bytes
 14877 ;; Hardware stack levels used:    1
 14878 ;; This function calls:
 14879 ;;		Nothing
 14880 ;; This function is called by:
 14881 ;;		_Process_PS2_ScanCode
 14882 ;; This function uses a non-reentrant model
 14883 ;;
 14884                           
 14885                           
 14886                           ;psect for function ___lmul
 14887  17C6                     ___lmul:	
 14888                           
 14889                           ;incstack = 0
 14890                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14891  17C6  01F8               	clrf	___lmul@product
 14892  17C7  01F9               	clrf	___lmul@product+1
 14893  17C8  01FA               	clrf	___lmul@product+2
 14894  17C9  01FB               	clrf	___lmul@product+3
 14895  17CA                     i1l1117:	
 14896  17CA  1C70               	btfss	___lmul@multiplier,0
 14897  17CB  2FD4               	goto	i1l5060
 14898  17CC  0874               	movf	___lmul@multiplicand,w
 14899  17CD  07F8               	addwf	___lmul@product,f
 14900  17CE  0875               	movf	___lmul@multiplicand+1,w
 14901  17CF  3DF9               	addwfc	___lmul@product+1,f
 14902  17D0  0876               	movf	___lmul@multiplicand+2,w
 14903  17D1  3DFA               	addwfc	___lmul@product+2,f
 14904  17D2  0877               	movf	___lmul@multiplicand+3,w
 14905  17D3  3DFB               	addwfc	___lmul@product+3,f
 14906  17D4                     i1l5060:	
 14907  17D4  35F4               	lslf	___lmul@multiplicand,f
 14908  17D5  0DF5               	rlf	___lmul@multiplicand+1,f
 14909  17D6  0DF6               	rlf	___lmul@multiplicand+2,f
 14910  17D7  0DF7               	rlf	___lmul@multiplicand+3,f
 14911  17D8  36F3               	lsrf	___lmul@multiplier+3,f
 14912  17D9  0CF2               	rrf	___lmul@multiplier+2,f
 14913  17DA  0CF1               	rrf	___lmul@multiplier+1,f
 14914  17DB  0CF0               	rrf	___lmul@multiplier,f
 14915  17DC  0873               	movf	___lmul@multiplier+3,w
 14916  17DD  0472               	iorwf	___lmul@multiplier+2,w
 14917  17DE  0471               	iorwf	___lmul@multiplier+1,w
 14918  17DF  0470               	iorwf	___lmul@multiplier,w
 14919  17E0  1D03               	skipz
 14920  17E1  2FCA               	goto	i1l1117
 14921  17E2  087B               	movf	___lmul@product+3,w
 14922  17E3  00F3               	movwf	?___lmul+3
 14923  17E4  087A               	movf	___lmul@product+2,w
 14924  17E5  00F2               	movwf	?___lmul+2
 14925  17E6  0879               	movf	___lmul@product+1,w
 14926  17E7  00F1               	movwf	?___lmul+1
 14927  17E8  0878               	movf	___lmul@product,w
 14928  17E9  00F0               	movwf	?___lmul
 14929  17EA  0008               	return
 14930  17EB                     __end_of___lmul:	
 14931  17EB                     __ptext48:	
 14932 ;; *************** function _cleanBuffer *****************
 14933 ;; Defined at:
 14934 ;;		line 163 in file "MISC.c"
 14935 ;; Parameters:    Size  Location     Type
 14936 ;;  data            1    wreg     PTR unsigned char 
 14937 ;;		 -> PS_2_ScanCodes(12), 
 14938 ;;  count           2    0[COMMON] int 
 14939 ;; Auto vars:     Size  Location     Type
 14940 ;;  data            1    3[COMMON] PTR unsigned char 
 14941 ;;		 -> PS_2_ScanCodes(12), 
 14942 ;;  i               1    4[COMMON] unsigned char 
 14943 ;; Return value:  Size  Location     Type
 14944 ;;		None               void
 14945 ;; Registers used:
 14946 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14947 ;; Tracked objects:
 14948 ;;		On entry : 1F/4
 14949 ;;		On exit  : 0/0
 14950 ;;		Unchanged: 0/0
 14951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14952 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14953 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14954 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14955 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14956 ;;Total ram usage:        5 bytes
 14957 ;; Hardware stack levels used:    1
 14958 ;; This function calls:
 14959 ;;		Nothing
 14960 ;; This function is called by:
 14961 ;;		_Process_PS2_ScanCode
 14962 ;; This function uses a non-reentrant model
 14963 ;;
 14964                           
 14965                           
 14966                           ;psect for function _cleanBuffer
 14967  17EB                     _cleanBuffer:	
 14968                           
 14969                           ;incstack = 0
 14970                           ; Regs used in _cleanBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
 14971                           ;cleanBuffer@data stored from wreg
 14972  17EB  00F3               	movwf	cleanBuffer@data
 14973                           
 14974                           ;MISC.c: 165: unsigned char i=0;
 14975  17EC  01F4               	clrf	cleanBuffer@i
 14976                           
 14977                           ;MISC.c: 166: for(i=0; i<count;i++)
 14978  17ED  01F4               	clrf	cleanBuffer@i
 14979  17EE                     i1l4848:	
 14980  17EE  0871               	movf	cleanBuffer@count+1,w
 14981  17EF  3A80               	xorlw	128
 14982  17F0  3C80               	sublw	128
 14983  17F1  1D03               	skipz
 14984  17F2  2FF5               	goto	u484_25
 14985  17F3  0870               	movf	cleanBuffer@count,w
 14986  17F4  0274               	subwf	cleanBuffer@i,w
 14987  17F5                     u484_25:	
 14988  17F5  1803               	btfsc	3,0
 14989  17F6  0008               	return
 14990                           
 14991                           ;MISC.c: 167: {
 14992                           ;MISC.c: 168: data[i]= 0;
 14993  17F7  0874               	movf	cleanBuffer@i,w
 14994  17F8  0773               	addwf	cleanBuffer@data,w
 14995  17F9  00F2               	movwf	??_cleanBuffer
 14996  17FA  0086               	movwf	6
 14997  17FB  3002               	movlw	2	; select bank4/5
 14998  17FC  0087               	movwf	7
 14999  17FD  0181               	clrf	1
 15000  17FE  0AF4               	incf	cleanBuffer@i,f
 15001  17FF  2FEE               	goto	i1l4848
 15002  1800                     __end_of_cleanBuffer:	
 15003                           
 15004                           	psect	text65
 15005  00DA                     __ptext65:	
 15006 ;; *************** function _WriteBaud *****************
 15007 ;; Defined at:
 15008 ;;		line 171 in file "FLASH.c"
 15009 ;; Parameters:    Size  Location     Type
 15010 ;;  row             2   73[BANK0 ] unsigned int 
 15011 ;;  Baud            4   75[BANK0 ] unsigned long 
 15012 ;;  Parity          1   79[BANK0 ] unsigned char 
 15013 ;; Auto vars:     Size  Location     Type
 15014 ;;  temp            4    4[BANK1 ] unsigned long 
 15015 ;; Return value:  Size  Location     Type
 15016 ;;		None               void
 15017 ;; Registers used:
 15018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15019 ;; Tracked objects:
 15020 ;;		On entry : 1F/0
 15021 ;;		On exit  : 1F/3
 15022 ;;		Unchanged: 0/0
 15023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15024 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15025 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15026 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15027 ;;      Totals:         0       7       8       0       0       0       0       0       0       0       0       0       
      +0       0
 15028 ;;Total ram usage:       15 bytes
 15029 ;; Hardware stack levels used:    1
 15030 ;; Hardware stack levels required when called:    3
 15031 ;; This function calls:
 15032 ;;		_WriteFlash_Sequential
 15033 ;; This function is called by:
 15034 ;;		_SetBaud
 15035 ;; This function uses a non-reentrant model
 15036 ;;
 15037                           
 15038                           
 15039                           ;psect for function _WriteBaud
 15040  00DA                     _WriteBaud:	
 15041                           
 15042                           ;FLASH.c: 173: unsigned long temp;
 15043                           ;FLASH.c: 174: temp = (Baud & 0x000FFFFF) + (((unsigned long) Parity & 0x7) << 20);
 15044                           
 15045                           ;incstack = 0
 15046                           ; Regs used in _WriteBaud: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15047  00DA  086E               	movf	WriteBaud@Baud+3,w
 15048  00DB  0021               	movlb	1	; select bank1
 15049  00DC  00A7               	movwf	(WriteBaud@temp+3)^(0+128)
 15050  00DD  0020               	movlb	0	; select bank0
 15051  00DE  086D               	movf	WriteBaud@Baud+2,w
 15052  00DF  0021               	movlb	1	; select bank1
 15053  00E0  00A6               	movwf	(WriteBaud@temp+2)^(0+128)
 15054  00E1  0020               	movlb	0	; select bank0
 15055  00E2  086C               	movf	WriteBaud@Baud+1,w
 15056  00E3  0021               	movlb	1	; select bank1
 15057  00E4  00A5               	movwf	(WriteBaud@temp+1)^(0+128)
 15058  00E5  0020               	movlb	0	; select bank0
 15059  00E6  086B               	movf	WriteBaud@Baud,w
 15060  00E7  0021               	movlb	1	; select bank1
 15061  00E8  00A4               	movwf	WriteBaud@temp^(0+128)
 15062  00E9  30FF               	movlw	255
 15063  00EA  05A4               	andwf	WriteBaud@temp^(0+128),f
 15064  00EB  05A5               	andwf	(WriteBaud@temp+1)^(0+128),f
 15065  00EC  300F               	movlw	15
 15066  00ED  05A6               	andwf	(WriteBaud@temp+2)^(0+128),f
 15067  00EE  01A7               	clrf	(WriteBaud@temp+3)^(0+128)
 15068  00EF  0020               	movlb	0	; select bank0
 15069  00F0  086F               	movf	WriteBaud@Parity,w
 15070  00F1  3907               	andlw	7
 15071  00F2  0021               	movlb	1	; select bank1
 15072  00F3  00A0               	movwf	??_WriteBaud^(0+128)
 15073  00F4  3014               	movlw	20
 15074  00F5  01A1               	clrf	(??_WriteBaud^(0+128)+1)
 15075  00F6  01A2               	clrf	(??_WriteBaud^(0+128)+2)
 15076  00F7  01A3               	clrf	(??_WriteBaud^(0+128)+3)
 15077  00F8                     u418_25:	
 15078  00F8  35A0               	lslf	??_WriteBaud^(0+128),f
 15079  00F9  0DA1               	rlf	(??_WriteBaud^(0+128)+1),f
 15080  00FA  0DA2               	rlf	(??_WriteBaud^(0+128)+2),f
 15081  00FB  0DA3               	rlf	(??_WriteBaud^(0+128)+3),f
 15082  00FC  0B89               	decfsz	9,f
 15083  00FD  28F8               	goto	u418_25
 15084  00FE  0820               	movf	??_WriteBaud^(0+128),w
 15085  00FF  07A4               	addwf	WriteBaud@temp^(0+128),f
 15086  0100  0821               	movf	(??_WriteBaud+1)^(0+128),w
 15087  0101  3DA5               	addwfc	(WriteBaud@temp+1)^(0+128),f
 15088  0102  0822               	movf	(??_WriteBaud+2)^(0+128),w
 15089  0103  3DA6               	addwfc	(WriteBaud@temp+2)^(0+128),f
 15090  0104  0823               	movf	(??_WriteBaud+3)^(0+128),w
 15091  0105  3DA7               	addwfc	(WriteBaud@temp+3)^(0+128),f
 15092                           
 15093                           ;FLASH.c: 175: MEM[1] = (unsigned int) (temp & 0x0003FFF);
 15094  0106  0824               	movf	WriteBaud@temp^(0+128),w
 15095  0107  0024               	movlb	4	; select bank4
 15096  0108  00BA               	movwf	(_MEM^(0+512)+2)
 15097  0109  303F               	movlw	63
 15098  010A  0021               	movlb	1	; select bank1
 15099  010B  0525               	andwf	(WriteBaud@temp+1)^(0+128),w
 15100  010C  0024               	movlb	4	; select bank4
 15101  010D  00BB               	movwf	((_MEM+1)^(0+512)+2)
 15102                           
 15103                           ;FLASH.c: 176: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 15104  010E  0021               	movlb	1	; select bank1
 15105  010F  0824               	movf	WriteBaud@temp^(0+128),w
 15106  0110  00A0               	movwf	??_WriteBaud^(0+128)
 15107  0111  0825               	movf	(WriteBaud@temp+1)^(0+128),w
 15108  0112  00A1               	movwf	(??_WriteBaud^(0+128)+1)
 15109  0113  0826               	movf	(WriteBaud@temp+2)^(0+128),w
 15110  0114  00A2               	movwf	(??_WriteBaud^(0+128)+2)
 15111  0115  0827               	movf	(WriteBaud@temp+3)^(0+128),w
 15112  0116  00A3               	movwf	(??_WriteBaud^(0+128)+3)
 15113  0117  300E               	movlw	14
 15114  0118                     u419_25:	
 15115  0118  36A3               	lsrf	(??_WriteBaud^(0+128)+3),f
 15116  0119  0CA2               	rrf	(??_WriteBaud^(0+128)+2),f
 15117  011A  0CA1               	rrf	(??_WriteBaud^(0+128)+1),f
 15118  011B  0CA0               	rrf	??_WriteBaud^(0+128),f
 15119  011C  0B89               	decfsz	9,f
 15120  011D  2918               	goto	u419_25
 15121  011E  0821               	movf	(??_WriteBaud+1)^(0+128),w
 15122  011F  0024               	movlb	4	; select bank4
 15123  0120  00B9               	movwf	(_MEM+1)^(0+512)
 15124  0121  0021               	movlb	1	; select bank1
 15125  0122  0820               	movf	??_WriteBaud^(0+128),w
 15126  0123  0024               	movlb	4	; select bank4
 15127  0124  00B8               	movwf	_MEM^(0+512)
 15128  0125  303F               	movlw	63
 15129  0126  05B9               	andwf	(_MEM+1)^(0+512),f
 15130                           
 15131                           ;FLASH.c: 177: WriteFlash_Sequential(row, MEM, 2);
 15132  0127  0020               	movlb	0	; select bank0
 15133  0128  086A               	movf	WriteBaud@row+1,w
 15134  0129  00FB               	movwf	WriteFlash_Sequential@row+1
 15135  012A  0869               	movf	WriteBaud@row,w
 15136  012B  00FA               	movwf	WriteFlash_Sequential@row
 15137  012C  3038               	movlw	(low (_MEM| (0+512)))& (0+255)
 15138  012D  00FC               	movwf	WriteFlash_Sequential@buffer
 15139  012E  3002               	movlw	2
 15140  012F  00FD               	movwf	WriteFlash_Sequential@amount
 15141  0130  2989               	ljmp	i1l4022
 15142  0131                     __end_of_WriteBaud:	
 15143  0131                     __ptext55:	
 15144 ;; *************** function i1_ReadBaud *****************
 15145 ;; Defined at:
 15146 ;;		line 187 in file "FLASH.c"
 15147 ;; Parameters:    Size  Location     Type
 15148 ;;  row             2    4[BANK0 ] unsigned int 
 15149 ;;  column          1    6[BANK0 ] unsigned char 
 15150 ;; Auto vars:     Size  Location     Type
 15151 ;;  ReadBaud        4   16[BANK0 ] unsigned long 
 15152 ;; Return value:  Size  Location     Type
 15153 ;;                  4    4[BANK0 ] unsigned long 
 15154 ;; Registers used:
 15155 ;;		wreg, status,2, status,0, pclath, cstack
 15156 ;; Tracked objects:
 15157 ;;		On entry : 1F/0
 15158 ;;		On exit  : 1F/0
 15159 ;;		Unchanged: 0/0
 15160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15161 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15162 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15163 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15164 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15165 ;;Total ram usage:       16 bytes
 15166 ;; Hardware stack levels used:    1
 15167 ;; Hardware stack levels required when called:    2
 15168 ;; This function calls:
 15169 ;;		i1_ReadFlash_4Byte
 15170 ;; This function is called by:
 15171 ;;		_SetBaud
 15172 ;; This function uses a non-reentrant model
 15173 ;;
 15174                           
 15175                           
 15176                           ;psect for function i1_ReadBaud
 15177  0131                     i1_ReadBaud:	
 15178                           
 15179                           ;FLASH.c: 189: unsigned long temp;
 15180                           ;FLASH.c: 190: temp =(ReadFlash_4Byte(row, column));
 15181                           
 15182                           ;incstack = 0
 15183                           ; Regs used in i1_ReadBaud: [wreg+status,2+status,0+pclath+cstack]
 15184  0131  0825               	movf	i1ReadBaud@row+1,w
 15185  0132  00F7               	movwf	i1ReadFlash_4Byte@row+1
 15186  0133  0824               	movf	i1ReadBaud@row,w
 15187  0134  00F6               	movwf	i1ReadFlash_4Byte@row
 15188  0135  0826               	movf	i1ReadBaud@column,w
 15189  0136  00F8               	movwf	i1ReadFlash_4Byte@column
 15190  0137  223F  3180         	fcall	i1_ReadFlash_4Byte
 15191  0139  0879               	movf	?i1_ReadFlash_4Byte+3,w
 15192  013A  00B3               	movwf	i1ReadBaud@temp+3
 15193  013B  0878               	movf	?i1_ReadFlash_4Byte+2,w
 15194  013C  00B2               	movwf	i1ReadBaud@temp+2
 15195  013D  0877               	movf	?i1_ReadFlash_4Byte+1,w
 15196  013E  00B1               	movwf	i1ReadBaud@temp+1
 15197  013F  0876               	movf	?i1_ReadFlash_4Byte,w
 15198  0140  00B0               	movwf	i1ReadBaud@temp
 15199                           
 15200                           ;FLASH.c: 191: MEM[1] = (unsigned int)(temp & 0x0003FFF);
 15201  0141  0024               	movlb	4	; select bank4
 15202  0142  00BA               	movwf	(_MEM^(0+512)+2)
 15203  0143  303F               	movlw	63
 15204  0144  0020               	movlb	0	; select bank0
 15205  0145  0531               	andwf	i1ReadBaud@temp+1,w
 15206  0146  0024               	movlb	4	; select bank4
 15207  0147  00BB               	movwf	((_MEM+1)^(0+512)+2)
 15208                           
 15209                           ;FLASH.c: 192: MEM[0] = (unsigned int)((temp & 0xFFFC000) >> 14);
 15210  0148  0020               	movlb	0	; select bank0
 15211  0149  0830               	movf	i1ReadBaud@temp,w
 15212  014A  00A8               	movwf	??i1_ReadBaud
 15213  014B  0831               	movf	i1ReadBaud@temp+1,w
 15214  014C  00A9               	movwf	??i1_ReadBaud+1
 15215  014D  0832               	movf	i1ReadBaud@temp+2,w
 15216  014E  00AA               	movwf	??i1_ReadBaud+2
 15217  014F  0833               	movf	i1ReadBaud@temp+3,w
 15218  0150  00AB               	movwf	??i1_ReadBaud+3
 15219  0151  300E               	movlw	14
 15220  0152                     u469_25:	
 15221  0152  36AB               	lsrf	??i1_ReadBaud+3,f
 15222  0153  0CAA               	rrf	??i1_ReadBaud+2,f
 15223  0154  0CA9               	rrf	??i1_ReadBaud+1,f
 15224  0155  0CA8               	rrf	??i1_ReadBaud,f
 15225  0156  0B89               	decfsz	9,f
 15226  0157  2952               	goto	u469_25
 15227  0158  0829               	movf	??i1_ReadBaud+1,w
 15228  0159  0024               	movlb	4	; select bank4
 15229  015A  00B9               	movwf	(_MEM+1)^(0+512)
 15230  015B  0020               	movlb	0	; select bank0
 15231  015C  0828               	movf	??i1_ReadBaud,w
 15232                           
 15233                           ;FLASH.c: 193: return (((unsigned long)MEM[0] << 12) + (unsigned long)MEM[1]);
 15234  015D  229A  3180         	fcall	PL34	;call to abstracted procedure
 15235  015F  0020               	movlb	0	; select bank0
 15236  0160  00A8               	movwf	??i1_ReadBaud
 15237  0161  0024               	movlb	4	; select bank4
 15238  0162  083B               	movf	((_MEM+1)^(0+512)+2),w
 15239  0163  0020               	movlb	0	; select bank0
 15240  0164  00A9               	movwf	??i1_ReadBaud+1
 15241  0165  01AA               	clrf	??i1_ReadBaud+2
 15242  0166  01AB               	clrf	??i1_ReadBaud+3
 15243  0167  0024               	movlb	4	; select bank4
 15244  0168  0838               	movf	_MEM^(0+512),w
 15245  0169  0020               	movlb	0	; select bank0
 15246  016A  00AC               	movwf	??i1_ReadBaud+4
 15247  016B  0024               	movlb	4	; select bank4
 15248  016C  0839               	movf	(_MEM+1)^(0+512),w
 15249  016D  0020               	movlb	0	; select bank0
 15250  016E  00AD               	movwf	??i1_ReadBaud+5
 15251  016F  300C               	movlw	12
 15252  0170  01AE               	clrf	??i1_ReadBaud+6
 15253  0171  01AF               	clrf	??i1_ReadBaud+7
 15254  0172                     u470_25:	
 15255  0172  35AC               	lslf	??i1_ReadBaud+4,f
 15256  0173  0DAD               	rlf	??i1_ReadBaud+5,f
 15257  0174  0DAE               	rlf	??i1_ReadBaud+6,f
 15258  0175  0DAF               	rlf	??i1_ReadBaud+7,f
 15259  0176  0B89               	decfsz	9,f
 15260  0177  2972               	goto	u470_25
 15261  0178  082C               	movf	??i1_ReadBaud+4,w
 15262  0179  07A8               	addwf	??i1_ReadBaud,f
 15263  017A  082D               	movf	??i1_ReadBaud+5,w
 15264  017B  3DA9               	addwfc	??i1_ReadBaud+1,f
 15265  017C  082E               	movf	??i1_ReadBaud+6,w
 15266  017D  3DAA               	addwfc	??i1_ReadBaud+2,f
 15267  017E  082F               	movf	??i1_ReadBaud+7,w
 15268  017F  3DAB               	addwfc	??i1_ReadBaud+3,f
 15269  0180  082B               	movf	??i1_ReadBaud+3,w
 15270  0181  00A7               	movwf	?i1_ReadBaud+3
 15271  0182  082A               	movf	??i1_ReadBaud+2,w
 15272  0183  00A6               	movwf	?i1_ReadBaud+2
 15273  0184  0829               	movf	??i1_ReadBaud+1,w
 15274  0185  00A5               	movwf	?i1_ReadBaud+1
 15275  0186  0828               	movf	??i1_ReadBaud,w
 15276  0187  00A4               	movwf	?i1_ReadBaud
 15277  0188  0008               	return
 15278  0189                     __end_ofi1_ReadBaud:	
 15279  0189                     __ptext66:	
 15280 ;; *************** function _WriteFlash_Sequential *****************
 15281 ;; Defined at:
 15282 ;;		line 112 in file "FLASH.c"
 15283 ;; Parameters:    Size  Location     Type
 15284 ;;  row             2   10[COMMON] unsigned int 
 15285 ;;  buffer          1   12[COMMON] PTR unsigned int 
 15286 ;;		 -> MEM(4), 
 15287 ;;  amount          1   13[COMMON] unsigned char 
 15288 ;; Auto vars:     Size  Location     Type
 15289 ;;  TempBufL       32   34[BANK0 ] unsigned char [32]
 15290 ;;  TempBufH       32    2[BANK0 ] unsigned char [32]
 15291 ;;  temp            2   69[BANK0 ] unsigned int 
 15292 ;;  i               1   72[BANK0 ] unsigned char 
 15293 ;;  spaces          1   71[BANK0 ] unsigned char 
 15294 ;;  tempH           1   68[BANK0 ] unsigned char 
 15295 ;;  amountTemp      1   67[BANK0 ] unsigned char 
 15296 ;;  tempL           1   66[BANK0 ] unsigned char 
 15297 ;; Return value:  Size  Location     Type
 15298 ;;		None               void
 15299 ;; Registers used:
 15300 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15301 ;; Tracked objects:
 15302 ;;		On entry : 1F/0
 15303 ;;		On exit  : 1F/3
 15304 ;;		Unchanged: 0/0
 15305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15306 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15307 ;;      Locals:         0      71       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15308 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15309 ;;      Totals:         4      73       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15310 ;;Total ram usage:       77 bytes
 15311 ;; Hardware stack levels used:    1
 15312 ;; Hardware stack levels required when called:    2
 15313 ;; This function calls:
 15314 ;;		_BlockErase
 15315 ;;		_UNLOCK
 15316 ;;		i1_ReadFlash_2Byte
 15317 ;;		i1_delayUS
 15318 ;; This function is called by:
 15319 ;;		_WriteBaud
 15320 ;; This function uses a non-reentrant model
 15321 ;;
 15322                           
 15323                           
 15324                           ;psect for function _WriteFlash_Sequential
 15325  0189                     _WriteFlash_Sequential:	
 15326  0189                     i1l4022:	
 15327                           ;incstack = 0
 15328                           ; Regs used in _WriteFlash_Sequential: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15329                           
 15330                           
 15331                           ;FLASH.c: 114: unsigned char spaces = 32;
 15332  0189  3020               	movlw	32
 15333  018A  00E7               	movwf	WriteFlash_Sequential@spaces
 15334                           
 15335                           ;FLASH.c: 115: unsigned char tempH;
 15336                           ;FLASH.c: 116: unsigned char tempL;
 15337                           ;FLASH.c: 117: unsigned char i;
 15338                           ;FLASH.c: 118: unsigned int temp;
 15339                           ;FLASH.c: 119: unsigned char amountTemp =0;
 15340  018B  01E3               	clrf	WriteFlash_Sequential@amountTemp
 15341                           
 15342                           ;FLASH.c: 120: unsigned char TempBufH[32];
 15343                           ;FLASH.c: 121: unsigned char TempBufL[32];
 15344                           ;FLASH.c: 123: for(i=0;i<spaces;i++)
 15345  018C  01E8               	clrf	WriteFlash_Sequential@i
 15346  018D                     i1l4054:	
 15347  018D  0867               	movf	WriteFlash_Sequential@spaces,w
 15348  018E  0268               	subwf	WriteFlash_Sequential@i,w
 15349  018F  1803               	btfsc	3,0
 15350  0190  29C8               	goto	i1l4056
 15351                           
 15352                           ;FLASH.c: 124: {
 15353                           ;FLASH.c: 125: amountTemp++;
 15354  0191  0AE3               	incf	WriteFlash_Sequential@amountTemp,f
 15355                           
 15356                           ;FLASH.c: 126: if(amountTemp <= amount)
 15357  0192  0863               	movf	WriteFlash_Sequential@amountTemp,w
 15358  0193  027D               	subwf	WriteFlash_Sequential@amount,w
 15359  0194  1C03               	skipc
 15360  0195  29A8               	goto	i1l4040
 15361                           
 15362                           ;FLASH.c: 127: {
 15363                           ;FLASH.c: 128: tempH = (unsigned char)((*buffer & 0x3F00) >> 8);
 15364  0196  087C               	movf	WriteFlash_Sequential@buffer,w
 15365  0197  0086               	movwf	6
 15366  0198  3002               	movlw	2	; select bank4/5
 15367  0199  0087               	movwf	7
 15368  019A  3F40               	moviw [0]fsr1
 15369  019B  00A0               	movwf	??_WriteFlash_Sequential
 15370  019C  3F41               	moviw [1]fsr1
 15371  019D  00A1               	movwf	??_WriteFlash_Sequential+1
 15372  019E  00E4               	movwf	WriteFlash_Sequential@tempH
 15373  019F  303F               	movlw	63
 15374  01A0  05E4               	andwf	WriteFlash_Sequential@tempH,f
 15375                           
 15376                           ;FLASH.c: 129: tempL = (unsigned char)(*buffer & 0x00FF);
 15377  01A1  087C               	movf	WriteFlash_Sequential@buffer,w
 15378  01A2  0086               	movwf	6
 15379  01A3  0801               	movf	1,w
 15380  01A4  00E2               	movwf	WriteFlash_Sequential@tempL
 15381                           
 15382                           ;FLASH.c: 130: buffer++;
 15383  01A5  0AFC               	incf	WriteFlash_Sequential@buffer,f
 15384  01A6  0AFC               	incf	WriteFlash_Sequential@buffer,f
 15385                           
 15386                           ;FLASH.c: 131: }
 15387  01A7  29BB               	goto	i1l4048
 15388  01A8                     i1l4040:	
 15389                           
 15390                           ;FLASH.c: 132: else
 15391                           ;FLASH.c: 133: {
 15392                           ;FLASH.c: 135: temp = ReadFlash_2Byte(row, i);
 15393  01A8  087B               	movf	WriteFlash_Sequential@row+1,w
 15394  01A9  00F1               	movwf	i1ReadFlash_2Byte@row+1
 15395  01AA  087A               	movf	WriteFlash_Sequential@row,w
 15396  01AB  00F0               	movwf	i1ReadFlash_2Byte@row
 15397  01AC  0868               	movf	WriteFlash_Sequential@i,w
 15398  01AD  00F2               	movwf	i1ReadFlash_2Byte@column
 15399  01AE  226D  3180         	fcall	i1_ReadFlash_2Byte
 15400  01B0  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15401  01B1  0020               	movlb	0	; select bank0
 15402  01B2  00E6               	movwf	WriteFlash_Sequential@temp+1
 15403  01B3  0870               	movf	?i1_ReadFlash_2Byte,w
 15404  01B4  00E5               	movwf	WriteFlash_Sequential@temp
 15405                           
 15406                           ;FLASH.c: 136: tempH = (unsigned char)((temp & 0x3F00) >>8);
 15407  01B5  0866               	movf	WriteFlash_Sequential@temp+1,w
 15408  01B6  00E4               	movwf	WriteFlash_Sequential@tempH
 15409  01B7  303F               	movlw	63
 15410  01B8  05E4               	andwf	WriteFlash_Sequential@tempH,f
 15411                           
 15412                           ;FLASH.c: 137: tempL = (unsigned char)(temp & 0x00FF);
 15413  01B9  0865               	movf	WriteFlash_Sequential@temp,w
 15414  01BA  00E2               	movwf	WriteFlash_Sequential@tempL
 15415  01BB                     i1l4048:	
 15416                           
 15417                           ;FLASH.c: 138: }
 15418                           ;FLASH.c: 139: TempBufH[i] = tempH;
 15419  01BB  0868               	movf	WriteFlash_Sequential@i,w
 15420  01BC  3E22               	addlw	(low (WriteFlash_Sequential@TempBufH| 0))& (0+255)
 15421  01BD  0086               	movwf	6
 15422  01BE  0187               	clrf	7
 15423  01BF  0864               	movf	WriteFlash_Sequential@tempH,w
 15424  01C0  0081               	movwf	1
 15425                           
 15426                           ;FLASH.c: 140: TempBufL[i] = tempL;
 15427  01C1  0868               	movf	WriteFlash_Sequential@i,w
 15428  01C2  3E42               	addlw	(low (WriteFlash_Sequential@TempBufL| 0))& (0+255)
 15429  01C3  0086               	movwf	6
 15430  01C4  0862               	movf	WriteFlash_Sequential@tempL,w
 15431  01C5  0081               	movwf	1
 15432  01C6  0AE8               	incf	WriteFlash_Sequential@i,f
 15433  01C7  298D               	goto	i1l4054
 15434  01C8                     i1l4056:	
 15435                           
 15436                           ;FLASH.c: 141: }
 15437                           ;FLASH.c: 142: BlockErase(row);
 15438  01C8  087B               	movf	WriteFlash_Sequential@row+1,w
 15439  01C9  00F1               	movwf	BlockErase@row+1
 15440  01CA  087A               	movf	WriteFlash_Sequential@row,w
 15441  01CB  00F0               	movwf	BlockErase@row
 15442  01CC  2220               	fcall	_BlockErase
 15443                           
 15444                           ;FLASH.c: 143: delayUS(1000);
 15445  01CD  3003               	movlw	3
 15446  01CE  01F3               	clrf	i1delayUS@US+3
 15447  01CF  01F2               	clrf	i1delayUS@US+2
 15448  01D0  00F1               	movwf	i1delayUS@US+1
 15449  01D1  30E8               	movlw	232
 15450  01D2  00F0               	movwf	i1delayUS@US
 15451  01D3  3196  2699  3180   	fcall	i1_delayUS
 15452                           
 15453                           ;FLASH.c: 144: INTCON &= ~0x80;
 15454  01D6  138B               	bcf	11,7	;volatile
 15455                           
 15456                           ;FLASH.c: 145: PMCON1 |= 0b00000100;
 15457  01D7  0023               	movlb	3	; select bank3
 15458  01D8  1515               	bsf	21,2	;volatile
 15459                           
 15460                           ;FLASH.c: 146: PMCON1 &= ~0b01000000;
 15461  01D9  1315               	bcf	21,6	;volatile
 15462                           
 15463                           ;FLASH.c: 147: PMCON1 &= ~0b00100000;
 15464  01DA  1295               	bcf	21,5	;volatile
 15465                           
 15466                           ;FLASH.c: 148: PMCON1 &= ~0b00010000;
 15467  01DB  1215               	bcf	21,4	;volatile
 15468                           
 15469                           ;FLASH.c: 149: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 15470  01DC  087B               	movf	WriteFlash_Sequential@row+1,w
 15471  01DD  0020               	movlb	0	; select bank0
 15472  01DE  00A1               	movwf	??_WriteFlash_Sequential+1
 15473  01DF  087A               	movf	WriteFlash_Sequential@row,w
 15474  01E0  00A0               	movwf	??_WriteFlash_Sequential
 15475  01E1  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 15476  01E2  0CA0               	rrf	??_WriteFlash_Sequential,f
 15477  01E3  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 15478  01E4  0CA0               	rrf	??_WriteFlash_Sequential,f
 15479  01E5  36A1               	lsrf	??_WriteFlash_Sequential+1,f
 15480  01E6  0CA0               	rrf	??_WriteFlash_Sequential,f
 15481  01E7  0820               	movf	??_WriteFlash_Sequential,w
 15482  01E8  397F               	andlw	127
 15483  01E9  0023               	movlb	3	; select bank3
 15484  01EA  0092               	movwf	18	;volatile
 15485                           
 15486                           ;FLASH.c: 150: PMADRL = (unsigned char)((row & 0x007) << 5);
 15487  01EB  087A               	movf	WriteFlash_Sequential@row,w
 15488  01EC  3907               	andlw	7
 15489  01ED  0020               	movlb	0	; select bank0
 15490  01EE  00A0               	movwf	??_WriteFlash_Sequential
 15491  01EF  3004               	movlw	4
 15492  01F0                     u377_25:	
 15493  01F0  35A0               	lslf	??_WriteFlash_Sequential,f
 15494  01F1  3EFF               	addlw	-1
 15495  01F2  1D03               	skipz
 15496  01F3  29F0               	goto	u377_25
 15497  01F4  3520               	lslf	??_WriteFlash_Sequential,w
 15498  01F5  0023               	movlb	3	; select bank3
 15499  01F6  0091               	movwf	17	;volatile
 15500                           
 15501                           ;FLASH.c: 152: for(i=0;i<spaces;i++)
 15502  01F7  0020               	movlb	0	; select bank0
 15503  01F8  01E8               	clrf	WriteFlash_Sequential@i
 15504  01F9                     i1l4086:	
 15505  01F9  0867               	movf	WriteFlash_Sequential@spaces,w
 15506  01FA  0268               	subwf	WriteFlash_Sequential@i,w
 15507  01FB  1803               	btfsc	3,0
 15508  01FC  2A14               	goto	i1l983
 15509                           
 15510                           ;FLASH.c: 153: {
 15511                           ;FLASH.c: 154: PMDATH = TempBufH[i];
 15512  01FD  0868               	movf	WriteFlash_Sequential@i,w
 15513  01FE  3E22               	addlw	(low (WriteFlash_Sequential@TempBufH| 0))& (0+255)
 15514  01FF  0086               	movwf	6
 15515  0200  0187               	clrf	7
 15516  0201  0801               	movf	1,w
 15517  0202  0023               	movlb	3	; select bank3
 15518  0203  0094               	movwf	20	;volatile
 15519                           
 15520                           ;FLASH.c: 155: PMDATL = TempBufL[i];
 15521  0204  0020               	movlb	0	; select bank0
 15522  0205  0868               	movf	WriteFlash_Sequential@i,w
 15523  0206  3E42               	addlw	(low (WriteFlash_Sequential@TempBufL| 0))& (0+255)
 15524  0207  0086               	movwf	6
 15525  0208  0801               	movf	1,w
 15526  0209  0023               	movlb	3	; select bank3
 15527  020A  0093               	movwf	19	;volatile
 15528                           
 15529                           ;FLASH.c: 156: __nop();
 15530  020B  0000               	nop
 15531                           
 15532                           ;FLASH.c: 157: __nop();
 15533  020C  0000               	nop
 15534                           
 15535                           ;FLASH.c: 158: UNLOCK();
 15536  020D  2215  3180         	fcall	_UNLOCK
 15537                           
 15538                           ;FLASH.c: 159: PMADRL++;
 15539  020F  0023               	movlb	3	; select bank3
 15540  0210  0A91               	incf	17,f	;volatile
 15541  0211  0020               	movlb	0	; select bank0
 15542  0212  0AE8               	incf	WriteFlash_Sequential@i,f
 15543  0213  29F9               	goto	i1l4086
 15544  0214                     i1l983:	
 15545                           
 15546                           ;FLASH.c: 161: }
 15547                           ;FLASH.c: 162: PMCON1 &= ~0b00000100;
 15548                           
 15549                           ;FLASH.c: 163: INTCON |= 0x80;
 15550  0214  2AAF               	ljmp	PL84	;call to abstracted procedure
 15551  0215                     __end_of_WriteFlash_Sequential:	
 15552  0215                     __ptext70:	
 15553 ;; *************** function _UNLOCK *****************
 15554 ;; Defined at:
 15555 ;;		line 76 in file "FLASH.c"
 15556 ;; Parameters:    Size  Location     Type
 15557 ;;		None
 15558 ;; Auto vars:     Size  Location     Type
 15559 ;;		None
 15560 ;; Return value:  Size  Location     Type
 15561 ;;		None               void
 15562 ;; Registers used:
 15563 ;;		wreg
 15564 ;; Tracked objects:
 15565 ;;		On entry : 0/3
 15566 ;;		On exit  : 0/0
 15567 ;;		Unchanged: 0/0
 15568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15573 ;;Total ram usage:        0 bytes
 15574 ;; Hardware stack levels used:    1
 15575 ;; This function calls:
 15576 ;;		Nothing
 15577 ;; This function is called by:
 15578 ;;		_BlockErase
 15579 ;;		_WriteFlash_Sequential
 15580 ;; This function uses a non-reentrant model
 15581 ;;
 15582                           
 15583                           
 15584                           ;psect for function _UNLOCK
 15585  0215                     _UNLOCK:	
 15586                           
 15587                           ;FLASH.c: 78: PMCON2 = 0x55;
 15588                           
 15589                           ;incstack = 0
 15590                           ; Regs used in _UNLOCK: [wreg]
 15591  0215  3055               	movlw	85
 15592  0216  0023               	movlb	3	; select bank3
 15593  0217  0096               	movwf	22	;volsfr
 15594                           
 15595                           ;FLASH.c: 79: PMCON2 = 0xAA;
 15596  0218  30AA               	movlw	170
 15597  0219  0096               	movwf	22	;volsfr
 15598                           
 15599                           ;FLASH.c: 80: PMCON1 |= 0b00000010;
 15600  021A  1495               	bsf	21,1	;volatile
 15601  021B                     i1l967:	
 15602                           ;FLASH.c: 81: while(PMCON1 & 0b00000010);
 15603                           
 15604  021B  1895               	btfsc	21,1	;volatile
 15605  021C  2A1B               	goto	i1l967
 15606                           
 15607                           ;FLASH.c: 82: __nop();
 15608  021D  0000               	nop
 15609                           
 15610                           ;FLASH.c: 83: __nop();
 15611  021E  0000               	nop
 15612  021F  0008               	return
 15613  0220                     __end_of_UNLOCK:	
 15614  0220                     __ptext69:	
 15615 ;; *************** function _BlockErase *****************
 15616 ;; Defined at:
 15617 ;;		line 91 in file "FLASH.c"
 15618 ;; Parameters:    Size  Location     Type
 15619 ;;  row             2    0[COMMON] unsigned int 
 15620 ;; Auto vars:     Size  Location     Type
 15621 ;;		None
 15622 ;; Return value:  Size  Location     Type
 15623 ;;		None               void
 15624 ;; Registers used:
 15625 ;;		wreg, status,2, status,0, pclath, cstack
 15626 ;; Tracked objects:
 15627 ;;		On entry : 1F/0
 15628 ;;		On exit  : 1F/3
 15629 ;;		Unchanged: 0/0
 15630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15631 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15633 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15634 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15635 ;;Total ram usage:        4 bytes
 15636 ;; Hardware stack levels used:    1
 15637 ;; Hardware stack levels required when called:    1
 15638 ;; This function calls:
 15639 ;;		_UNLOCK
 15640 ;; This function is called by:
 15641 ;;		_WriteFlash_Sequential
 15642 ;; This function uses a non-reentrant model
 15643 ;;
 15644                           
 15645                           
 15646                           ;psect for function _BlockErase
 15647  0220                     _BlockErase:	
 15648                           
 15649                           ;FLASH.c: 93: INTCON &= ~0x80;
 15650                           
 15651                           ;incstack = 0
 15652                           ; Regs used in _BlockErase: [wreg+status,2+status,0+pclath+cstack]
 15653  0220  138B               	bcf	11,7	;volatile
 15654                           
 15655                           ;FLASH.c: 94: PMCON1 &= ~0b01000000;
 15656  0221  0023               	movlb	3	; select bank3
 15657  0222  1315               	bcf	21,6	;volatile
 15658                           
 15659                           ;FLASH.c: 95: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 15660  0223  0871               	movf	BlockErase@row+1,w
 15661  0224  00F3               	movwf	??_BlockErase+1
 15662  0225  0870               	movf	BlockErase@row,w
 15663  0226  00F2               	movwf	??_BlockErase
 15664  0227  36F3               	lsrf	??_BlockErase+1,f
 15665  0228  0CF2               	rrf	??_BlockErase,f
 15666  0229  36F3               	lsrf	??_BlockErase+1,f
 15667  022A  0CF2               	rrf	??_BlockErase,f
 15668  022B  36F3               	lsrf	??_BlockErase+1,f
 15669  022C  0CF2               	rrf	??_BlockErase,f
 15670  022D  0872               	movf	??_BlockErase,w
 15671  022E  397F               	andlw	127
 15672  022F  0092               	movwf	18	;volatile
 15673                           
 15674                           ;FLASH.c: 96: PMADRL = (unsigned char)((row & 0x007) << 5);
 15675  0230  0870               	movf	BlockErase@row,w
 15676  0231  3907               	andlw	7
 15677  0232  00F2               	movwf	??_BlockErase
 15678  0233  3004               	movlw	4
 15679  0234                     u351_25:	
 15680  0234  35F2               	lslf	??_BlockErase,f
 15681  0235  3EFF               	addlw	-1
 15682  0236  1D03               	skipz
 15683  0237  2A34               	goto	u351_25
 15684  0238  3572               	lslf	??_BlockErase,w
 15685  0239  0091               	movwf	17	;volatile
 15686                           
 15687                           ;FLASH.c: 97: PMCON1 |= 0b00010000;
 15688  023A  1615               	bsf	21,4	;volatile
 15689                           
 15690                           ;FLASH.c: 98: PMCON1 |= 0b00000100;
 15691  023B  1515               	bsf	21,2	;volatile
 15692                           
 15693                           ;FLASH.c: 99: UNLOCK();
 15694  023C  2215  3180         	fcall	_UNLOCK
 15695                           
 15696                           ;FLASH.c: 100: PMCON1 &= ~0b00000100;
 15697                           
 15698                           ;FLASH.c: 101: INTCON |= 0x80;
 15699  023E  2AAF               	ljmp	PL84	;call to abstracted procedure
 15700  023F                     __end_of_BlockErase:	
 15701  023F                     __ptext56:	
 15702 ;; *************** function i1_ReadFlash_4Byte *****************
 15703 ;; Defined at:
 15704 ;;		line 62 in file "FLASH.c"
 15705 ;; Parameters:    Size  Location     Type
 15706 ;;  row             2    6[COMMON] unsigned int 
 15707 ;;  column          1    8[COMMON] unsigned char 
 15708 ;; Auto vars:     Size  Location     Type
 15709 ;;  ReadFlash_4B    4    0[BANK0 ] unsigned long 
 15710 ;; Return value:  Size  Location     Type
 15711 ;;                  4    6[COMMON] unsigned long 
 15712 ;; Registers used:
 15713 ;;		wreg, status,2, status,0, pclath, cstack
 15714 ;; Tracked objects:
 15715 ;;		On entry : 1F/0
 15716 ;;		On exit  : 1F/0
 15717 ;;		Unchanged: 0/0
 15718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15719 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15720 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15721 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15722 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15723 ;;Total ram usage:       12 bytes
 15724 ;; Hardware stack levels used:    1
 15725 ;; Hardware stack levels required when called:    1
 15726 ;; This function calls:
 15727 ;;		i1_ReadFlash_2Byte
 15728 ;; This function is called by:
 15729 ;;		i1_ReadBaud
 15730 ;; This function uses a non-reentrant model
 15731 ;;
 15732                           
 15733                           
 15734                           ;psect for function i1_ReadFlash_4Byte
 15735  023F                     i1_ReadFlash_4Byte:	
 15736                           
 15737                           ;FLASH.c: 65: temp = ((unsigned long)ReadFlash_2Byte(row, column) << 16);
 15738                           
 15739                           ;incstack = 0
 15740                           ; Regs used in i1_ReadFlash_4Byte: [wreg+status,2+status,0+pclath+cstack]
 15741  023F  22A9  3180         	fcall	PL62	;call to abstracted procedure
 15742  0241  00F2               	movwf	i1ReadFlash_2Byte@column
 15743  0242  226D  3180         	fcall	i1_ReadFlash_2Byte
 15744  0244  22A2  3180         	fcall	PL46	;call to abstracted procedure
 15745  0246  00FD               	movwf	??i1_ReadFlash_4Byte+3
 15746  0247  087A               	movf	??i1_ReadFlash_4Byte,w
 15747  0248  00FC               	movwf	??i1_ReadFlash_4Byte+2
 15748  0249  01FB               	clrf	??i1_ReadFlash_4Byte+1
 15749  024A  01FA               	clrf	??i1_ReadFlash_4Byte
 15750  024B  087D               	movf	??i1_ReadFlash_4Byte+3,w
 15751  024C  0020               	movlb	0	; select bank0
 15752  024D  00A3               	movwf	i1ReadFlash_4Byte@temp+3
 15753  024E  087C               	movf	??i1_ReadFlash_4Byte+2,w
 15754  024F  00A2               	movwf	i1ReadFlash_4Byte@temp+2
 15755  0250  087B               	movf	??i1_ReadFlash_4Byte+1,w
 15756  0251  00A1               	movwf	i1ReadFlash_4Byte@temp+1
 15757  0252  087A               	movf	??i1_ReadFlash_4Byte,w
 15758  0253  00A0               	movwf	i1ReadFlash_4Byte@temp
 15759                           
 15760                           ;FLASH.c: 66: temp |= ((unsigned long)ReadFlash_2Byte(row, (column + 1)));
 15761  0254  22A9  3180         	fcall	PL62	;call to abstracted procedure
 15762  0256  3E01               	addlw	1
 15763  0257  00F2               	movwf	i1ReadFlash_2Byte@column
 15764  0258  226D  3180         	fcall	i1_ReadFlash_2Byte
 15765  025A  22A2               	fcall	PL46	;call to abstracted procedure
 15766  025B  087A               	movf	??i1_ReadFlash_4Byte,w
 15767  025C  0020               	movlb	0	; select bank0
 15768  025D  04A0               	iorwf	i1ReadFlash_4Byte@temp,f
 15769  025E  087B               	movf	??i1_ReadFlash_4Byte+1,w
 15770  025F  04A1               	iorwf	i1ReadFlash_4Byte@temp+1,f
 15771  0260  087C               	movf	??i1_ReadFlash_4Byte+2,w
 15772  0261  04A2               	iorwf	i1ReadFlash_4Byte@temp+2,f
 15773  0262  087D               	movf	??i1_ReadFlash_4Byte+3,w
 15774  0263  04A3               	iorwf	i1ReadFlash_4Byte@temp+3,f
 15775                           
 15776                           ;FLASH.c: 67: return temp;
 15777  0264  0823               	movf	i1ReadFlash_4Byte@temp+3,w
 15778  0265  00F9               	movwf	?i1_ReadFlash_4Byte+3
 15779  0266  0822               	movf	i1ReadFlash_4Byte@temp+2,w
 15780  0267  00F8               	movwf	?i1_ReadFlash_4Byte+2
 15781  0268  0821               	movf	i1ReadFlash_4Byte@temp+1,w
 15782  0269  00F7               	movwf	?i1_ReadFlash_4Byte+1
 15783  026A  0820               	movf	i1ReadFlash_4Byte@temp,w
 15784  026B  00F6               	movwf	?i1_ReadFlash_4Byte
 15785  026C  0008               	return
 15786  026D                     __end_ofi1_ReadFlash_4Byte:	
 15787  026D                     __ptext68:	
 15788 ;; *************** function i1_ReadFlash_2Byte *****************
 15789 ;; Defined at:
 15790 ;;		line 43 in file "FLASH.c"
 15791 ;; Parameters:    Size  Location     Type
 15792 ;;  row             2    0[COMMON] unsigned int 
 15793 ;;  column          1    2[COMMON] unsigned char 
 15794 ;; Auto vars:     Size  Location     Type
 15795 ;;		None
 15796 ;; Return value:  Size  Location     Type
 15797 ;;                  2    0[COMMON] unsigned int 
 15798 ;; Registers used:
 15799 ;;		wreg, status,2, status,0
 15800 ;; Tracked objects:
 15801 ;;		On entry : 1F/0
 15802 ;;		On exit  : 1F/3
 15803 ;;		Unchanged: 0/0
 15804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15805 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15807 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15808 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15809 ;;Total ram usage:        6 bytes
 15810 ;; Hardware stack levels used:    1
 15811 ;; This function calls:
 15812 ;;		Nothing
 15813 ;; This function is called by:
 15814 ;;		_WriteFlash_Sequential
 15815 ;;		i1_ReadFlash_4Byte
 15816 ;; This function uses a non-reentrant model
 15817 ;;
 15818                           
 15819                           
 15820                           ;psect for function i1_ReadFlash_2Byte
 15821  026D                     i1_ReadFlash_2Byte:	
 15822                           
 15823                           ;FLASH.c: 45: PMCON1 &= ~0b01000000;
 15824                           
 15825                           ;incstack = 0
 15826                           ; Regs used in i1_ReadFlash_2Byte: [wreg+status,2+status,0]
 15827  026D  0023               	movlb	3	; select bank3
 15828  026E  1315               	bcf	21,6	;volatile
 15829                           
 15830                           ;FLASH.c: 46: PMADRH = (unsigned char)((row & 0x3F8) >> 3);
 15831  026F  0871               	movf	i1ReadFlash_2Byte@row+1,w
 15832  0270  00F4               	movwf	??i1_ReadFlash_2Byte+1
 15833  0271  0870               	movf	i1ReadFlash_2Byte@row,w
 15834  0272  00F3               	movwf	??i1_ReadFlash_2Byte
 15835  0273  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 15836  0274  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 15837  0275  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 15838  0276  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 15839  0277  36F4               	lsrf	??i1_ReadFlash_2Byte+1,f
 15840  0278  0CF3               	rrf	??i1_ReadFlash_2Byte,f
 15841  0279  0873               	movf	??i1_ReadFlash_2Byte,w
 15842  027A  397F               	andlw	127
 15843  027B  0092               	movwf	18	;volatile
 15844                           
 15845                           ;FLASH.c: 47: PMADRL = (unsigned char)(((row & 0x007) << 5) + column);
 15846  027C  0870               	movf	i1ReadFlash_2Byte@row,w
 15847  027D  3907               	andlw	7
 15848  027E  00F3               	movwf	??i1_ReadFlash_2Byte
 15849  027F  3004               	movlw	4
 15850  0280                     u359_25:	
 15851  0280  35F3               	lslf	??i1_ReadFlash_2Byte,f
 15852  0281  3EFF               	addlw	-1
 15853  0282  1D03               	skipz
 15854  0283  2A80               	goto	u359_25
 15855  0284  3573               	lslf	??i1_ReadFlash_2Byte,w
 15856  0285  0772               	addwf	i1ReadFlash_2Byte@column,w
 15857  0286  0091               	movwf	17	;volatile
 15858                           
 15859                           ;FLASH.c: 48: PMCON1 |= 0b00000001;
 15860  0287  1415               	bsf	21,0	;volatile
 15861  0288                     i1l958:	
 15862                           ;FLASH.c: 49: while(PMCON1 & 0b00000001);
 15863                           
 15864  0288  1815               	btfsc	21,0	;volatile
 15865  0289  2A88               	goto	i1l958
 15866                           
 15867                           ;FLASH.c: 50: __nop();
 15868  028A  0000               	nop
 15869                           
 15870                           ;FLASH.c: 51: __nop();
 15871  028B  0000               	nop
 15872                           
 15873                           ;FLASH.c: 52: return (PMDATL | (PMDATH << 8));
 15874  028C  0023               	movlb	3	; select bank3
 15875  028D  0813               	movf	19,w	;volatile
 15876  028E  00F0               	movwf	?i1_ReadFlash_2Byte
 15877  028F  01F1               	clrf	?i1_ReadFlash_2Byte+1
 15878  0290  0814               	movf	20,w	;volatile
 15879  0291  00F3               	movwf	??i1_ReadFlash_2Byte
 15880  0292  01F4               	clrf	??i1_ReadFlash_2Byte+1
 15881  0293  00F4               	movwf	??i1_ReadFlash_2Byte+1
 15882  0294  01F3               	clrf	??i1_ReadFlash_2Byte
 15883  0295  0873               	movf	??i1_ReadFlash_2Byte,w
 15884  0296  04F0               	iorwf	?i1_ReadFlash_2Byte,f
 15885  0297  0874               	movf	??i1_ReadFlash_2Byte+1,w
 15886  0298  04F1               	iorwf	?i1_ReadFlash_2Byte+1,f
 15887  0299  0008               	return
 15888  029A                     __end_ofi1_ReadFlash_2Byte:	
 15889  029A                     PL34:	
 15890  029A  0024               	movlb	4	; select bank4
 15891  029B  00B8               	movwf	_MEM^(0+512)
 15892  029C  30FF               	movlw	255
 15893  029D  05B8               	andwf	_MEM^(0+512),f
 15894  029E  303F               	movlw	63
 15895  029F  05B9               	andwf	(_MEM+1)^(0+512),f
 15896  02A0  083A               	movf	(_MEM^(0+512)+2),w
 15897  02A1  0008               	return
 15898  02A2                     __end_ofPL34:	
 15899  02A2                     PL46:	
 15900  02A2  0870               	movf	?i1_ReadFlash_2Byte,w
 15901  02A3  00FA               	movwf	??i1_ReadFlash_4Byte
 15902  02A4  0871               	movf	?i1_ReadFlash_2Byte+1,w
 15903  02A5  00FB               	movwf	??i1_ReadFlash_4Byte+1
 15904  02A6  01FC               	clrf	??i1_ReadFlash_4Byte+2
 15905  02A7  01FD               	clrf	??i1_ReadFlash_4Byte+3
 15906  02A8  0008               	return
 15907  02A9                     __end_ofPL46:	
 15908  02A9                     PL62:	
 15909  02A9  0877               	movf	i1ReadFlash_4Byte@row+1,w
 15910  02AA  00F1               	movwf	i1ReadFlash_2Byte@row+1
 15911  02AB  0876               	movf	i1ReadFlash_4Byte@row,w
 15912  02AC  00F0               	movwf	i1ReadFlash_2Byte@row
 15913  02AD  0878               	movf	i1ReadFlash_4Byte@column,w
 15914  02AE  0008               	return
 15915  02AF                     __end_ofPL62:	
 15916  02AF                     PL84:	
 15917  02AF  0023               	movlb	3	; select bank3
 15918  02B0  1115               	bcf	21,2	;volatile
 15919  02B1  178B               	bsf	11,7	;volatile
 15920  02B2  0008               	return
 15921  02B3                     __end_ofPL84:	
 15922                           
 15923                           	psect	text77
 15924  0443                     __ptext77:	
 15925 ;; *************** function _PS2RawToScan *****************
 15926 ;; Defined at:
 15927 ;;		line 1115 in file "PS_2.c"
 15928 ;; Parameters:    Size  Location     Type
 15929 ;;  Raw             2    7[COMMON] unsigned int 
 15930 ;; Auto vars:     Size  Location     Type
 15931 ;;  temp            2    0[BANK0 ] unsigned int 
 15932 ;; Return value:  Size  Location     Type
 15933 ;;                  2    7[COMMON] unsigned int 
 15934 ;; Registers used:
 15935 ;;		wreg, status,2, status,0, pclath, cstack
 15936 ;; Tracked objects:
 15937 ;;		On entry : 1F/4
 15938 ;;		On exit  : 1F/0
 15939 ;;		Unchanged: 0/0
 15940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15941 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15942 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15943 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15944 ;;      Totals:         6       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15945 ;;Total ram usage:        8 bytes
 15946 ;; Hardware stack levels used:    1
 15947 ;; Hardware stack levels required when called:    1
 15948 ;; This function calls:
 15949 ;;		_Reverse_Byte
 15950 ;;		i1_CheckSum_byte
 15951 ;; This function is called by:
 15952 ;;		_isr
 15953 ;; This function uses a non-reentrant model
 15954 ;;
 15955                           
 15956                           
 15957                           ;psect for function _PS2RawToScan
 15958  0443                     _PS2RawToScan:	
 15959                           
 15960                           ;PS_2.c: 1117: unsigned int temp;
 15961                           ;PS_2.c: 1119: if(CheckSum_byte((Raw >> 2) & 0xFF , 3) == ((Raw & 0x02)>> 1))
 15962                           
 15963                           ;incstack = 0
 15964                           ; Regs used in _PS2RawToScan: [wreg+status,2+status,0+pclath+cstack]
 15965  0443  0877               	movf	PS2RawToScan@Raw,w
 15966  0444  00F9               	movwf	??_PS2RawToScan
 15967  0445  3001               	movlw	1
 15968  0446  36F9               	lsrf	??_PS2RawToScan,f
 15969  0447  0579               	andwf	??_PS2RawToScan,w
 15970  0448  00FA               	movwf	??_PS2RawToScan+1
 15971  0449  0878               	movf	PS2RawToScan@Raw+1,w
 15972  044A  00FC               	movwf	??_PS2RawToScan+3
 15973  044B  0877               	movf	PS2RawToScan@Raw,w
 15974  044C  00FB               	movwf	??_PS2RawToScan+2
 15975  044D  36FC               	lsrf	??_PS2RawToScan+3,f
 15976  044E  0CFB               	rrf	??_PS2RawToScan+2,f
 15977  044F  36FC               	lsrf	??_PS2RawToScan+3,f
 15978  0450  0CFB               	rrf	??_PS2RawToScan+2,f
 15979  0451  087B               	movf	??_PS2RawToScan+2,w
 15980  0452  00F0               	movwf	i1CheckSum_byte@This
 15981  0453  087C               	movf	??_PS2RawToScan+3,w
 15982  0454  00F1               	movwf	i1CheckSum_byte@This+1
 15983  0455  30FF               	movlw	255
 15984  0456  05F0               	andwf	i1CheckSum_byte@This,f
 15985  0457  3003               	movlw	3
 15986  0458  01F1               	clrf	i1CheckSum_byte@This+1
 15987  0459  00F2               	movwf	i1CheckSum_byte@Odd_Even
 15988  045A  3196  26D3  3184   	fcall	i1_CheckSum_byte
 15989  045D  067A               	xorwf	??_PS2RawToScan+1,w
 15990  045E  1D03               	skipz
 15991  045F  2C75               	goto	i1l5334
 15992                           
 15993                           ;PS_2.c: 1120: {
 15994                           ;PS_2.c: 1122: temp = ((Raw >> 2) & 0xFF);
 15995  0460  0878               	movf	PS2RawToScan@Raw+1,w
 15996  0461  00FA               	movwf	??_PS2RawToScan+1
 15997  0462  0877               	movf	PS2RawToScan@Raw,w
 15998  0463  00F9               	movwf	??_PS2RawToScan
 15999  0464  36FA               	lsrf	??_PS2RawToScan+1,f
 16000  0465  0CF9               	rrf	??_PS2RawToScan,f
 16001  0466  36FA               	lsrf	??_PS2RawToScan+1,f
 16002  0467  0CF9               	rrf	??_PS2RawToScan,f
 16003  0468  0879               	movf	??_PS2RawToScan,w
 16004  0469  0020               	movlb	0	; select bank0
 16005  046A  00A0               	movwf	PS2RawToScan@temp
 16006  046B  087A               	movf	??_PS2RawToScan+1,w
 16007  046C  00A1               	movwf	PS2RawToScan@temp+1
 16008  046D  30FF               	movlw	255
 16009  046E  05A0               	andwf	PS2RawToScan@temp,f
 16010  046F  01A1               	clrf	PS2RawToScan@temp+1
 16011                           
 16012                           ;PS_2.c: 1123: temp = (unsigned int) Reverse_Byte((unsigned char) temp);
 16013  0470  0820               	movf	PS2RawToScan@temp,w
 16014  0471  247D  3184         	fcall	_Reverse_Byte
 16015  0473  00A0               	movwf	PS2RawToScan@temp
 16016  0474  2C77               	goto	L20
 16017  0475                     i1l5334:	
 16018                           ;PS_2.c: 1125: }
 16019                           
 16020                           
 16021                           ;PS_2.c: 1126: else
 16022                           ;PS_2.c: 1127: {
 16023                           ;PS_2.c: 1129: temp = 0;
 16024  0475  0020               	movlb	0	; select bank0
 16025  0476  01A0               	clrf	PS2RawToScan@temp
 16026  0477                     L20:	
 16027  0477  01A1               	clrf	PS2RawToScan@temp+1
 16028                           
 16029                           ;PS_2.c: 1130: }
 16030                           ;PS_2.c: 1131: return temp;
 16031  0478  0821               	movf	PS2RawToScan@temp+1,w
 16032  0479  00F8               	movwf	?_PS2RawToScan+1
 16033  047A  0820               	movf	PS2RawToScan@temp,w
 16034  047B  00F7               	movwf	?_PS2RawToScan
 16035  047C  0008               	return
 16036  047D                     __end_of_PS2RawToScan:	
 16037  047D                     __ptext79:	
 16038 ;; *************** function _Reverse_Byte *****************
 16039 ;; Defined at:
 16040 ;;		line 108 in file "MISC.c"
 16041 ;; Parameters:    Size  Location     Type
 16042 ;;  This            1    wreg     unsigned char 
 16043 ;; Auto vars:     Size  Location     Type
 16044 ;;  This            1    2[COMMON] unsigned char 
 16045 ;;  temp            1    1[COMMON] unsigned char 
 16046 ;; Return value:  Size  Location     Type
 16047 ;;                  1    wreg      unsigned char 
 16048 ;; Registers used:
 16049 ;;		wreg, status,2, status,0
 16050 ;; Tracked objects:
 16051 ;;		On entry : 1F/0
 16052 ;;		On exit  : 1F/0
 16053 ;;		Unchanged: 1F/0
 16054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16056 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16057 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16058 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16059 ;;Total ram usage:        3 bytes
 16060 ;; Hardware stack levels used:    1
 16061 ;; This function calls:
 16062 ;;		Nothing
 16063 ;; This function is called by:
 16064 ;;		_PS2RawToScan
 16065 ;; This function uses a non-reentrant model
 16066 ;;
 16067                           
 16068                           
 16069                           ;psect for function _Reverse_Byte
 16070  047D                     _Reverse_Byte:	
 16071                           
 16072                           ;incstack = 0
 16073                           ; Regs used in _Reverse_Byte: [wreg+status,2+status,0]
 16074                           ;Reverse_Byte@This stored from wreg
 16075  047D  00F2               	movwf	Reverse_Byte@This
 16076                           
 16077                           ;MISC.c: 110: unsigned char temp=0;
 16078  047E  01F1               	clrf	Reverse_Byte@temp
 16079                           
 16080                           ;MISC.c: 112: temp += (This & 0x01) << 7;
 16081  047F  3901               	andlw	1
 16082  0480  00F0               	movwf	??_Reverse_Byte
 16083  0481  3006               	movlw	6
 16084  0482                     u478_25:	
 16085  0482  35F0               	lslf	??_Reverse_Byte,f
 16086  0483  3EFF               	addlw	-1
 16087  0484  1D03               	skipz
 16088  0485  2C82               	goto	u478_25
 16089  0486  3570               	lslf	??_Reverse_Byte,w
 16090  0487  07F1               	addwf	Reverse_Byte@temp,f
 16091                           
 16092                           ;MISC.c: 113: temp += (This & 0x02) << 5;
 16093  0488  0872               	movf	Reverse_Byte@This,w
 16094  0489  3902               	andlw	2
 16095  048A  00F0               	movwf	??_Reverse_Byte
 16096  048B  3004               	movlw	4
 16097  048C                     u479_25:	
 16098  048C  35F0               	lslf	??_Reverse_Byte,f
 16099  048D  3EFF               	addlw	-1
 16100  048E  1D03               	skipz
 16101  048F  2C8C               	goto	u479_25
 16102  0490  3570               	lslf	??_Reverse_Byte,w
 16103  0491  07F1               	addwf	Reverse_Byte@temp,f
 16104                           
 16105                           ;MISC.c: 114: temp += (This & 0x04) << 3;
 16106  0492  0872               	movf	Reverse_Byte@This,w
 16107  0493  3904               	andlw	4
 16108  0494  0709               	addwf	9,w
 16109  0495  0709               	addwf	9,w
 16110  0496  0709               	addwf	9,w
 16111  0497  07F1               	addwf	Reverse_Byte@temp,f
 16112                           
 16113                           ;MISC.c: 115: temp += (This & 0x08) << 1;
 16114  0498  0872               	movf	Reverse_Byte@This,w
 16115  0499  3908               	andlw	8
 16116  049A  0709               	addwf	9,w
 16117  049B  07F1               	addwf	Reverse_Byte@temp,f
 16118                           
 16119                           ;MISC.c: 116: temp += (This & 0x10) >> 1;
 16120  049C  3672               	lsrf	Reverse_Byte@This,w
 16121  049D  3908               	andlw	8
 16122  049E  07F1               	addwf	Reverse_Byte@temp,f
 16123                           
 16124                           ;MISC.c: 117: temp += (This & 0x20) >> 3;
 16125  049F  0872               	movf	Reverse_Byte@This,w
 16126  04A0  00F0               	movwf	??_Reverse_Byte
 16127  04A1  36F0               	lsrf	??_Reverse_Byte,f
 16128  04A2  36F0               	lsrf	??_Reverse_Byte,f
 16129  04A3  36F0               	lsrf	??_Reverse_Byte,f
 16130  04A4  0870               	movf	??_Reverse_Byte,w
 16131  04A5  3904               	andlw	4
 16132  04A6  07F1               	addwf	Reverse_Byte@temp,f
 16133                           
 16134                           ;MISC.c: 118: temp += (This & 0x40) >> 5;
 16135  04A7  0872               	movf	Reverse_Byte@This,w
 16136  04A8  00F0               	movwf	??_Reverse_Byte
 16137  04A9  3005               	movlw	5
 16138  04AA                     u480_25:	
 16139  04AA  36F0               	lsrf	??_Reverse_Byte,f
 16140  04AB  0B89               	decfsz	9,f
 16141  04AC  2CAA               	goto	u480_25
 16142  04AD  0870               	movf	??_Reverse_Byte,w
 16143  04AE  3902               	andlw	2
 16144  04AF  07F1               	addwf	Reverse_Byte@temp,f
 16145                           
 16146                           ;MISC.c: 119: temp += (This & 0x80) >> 7;
 16147  04B0  0872               	movf	Reverse_Byte@This,w
 16148  04B1  00F0               	movwf	??_Reverse_Byte
 16149  04B2  3007               	movlw	7
 16150  04B3                     u481_25:	
 16151  04B3  36F0               	lsrf	??_Reverse_Byte,f
 16152  04B4  0B89               	decfsz	9,f
 16153  04B5  2CB3               	goto	u481_25
 16154  04B6  0870               	movf	??_Reverse_Byte,w
 16155  04B7  3901               	andlw	1
 16156  04B8  07F1               	addwf	Reverse_Byte@temp,f
 16157                           
 16158                           ;MISC.c: 121: return temp;
 16159  04B9  0871               	movf	Reverse_Byte@temp,w
 16160  04BA  0008               	return
 16161  04BB                     __end_of_Reverse_Byte:	
 16162  007E                     btemp	set	126	;btemp
 16163  007E                     wtemp	set	126
 16164  007E                     wtemp0	set	126
 16165  0080                     wtemp1	set	128
 16166  0082                     wtemp2	set	130
 16167  0084                     wtemp3	set	132
 16168  0086                     wtemp4	set	134
 16169  0088                     wtemp5	set	136
 16170  007F                     wtemp6	set	127
 16171  007E                     ttemp	set	126
 16172  007E                     ttemp0	set	126
 16173  0081                     ttemp1	set	129
 16174  0084                     ttemp2	set	132
 16175  0087                     ttemp3	set	135
 16176  007F                     ttemp4	set	127
 16177  007E                     ltemp	set	126
 16178  007E                     ltemp0	set	126
 16179  0082                     ltemp1	set	130
 16180  0086                     ltemp2	set	134
 16181  0080                     ltemp3	set	128


Data Sizes:
    Strings     210
    Constant    623
    Data        4
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     80      80
    BANK2            80     80      80
    BANK3            80     51      80
    BANK4            80      0      28
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_18(CODE[24]), STR_11(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 60
		 -> Process_PS2_ScanCode@buf(BANK2[60]), SetBaud@buf(BANK1[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    WriteFlash_Sequential@buffer	PTR unsigned int  size(1) Largest target is 4
		 -> MEM(BANK4[4]), 

    UARTstringWAIT@data	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_20(CODE[20]), STR_19(CODE[3]), Process_PS2_ScanCode@buf(BANK2[60]), STR_17(CODE[3]), 
		 -> STR_16(CODE[3]), STR_15(CODE[19]), STR_14(CODE[19]), STR_13(CODE[3]), 
		 -> STR_12(CODE[3]), SetBaud@buf(BANK1[50]), STR_10(CODE[21]), STR_9(CODE[3]), 
		 -> STR_8(CODE[3]), NoParityMSG(CODE[20]), SpaceParityMSG(CODE[16]), MarkParityMSG(CODE[15]), 
		 -> EvenParityMSG(CODE[22]), OddParityMSG(CODE[21]), STR_7(CODE[3]), STR_6(CODE[33]), 
		 -> STR_5(CODE[3]), Version(CODE[9]), STR_4(CODE[19]), STR_3(CODE[28]), 
		 -> STR_2(CODE[8]), STR_1(CODE[7]), VoltageMSG(CODE[13]), 

    BufferShiftBack@buffer	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK4[12]), 

    cleanBuffer@data	PTR unsigned char  size(1) Largest target is 12
		 -> PS_2_ScanCodes(BANK4[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    i1_Send_PS2->i1_delayUS
    _UART_send_break_timed->i1_delayUS
    i1_UARTstringWAIT->i1_UARTchar
    i1_UARTchar->i1_CheckSum_byte
    i1_ReadBaud->i1_ReadFlash_4Byte
    i1_ReadFlash_4Byte->i1_ReadFlash_2Byte
    i1_InitUART->i1___lldiv
    _sprintf->___llmod
    ___llmod->i1___lldiv
    _WriteBaud->_WriteFlash_Sequential
    _WriteFlash_Sequential->i1_delayUS
    _PS2RawToScan->i1_CheckSum_byte

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _ResendLast->i1_Send_PS2
    _SetBaud->_WriteBaud
    i1_ReadBaud->i1_ReadFlash_4Byte
    _sprintf->___llmod
    _WriteBaud->_WriteFlash_Sequential

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    _Process_PS2_ScanCode->_SetBaud
    _SetBaud->_WriteBaud

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    _isr->_Process_PS2_ScanCode

Critical Paths under _main in BANK3

    _main->_ReadVoltage
    _ReadVoltage->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft
    _InternalADC_Read->_delayUS
    _Init_PS_2_Send->_Send_PS2
    _Send_PS2->_delayUS
    _Init_System->_InitUART
    _Init_System->_ReadBaud
    _UARTstringWAIT->_UARTchar
    _UARTchar->_CheckSum_byte
    _ReadBaud->_ReadFlash_4Byte
    _ReadFlash_4Byte->_ReadFlash_2Byte
    _InitUART->___lldiv

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   29918
                                             50 BANK3      1     1      0
                _ConfigureOscillator
                            _InitApp
                        _Init_System
              _PS_2_ENABLE_INTERRUPT
                          _PS_2_INIT
                        _ReadVoltage
                     _UARTstringWAIT
                             ___ftge
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               6     0      6     648
                                              0 BANK3      6     0      6
 ---------------------------------------------------------------------------------
 (1) _ReadVoltage                                          9     6      3    8738
                                             41 BANK3      9     6      3
                 _DisableInternalADC
                   _InternalADC_Read
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2117
                                              8 BANK3      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2487
                                             26 BANK3     15     9      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2441
                                             11 BANK3     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2031
                                              0 BANK3      8     3      5
 ---------------------------------------------------------------------------------
 (2) _InternalADC_Read                                     4     1      3    1645
                                             10 BANK3      4     1      3
                            _delayUS
 ---------------------------------------------------------------------------------
 (2) _DisableInternalADC                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PS_2_INIT                                            0     0      0    4399
                         _Clock_TRIS
                          _Data_TRIS
                     _Init_PS_2_Send
                         _Timer2Init
 ---------------------------------------------------------------------------------
 (2) _Timer2Init                                           3     3      0      68
                                              0 BANK3      3     3      0
                           _Timer2ON
 ---------------------------------------------------------------------------------
 (3) _Timer2ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_PS_2_Send                                       0     0      0    4287
             _PS_2_DISABLE_INTERRUPT
                           _Send_PS2
                            _delayUS
 ---------------------------------------------------------------------------------
 (3) _Send_PS2                                             5     5      0    2642
                                             10 BANK3      5     5      0
                      _CheckSum_byte
                         _Clock_TRIS
                          _Data_TRIS
                      _READ_PS_2_PIN
                            _delayUS
 ---------------------------------------------------------------------------------
 (4) _READ_PS_2_PIN                                        1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Data_TRIS                                            1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Clock_TRIS                                           1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS_2_DISABLE_INTERRUPT                               1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PS_2_ENABLE_INTERRUPT                                1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                         13    13      0    9143
                                             34 BANK3     13    13      0
                           _InitUART
                           _ReadBaud
                     _UARTstringWAIT
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _UARTstringWAIT                                       5     3      2    5298
                                             11 BANK3      5     3      2
                           _UARTchar
                            _delayUS
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4    1623
                                              0 BANK3     10     6      4
 ---------------------------------------------------------------------------------
 (2) _UARTchar                                             4     2      2    1711
                                              7 BANK3      4     2      2
                      _CheckSum_byte
 ---------------------------------------------------------------------------------
 (3) _CheckSum_byte                                        7     4      3     621
                                              0 BANK3      7     4      3
 ---------------------------------------------------------------------------------
 (2) _ReadBaud                                            16    12      4     932
                                             18 BANK3     16    12      4
                    _ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (3) _ReadFlash_4Byte                                     12     8      4     639
                                              6 BANK3     12     8      4
                    _ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (4) _ReadFlash_2Byte                                      6     3      3     398
                                              0 BANK3      6     3      3
 ---------------------------------------------------------------------------------
 (2) _InitUART                                            21    16      5    1104
                                             13 BANK3     21    16      5
                         _CloseUSART
                          _OpenUSART
                          _ReadUSART
                            ___lldiv
                          _baudUSART
 ---------------------------------------------------------------------------------
 (3) _baudUSART                                            1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     366
                                              0 BANK3     13     5      8
 ---------------------------------------------------------------------------------
 (3) _ReadUSART                                            1     1      0      23
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     286
                                              0 BANK3      3     1      2
 ---------------------------------------------------------------------------------
 (3) _CloseUSART                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  4     4      0   21585
                                             76 BANK2      4     4      0
                       _PS2RawToScan
               _Process_PS2_ScanCode
                    _READ_CONFIG_PIN
                         _ResendLast
                          _Timer2OFF
                        _Timer2Reset
              _UART_send_break_timed
           i1_PS_2_DISABLE_INTERRUPT
            i1_PS_2_ENABLE_INTERRUPT
                    i1_READ_PS_2_PIN
                        i1_ReadUSART
                         i1_Timer2ON
                         i1_UARTchar
 ---------------------------------------------------------------------------------
 (6) i1_Timer2ON                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_ENABLE_INTERRUPT                              1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Timer2Reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer2OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResendLast                                           0     0      0    1293
           i1_PS_2_DISABLE_INTERRUPT
                         i1_Send_PS2
 ---------------------------------------------------------------------------------
 (6) i1_PS_2_DISABLE_INTERRUPT                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _READ_CONFIG_PIN                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Process_PS2_ScanCode                                76    76      0   17568
                                              0 BANK2     76    76      0
                    _BufferShiftBack
                   _Decode_Scan_Code
          _Decode_Scan_Code_Function
        _Decode_Scan_Code_FunctionE0
             _Decode_Scan_Code_Shift
                           _ISNUMBER
                            _SetBaud
                    _UART_send_break
              _UART_send_break_timed
                             ___lmul
                        _cleanBuffer
                            _sprintf
                         i1_Send_PS2
                         i1_UARTchar
                   i1_UARTstringWAIT
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_Send_PS2                                           5     5      0    1271
                                              0 BANK0      5     5      0
                    i1_CheckSum_byte
                       i1_Clock_TRIS
                        i1_Data_TRIS
                    i1_READ_PS_2_PIN
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_READ_PS_2_PIN                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Data_TRIS                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Clock_TRIS                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _cleanBuffer                                          5     3      2     193
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     220
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (6) _UART_send_break_timed                                2     0      2     632
                                             10 COMMON     2     0      2
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) _UART_send_break                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SetBaud                                             72    67      5    7770
                                              8 BANK1     72    67      5
                          _WriteBaud
                            _sprintf
                         i1_InitUART
                         i1_ReadBaud
                   i1_UARTstringWAIT
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_UARTstringWAIT                                     5     3      2    2233
                                             11 COMMON     2     0      2
                                              0 BANK0      3     3      0
                         i1_UARTchar
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (6) i1_UARTchar                                           4     2      2    1087
                                              7 COMMON     4     2      2
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (8) i1_ReadBaud                                          16    12      4     528
                                              4 BANK0     16    12      4
                  i1_ReadFlash_4Byte
 ---------------------------------------------------------------------------------
 (9) i1_ReadFlash_4Byte                                   12     8      4     387
                                              6 COMMON     8     4      4
                                              0 BANK0      4     4      0
                  i1_ReadFlash_2Byte
 ---------------------------------------------------------------------------------
 (8) i1_InitUART                                          21    16      5     812
                                              0 BANK0     21    16      5
                       i1_CloseUSART
                        i1_OpenUSART
                        i1_ReadUSART
                          i1___lldiv
                        i1_baudUSART
 ---------------------------------------------------------------------------------
 (9) i1_baudUSART                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_ReadUSART                                          1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1_OpenUSART                                          3     1      2     246
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (9) i1_CloseUSART                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             31    23      8    1183
                                              8 BANK0     23    15      8
                            ___llmod
                          i1___lldiv
 ---------------------------------------------------------------------------------
 (8) i1___lldiv                                           13     5      8     266
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (8) ___llmod                                              9     1      8     287
                                             13 COMMON     1     1      0
                                              0 BANK0      8     0      8
                          i1___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) _WriteBaud                                           15     8      7    1881
                                             73 BANK0      7     0      7
                                              0 BANK1      8     8      0
              _WriteFlash_Sequential
 ---------------------------------------------------------------------------------
 (9) _WriteFlash_Sequential                               77    73      4    1576
                                             10 COMMON     4     0      4
                                              0 BANK0     73    73      0
                         _BlockErase
                             _UNLOCK
                  i1_ReadFlash_2Byte
                          i1_delayUS
 ---------------------------------------------------------------------------------
 (7) i1_delayUS                                           10     6      4     482
                                              0 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (10) i1_ReadFlash_2Byte                                   6     3      3     222
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (10) _BlockErase                                          4     2      2     108
                                              0 COMMON     4     2      2
                             _UNLOCK
 ---------------------------------------------------------------------------------
 (10) _UNLOCK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ISNUMBER                                             1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Shift                               1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_FunctionE0                          1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code_Function                            1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Decode_Scan_Code                                     1     1      0      45
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _BufferShiftBack                                      8     6      2    1473
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (6) _PS2RawToScan                                         8     6      2     776
                                              7 COMMON     6     4      2
                                              0 BANK0      2     2      0
                       _Reverse_Byte
                    i1_CheckSum_byte
 ---------------------------------------------------------------------------------
 (7) i1_CheckSum_byte                                      7     4      3     391
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (7) _Reverse_Byte                                         3     3      0     207
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _Init_System
     _InitUART
       _CloseUSART
       _OpenUSART
       _ReadUSART
       ___lldiv
       _baudUSART
     _ReadBaud
       _ReadFlash_4Byte
         _ReadFlash_2Byte
     _UARTstringWAIT
       _UARTchar
         _CheckSum_byte
       _delayUS
     _delayUS
   _PS_2_ENABLE_INTERRUPT
   _PS_2_INIT
     _Clock_TRIS
     _Data_TRIS
     _Init_PS_2_Send
       _PS_2_DISABLE_INTERRUPT
       _Send_PS2
         _CheckSum_byte
         _Clock_TRIS
         _Data_TRIS
         _READ_PS_2_PIN
         _delayUS
       _delayUS
     _Timer2Init
       _Timer2ON
   _ReadVoltage
     _DisableInternalADC
     _InternalADC_Read
       _delayUS
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _UARTstringWAIT
     _UARTchar
       _CheckSum_byte
     _delayUS
   ___ftge
   _delayUS

 _isr (ROOT)
   _PS2RawToScan
     _Reverse_Byte
     i1_CheckSum_byte
   _Process_PS2_ScanCode
     _BufferShiftBack
     _Decode_Scan_Code
     _Decode_Scan_Code_Function
     _Decode_Scan_Code_FunctionE0
     _Decode_Scan_Code_Shift
     _ISNUMBER
     _SetBaud
       _WriteBaud
         _WriteFlash_Sequential
           _BlockErase
             _UNLOCK
           _UNLOCK
           i1_ReadFlash_2Byte
           i1_delayUS
       _sprintf
         ___llmod
           i1___lldiv (ARG)
         i1___lldiv
       i1_InitUART
         i1_CloseUSART
         i1_OpenUSART
         i1_ReadUSART
         i1___lldiv
         i1_baudUSART
       i1_ReadBaud
         i1_ReadFlash_4Byte
           i1_ReadFlash_2Byte
       i1_UARTstringWAIT
         i1_UARTchar
           i1_CheckSum_byte
         i1_delayUS
       i1_delayUS
     _UART_send_break
     _UART_send_break_timed
       i1_delayUS
     ___lmul
     _cleanBuffer
     _sprintf
       ___llmod
         i1___lldiv (ARG)
       i1___lldiv
     i1_Send_PS2
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_READ_PS_2_PIN
       i1_delayUS
     i1_UARTchar
       i1_CheckSum_byte
     i1_UARTstringWAIT
       i1_UARTchar
         i1_CheckSum_byte
       i1_delayUS
     i1_delayUS
   _READ_CONFIG_PIN
   _ResendLast
     i1_PS_2_DISABLE_INTERRUPT
     i1_Send_PS2
       i1_CheckSum_byte
       i1_Clock_TRIS
       i1_Data_TRIS
       i1_READ_PS_2_PIN
       i1_delayUS
   _Timer2OFF
   _Timer2Reset
   _UART_send_break_timed
     i1_delayUS
   i1_PS_2_DISABLE_INTERRUPT
   i1_PS_2_ENABLE_INTERRUPT
   i1_READ_PS_2_PIN
   i1_ReadUSART
   i1_Timer2ON
   i1_UARTchar
     i1_CheckSum_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     50      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     33      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      1C      13       35.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Oct 21 16:31:39 2015

                     _BufferShiftBack 16EC                _PS_2_DISABLE_INTERRUPT 0FDE  
             Process_PS2_ScanCode@buf 0126                            __CFG_CP$ON 0000  
                   ??_ReadFlash_2Byte 01A3                     ??_ReadFlash_4Byte 01AA  
                      _ResendLastFlag 01EC              Process_PS2_ScanCode@temp 016B  
                i1InitUART@baudconfig 002F                                    PL2 0B5F  
                                  PL4 0B66                                    PL6 175A  
                                  PL8 1760                    Data_TRIS@direction 01A0  
                                 PL10 0B73                                   PL20 0B97  
                                 PL12 0B85                                   PL30 177F  
                                 PL22 0BA3                                   PL14 1767  
                                 PL40 1784                                   PL32 0E94  
                                 PL24 0BA9                                   PL16 17BD  
                                 PL50 0FC7                                   PL42 178B  
                                 PL34 029A                                   PL26 1778  
                                 PL18 0E87                                   PL60 0FCE  
                                 PL52 0EA4                                   PL44 0BBF  
                                 PL36 0BB7                                   PL28 0BB0  
                                 PL70 0BCB                                   PL62 02A9  
                                 PL54 042E                                   PL46 02A2  
                                 PL38 0E9C                           __CFG_LVP$ON 0000  
                                 PL80 043F                                   PL72 0EAA  
                                 PL64 179C                                   PL56 1795  
                                 PL48 1790                                   PL82 0F11  
                                 PL74 0EAE                                   PL66 17A2  
                                 PL58 0435                                   PL84 02AF  
                                 PL76 043B                                   PL68 0BC6  
                                 PL86 17A8                                   PL78 0EB3  
                                 l410 0BE4                                   l411 0BE5  
                                 l421 0C58                                   l183 0896  
                                 l175 0847                                   l432 0EE4  
                                 l425 0C60                                   l427 0C68  
                                 l187 08BA                                   l445 0EED  
                                 l294 0EFE                                   l438 0ECD  
                                 l439 0ECF                                   l288 0AE8  
                                 l632 0AFE                                   l297 0F0E  
                                 l449 0EF3                                   l474 097D  
                                 l476 0991                                   l652 0FDB  
                                 l637 0B35                                   l647 0FE6  
                                 l657 0ACB                                   l870 0A24  
                                 l872 0A29                                   l873 0A2B  
                                 l882 0A58                                   l958 0FB5  
                                 _MEM 0238                                   _PR2 001B  
                                 _isr 0004                  _Process_PS2_ScanCode 1118  
                         i1_baudUSART 0E81               i1ReadFlash_4Byte@column 0078  
                        __CFG_BORV$LO 0000                                   wreg 0009  
          __size_ofi1_ReadFlash_2Byte 002D            __size_ofi1_ReadFlash_4Byte 002E  
          __end_of_ScanCodeFunctionE0 19D3               UART_send_break_timed@US 007A  
                        ___ftdiv@cntr 01B4                          ___ftdiv@sign 01B9  
                                l1035 0306                                  l1038 031B  
                                l1316 0344                                  l1262 039C  
                                l1274 03C1                                  l5100 036D  
                                l5112 03E0                                  l4242 0EBF  
                                l4250 0EDC                                  l6010 0B1F  
                                l4244 0EC5                                  l5116 03EE  
                                l4510 0AAD                                  l4430 0A3F  
                                l5150 0414                                  l5134 0402  
                                l6006 0B10                                  l4248 0ED1  
                                l4432 0A4D                                  l4416 0A2F  
                                l5072 0336                                  l4522 0AB0  
                                l4450 0A5D                                  l4418 0A3C  
                                l5146 0410                                  l5138 0406  
                                l4284 0C59                                  l4276 0C52  
                                l4524 0ABD                                  l4508 0AA0  
                                l4452 0A6A                                  l4294 0C62  
                                l4438 0A5A                                  l4542 03A0  
                                l5094 0357                                  l4480 0A80  
                                l4464 0A6D                                  l4552 03BF  
                                l4544 03A4                                  l4298 0C6A  
                                l4730 0993                                  l4482 0A8D  
                                l4466 0A7A                                  l4394 0A0F  
                                l4554 03B7                                  l4546 03A9  
                                l4580 0C9F                                  l4572 0C82  
                                l4396 0A22                                  l4388 0A1C  
                                l4548 03B2                                  l6172 087B  
                                l4494 0A90                                  l4584 0CA5  
                                l4496 0A9D                                  l6184 0899  
                                l6176 087F                                  l6168 086B  
                                l6188 089C                                  l6198 08AE  
                                l3968 0AD3                                  l5930 08FD  
                                l5932 0908                                  l4948 09A1  
                                ?_isr 0070        __size_of_PS_2_ENABLE_INTERRUPT 000A  
                                l5936 090F                                  l5962 0952  
                                l5876 0B3B                                  l5964 0956  
                                l5972 0962                                  l5878 0B41  
                                l5966 095A                                  l5974 096D  
                                l5968 095E                                  l5992 02C4  
                                l5994 02C9                                  l5996 02CB  
                 _PS_2_Read_Data_TEMP 0223                                  STR_1 1B3A  
                                STR_2 1B32                                  STR_3 1A90  
                                STR_4 1B13                                  STR_5 1AFD  
                                STR_6 1A6F                                  STR_7 1AFD  
                                STR_8 1AFD                                  STR_9 1AFD  
                                _LATA 010C                                  _LATC 010E  
                                _LALT 01E2         __end_of_PS_2_ENABLE_INTERRUPT 0FDE  
                                _PIE1 0091                                  u5115 0364  
                                u3653 0AE5                                  u3735 0FAD  
                                u4575 0C94                                  u4745 0F37  
                                u4755 0F58                                  i1l92 0066  
                                i1l85 005E                                  i1l94 00B0  
                                i1l95 007C                                  u4775 0C11  
                                _RALT 01EA                                  i1l89 0048  
                                u6625 08E7                                  _TMR2 001A  
                                _WPUA 020C                                  _WPUC 020E  
                          i1delayUS@i 0075                            i1delayUS@j 0079  
                        __CFG_WRT$OFF 0000      __size_ofi1_PS_2_ENABLE_INTERRUPT 000A  
                   i1___lldiv@divisor 0070                                  _main 083D  
                  UARTstringWAIT@data 01AB                          ___ftpack@arg 01A0  
                        ___ftpack@exp 01A3                                  fsr0h 0005  
                                fsr1h 0007                                  fsr0l 0004  
                                indf0 0000                                  indf1 0001  
                                fsr1l 0006                                  btemp 007E  
                   i1___lldiv@counter 007C                   baudUSART@baudconfig 01A0  
                       __CFG_BOREN$ON 0000                                  ltemp 007E  
                   SetBaud@Paritytemp 00E3                      i1_UARTstringWAIT 1623  
                                start 00D8                                  ttemp 007E  
                                wtemp 007E                         __CFG_IESO$OFF 0000  
                    Reverse_Byte@This 0072             WriteFlash_Sequential@temp 0065  
                    Reverse_Byte@temp 0071                         __CFG_MCLRE$ON 0000  
                          _BlockErase 0220                          ___ftmul@cntr 01C7  
                         ?i1_UARTchar 0077               ?_Decode_Scan_Code_Shift 0070  
                        ___ftmul@sign 01C8                       __end_of_InitApp 0B5F  
                     __end_of_SetBaud 1118                            _Clock_TRIS 0AF6  
                       ??_Init_System 01C2                __size_of_READ_PS_2_PIN 000C  
                               ??_isr 007E                   _Right_Shift_Key_old 01EE  
                      _Init_PS_2_Send 09A1                     ??i1_READ_PS_2_PIN 0070  
   i1UARTchar@NinethBit_override_data 0078       UARTchar@NinethBit_override_data 01A8  
           _Decode_Scan_Code_Function 1729                           ReadBaud@row 01B2  
     WriteFlash_Sequential@amountTemp 0063                       __end_of_Version 1A6F  
                       ??_ReadVoltage 01CC                            _CloseUSART 0C48  
                               ?_main 0070              __size_ofi1_CheckSum_byte 0019  
                               STR_10 1AC4                                 STR_11 1B26  
                               STR_12 1AFD                                 STR_20 1AD9  
                               STR_13 1AFD                                 STR_14 1AED  
                               STR_15 1B00                                 STR_16 1AFD  
                               STR_17 1AFD                         __CFG_WDTE$OFF 0000  
                               STR_18 1AAC                                 STR_19 1AFD  
                     __end_of___ftdiv 0384                      __end_of_ISNUMBER 1755  
                     __end_of___lldiv 0CAE                       __end_of___ftmul 042E  
                               _CKPPS 0E25                       __end_of___llmod 0E1C  
                               _T2CON 001C                                 _IOCAF 0393  
                               _IOCAN 0392                                 i1l410 0CC8  
                               i1l411 0CC9                                 i1l421 0E6C  
                               i1l432 1679                                 i1l425 0E74  
                               i1l427 0E7B                                 i1l445 1682  
                               i1l294 16D9                                 i1l438 1662  
                               i1l439 1664                                 i1l288 16B2  
                               i1l632 16C6                                 i1l297 16E9  
                               i1l449 1688                                 i1l474 1623  
                               i1l476 163B                                 i1l652 04D2  
                               i1l637 16D0                                 i1l486 10B6  
                               i1l815 147A                                 i1l647 04C8  
                               i1l657 1695                                 i1l754 137A  
                               i1l870 1589                                 i1l872 158E  
                               i1l873 1590                                 i1l882 15BC  
                               i1l958 0288                                 i1l967 021B  
                               i1l983 0214        __size_of_UART_send_break_timed 0010  
                               _RCREG 0199                 ?_Process_PS2_ScanCode 0070  
                               _RCSTA 019D                                 _SPBRG 019B  
       __end_of_UART_send_break_timed 17BD                  _PS_2_Read_Data_First 01D7  
                               _PORTA 000C                                 _PORTC 000E  
                        InitUART@Baud 01AD                                 _RXPPS 0E24  
                               _TXREG 019A                   _ConfigureOscillator 0B38  
                               _Alarm 01DD                  _PS_2_Read_Data_Third 01DB  
                     __end_of_delayUS 0AF6                      _InternalADC_Read 02FB  
                         i1delayUS@US 0070                   ___lmul@multiplicand 0074  
                      __CFG_FCMEN$OFF 0000                          InitUART@temp 01BE  
               _WriteFlash_Sequential 0189                    i1___lldiv@dividend 0074  
               ReadFlash_2Byte@column 01A2                      __end_of_UARTchar 0EF8  
                          SetBaud@buf 00B1                       __end_of_dpowers 19FB  
                         ?i1_InitUART 0020                           ?i1_ReadBaud 0024  
                       ___ftpack@sign 01A4                    __size_of_PS_2_INIT 000A  
                               main@i 01D2                                 isr@rx 016E  
                               ltemp0 007E                                 ltemp1 0082  
                               ltemp2 0086                                 ltemp3 0080  
                         ?i1_Send_PS2 0070               InternalADC_Read@channel 01AD  
                               ttemp0 007E                                 ttemp1 0081  
                               ttemp2 0084                                 ttemp3 0087  
                               ttemp4 007F                                 status 0003  
             __end_of_BufferShiftBack 171D                                 wtemp0 007E  
                               wtemp1 0080                                 wtemp2 0082  
                               wtemp3 0084                                 wtemp4 0086  
                               wtemp5 0088                                 wtemp6 007F  
                     __end_of_sprintf 0DE6                           isr@ScanTemp 016F  
                  __size_ofi1___lldiv 003F                  __size_of_cleanBuffer 0015  
                         ?i1_Timer2ON 0070                  ?_ConfigureOscillator 0070  
      __end_of_Decode_Scan_Code_Shift 174B                         _ScanCodeSHIFT 18F5  
                  __size_ofi1_delayUS 0026                       _UART_send_break 1755  
                     __initialization 0819                __end_of_Init_PS_2_Send 09EA  
                 __end_of_NoParityMSG 1A3A                    __size_of_Data_TRIS 000B  
                        __end_of_main 08BD                      __end_of_InitUART 0C43  
                    ??_UARTstringWAIT 01AD                           isr@Rx_fault 016C  
                    __end_of_ReadBaud 0F6F                    i1___lldiv@quotient 0078  
          __end_of_DisableInternalADC 02FB                        _SpaceParityMSG 1A3A  
                    __end_of_ScanCode 18F5                        __CFG_LPBOR$OFF 0000  
            __size_of_READ_CONFIG_PIN 0004                      __end_of_Send_PS2 0AC3  
                              ??_main 01D2          __end_of_ScanCodeFunctionNoE0 1884  
                      __CFG_PLLEN$OFF 0000                      __end_of_Timer2ON 1000  
                 __end_of_Init_System 097D                          ReadBaud@temp 01BE  
                    i1CheckSum_byte@i 0076                        i1InitUART@Baud 0020  
                        ?i1_Data_TRIS 0070                      BufferShiftBack@i 0076  
       Decode_Scan_Code_Function@Code 0070                   __end_of_ReadVoltage 02F8  
               ReadFlash_4Byte@column 01A8                                _ADCON0 009D  
                              _ADCON1 009E                   __size_ofi1_UARTchar 0041  
                    ___llmod@dividend 0024                                _ADRESH 009C  
                              _ADRESL 009B                        i1InitUART@temp 0031  
                       _READ_PS_2_PIN 0AC3                        __CFG_ZCDDIS$ON 0000  
                              _ANSELA 018C                                _ANSELC 018E  
                    __end_of___ftpack 03D2                                _HFIOFS 04D0  
                              _RC1STA 019D                                _RC2PPS 0EA2  
                              i1l1117 17CA                                i1l1092 0D53  
                              i1l1089 0D42                                i1l4100 0E0D  
                              i1l4022 0189                                i1l4040 01A8  
                              i1l4104 0E13                                i1l4054 018D  
                              i1l4214 0E4C                                i1l4206 0E2F  
                              i1l4134 0E6D                                i1l4126 0E66  
                              i1l4056 01C8                                i1l4048 01BB  
                              i1l4144 0E76                                i1l4160 1654  
                              i1l4218 0E52                                i1l4162 1658  
                              i1l4332 0D47                                i1l4148 0E7C  
                              i1l5060 17D4                                i1l5212 1594  
                              i1l6100 008C                                i1l4086 01F9  
                              i1l4342 0D72                                i1l4326 0D40  
                              i1l4166 1666                                i1l5214 15A1  
                              i1l6110 00AB                                i1l4096 0DF5  
                              i1l4328 0D44                                i1l4168 1671  
                              i1l5320 161D                                i1l5304 1601  
                              i1l4338 0D63                                i1l5306 160E  
                              i1l5234 15BE                                i1l5226 15A3  
                              i1l5402 116A                                i1l5410 1171  
                              i1l6050 0025                                i1l4364 0DA2  
                              i1l4356 0D9D                                i1l4348 0D74  
                              i1l5260 15D0                                i1l5228 15B2  
                              i1l5500 120A                                i1l5420 1184  
                              i1l6132 00CD                                i1l6108 00A0  
                              i1l5334 0475                                i1l4358 0DAB  
                              i1l4366 0D32                                i1l5318 1610  
                              i1l5262 15DD                                i1l5246 15C1  
                              i1l5190 1574                                i1l5502 121D  
                              i1l5406 116D                                i1l6134 00D0  
                              i1l6062 004B                                i1l4368 0DE0  
                              i1l5248 15CE                                i1l5192 1588  
                              i1l5184 1582                                i1l5520 1241  
                              i1l5512 1232                                i1l6064 004F  
                              i1l5290 15F2                                i1l5450 11C0  
                              i1l5506 1225                                i1l5434 11A2  
                              i1l5442 11B0                                i1l4900 10B4  
                              i1l5292 15FF                                i1l5276 15E3  
                              i1l5620 130D                                i1l5516 123A  
                              i1l5540 1274                                i1l5278 15F0  
                              i1l5702 13A0                                i1l5622 12FA  
                              i1l5550 1289                                i1l5454 11C7  
                              i1l5462 11D3                                i1l5438 11A9  
                              i1l5390 1156                                i1l6094 0082  
                              i1l4656 163D                                i1l5800 1498  
                              i1l5632 1321                                i1l5624 1310  
                              i1l5536 125D                                i1l5528 124F  
                              i1l4922 10EF                                i1l5722 13D4  
                              i1l5650 133F                                i1l5634 1311  
                              i1l5618 130A                                i1l5562 129B  
                              i1l5554 1290                                i1l5490 1209  
                              i1l5466 11DD                                i1l5458 11CE  
                              i1l5378 113B                                i1l3884 169D  
                              i1l4924 10F3                                i1l4932 10FF  
                              i1l5820 14C5                                i1l5812 14AC  
                              i1l5804 149E                                i1l5660 1340  
                              i1l5644 1338                                i1l5636 1324  
                              i1l5572 12B6                                i1l5476 11F1  
                              i1l4926 10F7                                i1l4934 110A  
                              i1l5830 14F7                                i1l5646 133C  
                              i1l5662 1353                                i1l5574 12BA  
                              i1l5590 12D1                                i1l5558 1295  
                              i1l5486 1206                                i1l4864 171B  
                              i1l4928 10FB                                i1l4848 17EE  
                              i1l5832 14FB                                i1l5840 1507  
                              i1l5808 14A6                                i1l5736 13F5  
                              i1l5648 1328                                i1l5576 12A6  
                              i1l5488 11F6                                i1l4866 16F2  
                              i1l5850 152F                                i1l5834 14FF  
                              i1l5842 1512                                i1l5762 1413  
                              i1l5754 140A                                i1l5746 13FA  
                              i1l5674 1368                                i1l5658 1350  
                              i1l5594 12DA                                i1l5586 12CE  
                              i1l5578 12BD                                i1l5498 121A  
                              i1l5836 1503                                i1l5852 1531  
                              i1l5588 12BE                                i1l5846 1525  
                              i1l5782 1472                                i1l5774 142E  
                              i1l5694 1392                                i1l5598 12E2  
                              i1l5686 1384                                i1l4896 10AA  
                              i1l5792 148A                                i1l5768 141F  
                              i1l5872 111F                                i1l5796 1490  
                              i1l5788 1482                                i1l5868 1542  
                              u400_25 0E41                                _INTCON 000B  
                              _FVRCON 0117                                u422_25 0D96  
                              _PARITY 01E6                                u351_25 0234  
                              _PMADRH 0192                                _PMADRL 0191  
                              u353_23 16AF                      __end_of___lwtoft 0394  
                              _PMDATH 0194                                u418_25 00F8  
                              _PMDATL 0193                                u419_25 0118  
                              _PMCON1 0195                                _PMCON2 0196  
                              u460_25 0CF5                                u381_25 0E03  
                              u470_25 0172                    __size_of_ReadUSART 0005  
                              u359_25 0280                                u480_25 04AA  
                              u481_25 04B3                                u377_25 01F0  
                              _OSCCON 0099                                u490_25 10A8  
                              u484_25 17F5                                u469_25 0152  
                              u478_25 0482                                u486_25 1707  
                              u479_25 048C                                u488_25 105A  
                              u489_25 1093                                _SPBRGH 019C  
                              _TX1STA 019E                                _UNLOCK 0215  
                __end_of_OddParityMSG 1A26                            _ResendLast 04BB  
               _PS_2_Read_Data_Second 01D9                             ??_InitApp 01A0  
               ??_ConfigureOscillator 01A0                                _Delete 01E1  
                    i1OpenUSART@spbrg 0070                        __CFG_PWRTE$OFF 0000  
                           ??_SetBaud 00AD                         ??_Timer2Reset 0070  
                          _Timer2Init 0FE9                           ?_BlockErase 0070  
                       InitUART@spbrg 01BA                           SetBaud@Baud 00A8  
                  __size_of_OpenUSART 0026                       ?_Init_PS_2_Send 0070  
                              ___ftge 0B01                __end_of_SpaceParityMSG 1A4A  
                   ?_Decode_Scan_Code 0070                                ___lmul 17C6  
                      __CFG_STVREN$ON 0000                             ??___ftdiv 01B1  
                           ??___lldiv 01A8                           ?_Clock_TRIS 0070  
                           ??___ftmul 01C0                             ??___llmod 007D  
                         SetBaud@temp 00EB                   __size_ofi1_InitUART 0078  
                   __end_of_PS_2_INIT 083D                   __size_ofi1_ReadBaud 0058  
                  ??_Decode_Scan_Code 0070                          ?i1_ReadUSART 0070  
                           ??_delayUS 01A4  __size_of_Decode_Scan_Code_FunctionE0 000C  
                  __size_of_Timer2OFF 0003                           ?_CloseUSART 0070  
              ??_Process_PS2_ScanCode 0120                   __size_ofi1_Send_PS2 00D8  
               ___ftmul@f3_as_product 01C4                     __end_ofi1___lldiv 0E5B  
              ?_WriteFlash_Sequential 007A                   __size_ofi1_Timer2ON 0003  
                   __end_ofi1_delayUS 16BF                       SetBaud@Baudtemp 00E7  
                        ?i1_OpenUSART 0070                __size_of_CheckSum_byte 0019  
                   ??i1_CheckSum_byte 0073                        ?_READ_PS_2_PIN 0070  
                   __end_of_Data_TRIS 0B38                             ??_sprintf 0030  
                      i1ReadBaud@temp 0030               i1READ_PS_2_PIN@DATA_CLK 0070  
             i1_PS_2_ENABLE_INTERRUPT 04CB               __end_of_UART_send_break 175A  
                     _ReadFlash_2Byte 0F9B                       _ReadFlash_4Byte 0F6F  
             __end_of__initialization 0831                   Timer2Init@prescaler 01A2  
                         _NoParityMSG 1A26                    __size_of_WriteBaud 0057  
                    ?_BufferShiftBack 0070                            ___ftge@ff1 01A0  
                          ___ftge@ff2 01A3               ?_PS_2_DISABLE_INTERRUPT 0070  
                          ___ftdiv@f1 01AE                            ___ftdiv@f2 01AB  
                          ___ftdiv@f3 01B5                            _VoltageMSG 1A59  
                           ?_ISNUMBER 0070                    __size_of_baudUSART 0004  
                          ___ftmul@f1 01BA                            ___ftmul@f2 01BD  
                      __pcstackCOMMON 0070                          __pidataBANK4 0000  
                           ?_UARTchar 01A7                         ?_PS2RawToScan 0077  
                        isr@Rx_Overun 016D                    InitUART@baudconfig 01BC  
                         _Init_System 08BD                   __end_of_Timer2Reset 04E5  
                          __end_ofPL2 0B66                            __end_ofPL4 0B73  
                          __end_ofPL6 1760                            __end_ofPL8 1767  
                   __end_of_ReadUSART 0C48                            ___lwtoft@c 01A8  
                         _ReadVoltage 02B3                       ReadVoltage@temp 01D0  
                        WriteBaud@row 0069              __end_ofi1_UARTstringWAIT 164C  
                      _OPTION_REGbits 0095                   ReadFlash_4Byte@temp 01AE  
                        ?i1_baudUSART 0070                     ??_READ_CONFIG_PIN 0070  
      Process_PS2_ScanCode@shortbreak 016A                         ReadUSART@data 01A0  
                         _SinLEDtimer 0225    __size_of_Decode_Scan_Code_Function 000A  
                   __end_of_OpenUSART 0C6F                   __size_of_BlockErase 001F  
                     WriteBaud@Parity 006F                     Send_PS2@oddparity 01AA  
                          __pbssBANK3 01D3                            __pbssBANK4 0220  
                 __size_of_Clock_TRIS 000B                             ?_InitUART 01AD  
                           ?_ReadBaud 01B2                     __end_of_Timer2OFF 04E8  
      __end_of_PS_2_DISABLE_INTERRUPT 0FE9                    ReadVoltage@voltage 01CD  
                             ?_UNLOCK 0070                           ?_ResendLast 0070  
                     i1_READ_PS_2_PIN 168D                   __size_of_CloseUSART 0001  
                           ?_Send_PS2 0070                            ??_ISNUMBER 0070  
                _ScanCodeFunctionNoE0 1800              __end_of_InternalADC_Read 0328  
   __size_ofi1_PS_2_DISABLE_INTERRUPT 000A                           ?_Timer2Init 0070  
                  _ScanCodeFunctionE0 1966                             ?_Timer2ON 0070  
           ?i1_PS_2_DISABLE_INTERRUPT 0070                         _CheckSum_byte 0EF8  
                          __pmaintext 083D                          ??i1_UARTchar 0079  
                         _ParityTyped 01E9                         BlockErase@row 0070  
                             ?___ftge 01A0                               ?___lmul 0070  
                 i1CheckSum_byte@This 0070                        ??_PS2RawToScan 0079  
                       _Caps_Lock_Key 0229                         ?_Reverse_Byte 0070  
                          __pintentry 0004                            ??_UARTchar 01A9  
                      ___lmul@product 0078                             ?___ftpack 01A0  
                     i1InitUART@spbrg 002D                     _PS_2_Buffer_items 01E7  
               i1CheckSum_byte@Parity 0075                             ?___lwtoft 01A8  
                   __end_of_WriteBaud 0131                       ??_READ_PS_2_PIN 01A0  
                 BufferShiftBack@size 0071                     __end_of_baudUSART 0CB2  
             __end_of_ReadFlash_2Byte 0FC7               __end_of_ReadFlash_4Byte 0F9B  
                             _OSCSTAT 009A                   Clock_TRIS@direction 01A0  
           ??i1_PS_2_ENABLE_INTERRUPT 0070                               _PPSLOCK 0E0F  
                        ??i1_InitUART 0025                  i1ReadFlash_2Byte@row 0070  
                        ??i1_ReadBaud 0028                         ?i1_Clock_TRIS 0070  
                  __end_ofi1_UARTchar 168D                  __size_ofi1_Data_TRIS 000A  
                   i1OpenUSART@config 0072                  i1ReadFlash_4Byte@row 0076  
                          ??_InitUART 01B2                            ??_ReadBaud 01B6  
                        ??i1_Send_PS2 007A                 READ_PS_2_PIN@DATA_CLK 01A0  
                    ?_UART_send_break 0070                         ?i1_CloseUSART 0070  
               _PS_2_ENABLE_INTERRUPT 0FD4                       __size_of_UNLOCK 000B  
                        ??i1_Timer2ON 0070                               _InitApp 0B46  
                          ??_Send_PS2 01AA                               _SetBaud 100D  
                      InitUART@config 01BD                        ?_CheckSum_byte 01A0  
                         _Timer2Reset 04E2       i1PS_2_ENABLE_INTERRUPT@DATA_CLK 0070  
                          ??_Timer2ON 01A0                        InitUART@parity 01B1  
             i1CheckSum_byte@Odd_Even 0072                        ??_Reverse_Byte 0070  
                             _Version 1A66                       __size_of___ftge 002C  
                     __size_of___lmul 0025                               ___ftdiv 0328  
                             ___lldiv 0C6F                               ___ftmul 03D2  
                             ___llmod 0DE6                     i1Send_PS2@command 0021  
                  __end_ofi1_InitUART 0D2A                               _delayUS 0ACF  
                  __end_ofi1_ReadBaud 0189                            ??___ftpack 01A5  
                             __ptext1 0B01                               __ptext2 02B3  
                             __ptext3 0384                               __ptext4 03D2  
                             __ptext5 0328                               __ptext6 0394  
                             __ptext7 02FB                               __ptext8 02F8  
                             __ptext9 0833                            ??___lwtoft 01AB  
                __size_ofi1_ReadUSART 0006                          _OddParityMSG 1A11  
                             _dpowers 19D3                    __end_ofi1_Send_PS2 1623  
                 __size_of_ResendLast 0006                             _T2CONbits 001C  
             i1CheckSum_byte@ThisTemp 0073                          __size_of_isr 00D4  
                   i1Send_PS2@timeout 0023              _Process_PS2_ScanCode$856 0162  
            _Process_PS2_ScanCode$857 0164              _Process_PS2_ScanCode$858 0166  
            _Process_PS2_ScanCode$859 0168           WriteFlash_Sequential@amount 007D  
         WriteFlash_Sequential@buffer 007C                    __end_ofi1_Timer2ON 04E2  
               _UART_send_break_timed 17AD                   __size_of_Timer2Init 0015  
                  _DisableInternalADC 02F8           WriteFlash_Sequential@spaces 0067  
                      ??i1_Clock_TRIS 0070               __end_ofi1_READ_PS_2_PIN 1699  
                             _sprintf 0D30                               clrloop0 04D6  
                   _Caps_Lock_Key_old 022A                  __size_ofi1_OpenUSART 0025  
                end_of_initialization 0831                         ??_cleanBuffer 0072  
                      ??i1_CloseUSART 0070                 BufferShiftBack@buffer 0077  
                     i1ReadUSART@data 0070                   ?_DisableInternalADC 0070  
                    UARTchar@override 01A7                      ??_Init_PS_2_Send 01AF  
        ?_Decode_Scan_Code_FunctionE0 0070                       ___lldiv@divisor 01A0  
                     ___lldiv@counter 01AC                          ??_BlockErase 0072  
                           _RCSTAbits 019D                          ??_Clock_TRIS 01A0  
                        __pstringtext 1800                 __end_of_EvenParityMSG 1A11  
                     i1_CheckSum_byte 16D3               ??_WriteFlash_Sequential 0020  
                        ??_CloseUSART 01A0                  ??_DisableInternalADC 01A0  
                           _PS_2_INIT 0833                      __CFG_FOSC$INTOSC 0000  
                           _PS_2_bits 01E8                             _TRISAbits 008C  
                           _TRISCbits 008E             __size_of_Decode_Scan_Code 000C  
                    ?_ReadFlash_2Byte 01A0                      ?_ReadFlash_4Byte 01A6  
                __size_ofi1_baudUSART 0006                             i1___lldiv 0E1C  
               __end_of_MarkParityMSG 1A59                    __end_of_BlockErase 023F  
         __end_of_ConfigureOscillator 0B46                  __end_of_PS2RawToScan 047D  
                           i1_delayUS 1699                ?_PS_2_ENABLE_INTERRUPT 0070  
                  __end_of_Clock_TRIS 0B01                             _BaudTyped 01D3  
                           _Data_TRIS 0B2D                             _CapsCount 01DF  
               i1baudUSART@baudconfig 0070                           ___ftdiv@exp 01B8  
                           _Caps_Lock 01E0                       ??_CheckSum_byte 01A3  
                         _CCP2CONbits 029A                             _TXSTAbits 019E  
                      __end_of_UNLOCK 0220                    __end_of_CloseUSART 0C49  
                 __end_of_cleanBuffer 1800         ??_Decode_Scan_Code_FunctionE0 0070  
                         ___ftmul@exp 01C3                     __size_of_ISNUMBER 000A  
                      __end_of___ftge 0B2D                 CheckSum_byte@Odd_Even 01A2  
                        ?_Init_System 0070                        __end_of___lmul 17EB  
                     _READ_CONFIG_PIN 04DB                          _LineOverride 01E5  
                   __size_of_UARTchar 0040                          ?_ReadVoltage 01C9  
                          ?_PS_2_INIT 0070                             Send_PS2@i 01AC  
       __size_of_Process_PS2_ScanCode 0433                           __end_ofPL10 0B85  
                         __end_ofPL20 0BA3                           __end_ofPL12 0B97  
                         __end_ofPL30 1784                           __end_ofPL22 0BA9  
                         __end_ofPL14 1778                           __end_ofPL40 178B  
                         __end_ofPL32 0E9C                           __end_ofPL24 0BB0  
                         __end_ofPL16 17C6                           __end_ofPL50 0FCE  
                         __end_ofPL42 1790                           __end_ofPL34 02A2  
                         __end_ofPL26 177F                           __end_ofPL18 0E94  
                         __end_ofPL60 0FD4                           __end_ofPL52 0EAA  
                         __end_ofPL44 0BC6                           __end_ofPL36 0BBF  
                         __end_ofPL28 0BB7                           __end_ofPL70 0BD0  
                         __end_ofPL62 02AF                           __end_ofPL54 0435  
                         __end_ofPL46 02A9                           __end_ofPL38 0EA4  
                         __end_ofPL80 0443                           __end_ofPL72 0EAE  
                         __end_ofPL64 17A2                           __end_ofPL56 179C  
                         __end_ofPL48 1795                           __end_ofPL82 0F16  
                         __end_ofPL74 0EB3                           __end_ofPL66 17A8  
                         __end_ofPL58 043B                           __end_ofPL84 02B3  
                         __end_ofPL76 043F                           __end_ofPL68 0BCB  
                         __end_ofPL86 17AD                           __end_ofPL78 0EB8  
              ?_UART_send_break_timed 007A                   start_initialization 0819  
                   ?i1_UARTstringWAIT 007B                             _ReadUSART 0C43  
             __size_of_UARTstringWAIT 0024                 CheckSum_byte@ThisTemp 01A3  
                         __end_of_isr 00D8                            ?i1___lldiv 0070  
                  ??i1_UARTstringWAIT 0020      __end_ofi1_PS_2_DISABLE_INTERRUPT 04CB  
                       WriteBaud@Baud 006B                  __end_of_Reverse_Byte 04BB  
                    ?i1_READ_PS_2_PIN 0070                            ?i1_delayUS 0070  
            ??_Decode_Scan_Code_Shift 0070                         WriteBaud@temp 00A4  
                           _OpenUSART 0C49                            ?_Data_TRIS 0070  
                            ??_UNLOCK 0070                          ??_ResendLast 007A  
                     ___llmod@divisor 0020                     __size_of_InitUART 0073  
                     ___llmod@counter 007D                     __size_of_ReadBaud 0059  
                           _Shift_Key 01EF                          ??_Timer2Init 01A0  
                           _Timer2OFF 04E5               __end_ofi1_CheckSum_byte 16EC  
                   ?_InternalADC_Read 01AA                     __size_of_Send_PS2 00D9  
                            ??___ftge 01A6                              ??___lmul 0078  
            __size_of_BufferShiftBack 0031                    ??_InternalADC_Read 01AD  
                   __size_of_Timer2ON 0002                  __end_ofi1_Clock_TRIS 16C9  
                         __pdataBANK4 0238                  __end_ofi1_CloseUSART 0E5C  
                       i1ReadBaud@row 0024                     __size_of___ftpack 003E  
                    cleanBuffer@count 0070                    __end_of_ResendLast 04C1  
                          ?_ReadUSART 0070                             ___latbits 0002  
                   __size_of___lwtoft 0010                         __pcstackBANK0 0020  
                       __pcstackBANK1 00A0                         __pcstackBANK2 0120  
                       __pcstackBANK3 01A0                             _WriteBaud 00DA  
                  i1UARTchar@override 0077                    ReadFlash_2Byte@row 01A0  
                  __end_of_Timer2Init 0FFE                             _baudUSART 0CAE  
                  ReadFlash_4Byte@row 01A6                           _cleanBuffer 17EB  
                          ?_OpenUSART 01A0                           sprintf@flag 0036  
                         sprintf@prec 0037                              ?_InitApp 0070  
               __end_of_ScanCodeSHIFT 1966       Decode_Scan_Code_FunctionE0@Code 0070  
                            ?_SetBaud 00A8               __end_of_READ_CONFIG_PIN 04DF  
                      ReadBaud@column 01B4                            ?_Timer2OFF 0070  
                        ?_Timer2Reset 0070                              ?___ftdiv 01AB  
                            ?___lldiv 01A0                   i1Send_PS2@oddparity 0020  
                            ?___ftmul 01BA                              ?___llmod 0020  
                    __CFG_PPS1WAY$OFF 0000         WriteFlash_Sequential@TempBufH 0022  
       WriteFlash_Sequential@TempBufL 0042                              ?_delayUS 01A0  
              WriteFlash_Sequential@i 0068            Decode_Scan_Code_Shift@Code 0070  
                            _BAUD1CON 019F                           ??_PS_2_INIT 01AF  
                    i1InitUART@config 0030                              _BAUDMODE 01DE  
               __size_of_PS2RawToScan 003A                      i1InitUART@parity 0024  
                       ??i1_Data_TRIS 0070                      _Decode_Scan_Code 171D  
                  __end_of_VoltageMSG 1A66                            ?_WriteBaud 0069  
    i1PS_2_DISABLE_INTERRUPT@DATA_CLK 0070                           ??i1___lldiv 0078  
               __end_of_READ_PS_2_PIN 0ACF                              ?_sprintf 0028  
                          ?_baudUSART 0070                           ??i1_delayUS 0074  
                           delayUS@US 01A0       __size_of_Decode_Scan_Code_Shift 000C  
          ?_Decode_Scan_Code_Function 0070                           ??_Data_TRIS 01A0  
          WriteFlash_Sequential@tempH 0064            WriteFlash_Sequential@tempL 0062  
            i1_PS_2_DISABLE_INTERRUPT 04C1                             clear_ram0 04D5  
                            _PIE1bits 0091                          cleanBuffer@i 0074  
                BufferShiftBack@shift 0070                              _ISNUMBER 174B  
                            _PIR1bits 0011                      ?i1_CheckSum_byte 0070  
            __size_of_UART_send_break 0005              WriteFlash_Sequential@row 007A  
                            _UARTchar 0EB8                  i1Data_TRIS@direction 0070  
                        _PS2RawToScan 0443                         ??i1_ReadUSART 0070  
                            _LControl 01E3                  __size_of_Init_System 00C0  
            ?i1_PS_2_ENABLE_INTERRUPT 0070        __size_of_WriteFlash_Sequential 008C  
                   ??_BufferShiftBack 0072                 i1ReadFlash_4Byte@temp 0020  
       __end_of_WriteFlash_Sequential 0215                 __size_of_Reverse_Byte 003E  
                      _UARTstringWAIT 097D                           ??_ReadUSART 01A0  
                __size_of_ReadVoltage 0045                              _RControl 01EB  
                       ??i1_OpenUSART 0072              ??_PS_2_DISABLE_INTERRUPT 01A0  
             ??_PS_2_ENABLE_INTERRUPT 01A0                     ___lmul@multiplier 0070  
                            SetBaud@i 00EF                              _InitUART 0BD0  
                            _ReadBaud 0F16                           ??_OpenUSART 01A2  
                 __end_ofi1_Data_TRIS 16D3                  i1UARTstringWAIT@data 007B  
                            _ScanCode 1884                       OpenUSART@config 01A2  
   __end_of_Decode_Scan_Code_Function 1733                              _Send_PS2 09EA  
               __size_ofi1_Clock_TRIS 000A                      __size_of_InitApp 0019  
                         ??_Timer2OFF 0070                      ?_READ_CONFIG_PIN 0070  
                            _Timer2ON 0FFE                      __size_of_SetBaud 010B  
               __size_ofi1_CloseUSART 0001                          _Reverse_Byte 047D  
                    __size_of___ftdiv 005C                       cleanBuffer@data 0073  
              _Decode_Scan_Code_Shift 173F                      __size_of___lldiv 003F  
                    __size_of___ftmul 005C                      __size_of___llmod 0036  
                       SetBaud@Parity 00AC                              ___ftpack 0394  
                      _PS_2_ScanCodes 022C               ??_UART_send_break_timed 007C  
                    __size_of_delayUS 0027           __size_of_DisableInternalADC 0003  
              __end_of_UARTstringWAIT 09A1                              ___lwtoft 0384  
                     Send_PS2@command 01AB                         ??i1_baudUSART 0070  
                          sprintf@val 0039                   __end_ofi1_ReadUSART 0D30  
               i1Clock_TRIS@direction 0070                           ??_WriteBaud 00A0  
                       ISNUMBER@ascii 0070                       Send_PS2@timeout 01AD  
                            __ptext10 0FE9                              __ptext11 0FFE  
                            __ptext20 097D                              __ptext12 09A1  
                            __ptext21 0ACF                              __ptext13 09EA  
                            __ptext30 0C43                              __ptext22 0EB8  
                            __ptext14 0AC3                              __ptext31 0C49  
                            __ptext23 0EF8                              __ptext15 0B2D  
                            __ptext40 04BB                              __ptext32 0C48  
                            __ptext24 0F16                              __ptext16 0AF6  
                            __ptext41 04C1                              __ptext33 0B46  
                            __ptext25 0F6F                              __ptext17 0FDE  
                            __ptext50 17AD                              __ptext42 04DB  
                            __ptext34 0B38                              __ptext26 0F9B  
                            __ptext18 0FD4                              __ptext51 1755  
                            __ptext43 1118                              __ptext27 0BD0  
                            __ptext19 08BD                              __ptext60 0E5C  
                            __ptext52 100D                              __ptext44 154B  
                            __ptext36 04DF                              __ptext28 0CAE  
                            __ptext61 0E5B                              __ptext53 1623  
                            __ptext45 168D                              __ptext37 04CB  
                            __ptext29 0C6F                              __ptext70 0215  
                            __ptext62 0D30                              __ptext54 164C  
                            __ptext46 16C9                              __ptext38 04E2  
                            __ptext71 174B                              __ptext63 0E1C  
                            __ptext55 0131                              __ptext47 16BF  
                            __ptext39 04E5                              __ptext72 173F  
                            __ptext64 0DE6                              __ptext56 023F  
                            __ptext48 17EB                              __ptext73 1733  
                            __ptext65 00DA                              __ptext57 0CB2  
                            __ptext49 17C6                              __ptext74 1729  
                            __ptext66 0189                              __ptext58 0E81  
                            __ptext75 171D                              __ptext67 1699  
                            __ptext59 0D2A                              __ptext76 16EC  
                            __ptext68 026D                              __ptext77 0443  
                            __ptext69 0220                              __ptext78 16D3  
                            __ptext79 047D         PS_2_ENABLE_INTERRUPT@DATA_CLK 01A0  
                   i1_ReadFlash_2Byte 026D                     i1_ReadFlash_4Byte 023F  
                         ??_baudUSART 01A0                          i1_Clock_TRIS 16BF  
                    __size_of_sprintf 00B6                    ?i1_ReadFlash_2Byte 0070  
                  ?i1_ReadFlash_4Byte 0076                   __end_ofi1_OpenUSART 0E81  
                       __size_of_main 0080                          i1_CloseUSART 0E5B  
            __size_of_ReadFlash_2Byte 002C              __size_of_ReadFlash_4Byte 002C  
        __end_of_Process_PS2_ScanCode 154B                              delayUS@i 01A5  
                            delayUS@j 01A9             __size_ofi1_UARTstringWAIT 0029  
                        _pwrLEDtoggle 0227          __size_of_ConfigureOscillator 000E  
               __end_of_CheckSum_byte 0F11                   ??i1_ReadFlash_2Byte 0073  
                 ??i1_ReadFlash_4Byte 007A                            _RC1STAbits 019D  
                      CheckSum_byte@i 01A6                        _Left_Shift_Key 01E4  
                __size_of_Timer2Reset 0003       __end_ofi1_PS_2_ENABLE_INTERRUPT 04D5  
             __size_of_Init_PS_2_Send 0049                        Timer2Init@time 01A0  
                   ??_UART_send_break 0070                       ?_UARTstringWAIT 01AB  
                 CheckSum_byte@Parity 01A5                            _INTCONbits 000B  
           __size_of_InternalADC_Read 002D                        OpenUSART@spbrg 01A0  
           __end_ofi1_ReadFlash_2Byte 029A             __end_ofi1_ReadFlash_4Byte 026D  
                        UARTchar@data 01AA                           i1_Data_TRIS 16C9  
     __size_of_PS_2_DISABLE_INTERRUPT 000B                   __end_ofi1_baudUSART 0E87  
                            intlevel1 0000                             sprintf@ap 003D  
                           sprintf@sp 0028                          ?_cleanBuffer 0070  
                    ___lldiv@dividend 01A4   __end_of_Decode_Scan_Code_FunctionE0 173F  
         _Decode_Scan_Code_FunctionE0 1733                     __CFG_CLKOUTEN$OFF 0000  
                      _BatteryVoltage 0220              __size_ofi1_READ_PS_2_PIN 000C  
            __end_of_Decode_Scan_Code 1729                            i1_UARTchar 164C  
                     _Right_Shift_Key 01ED                           i1Send_PS2@i 0022  
                         i1_ReadUSART 0D2A                         _EvenParityMSG 19FB  
                            sprintf@c 003E                              sprintf@f 002A  
                    i1ReadBaud@column 0026                      ___lldiv@quotient 01A8  
             i1ReadFlash_2Byte@column 0072                  Decode_Scan_Code@Code 0070  
          ??i1_PS_2_DISABLE_INTERRUPT 0070                           i1_OpenUSART 0E5C  
                   Init_System@Parity 01CE                    _Left_Shift_Key_old 022B  
                          _TX1STAbits 019E                            i1_InitUART 0CB2  
                   CheckSum_byte@This 01A0                        i1UARTchar@data 007A  
                          i1_ReadBaud 0131                         _MarkParityMSG 1A4A  
                          i1_Send_PS2 154B           ??_Decode_Scan_Code_Function 0070  
                     Init_System@Baud 01CA                            i1_Timer2ON 04DF  
                     Init_System@temp 01C6                       PS2RawToScan@Raw 0077  
      PS_2_DISABLE_INTERRUPT@DATA_CLK 01A0                      PS2RawToScan@temp 0020  
